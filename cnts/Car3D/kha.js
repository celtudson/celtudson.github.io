// Generated by Haxe 4.3.7+5c57013
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AABB = function() {
	this.axisY = new kha_math_Vector2(0,0);
	this.axisX = new kha_math_Vector2(0,0);
	this.center = new kha_math_Vector2(0,0);
	this.rotatedCorners = [];
	this.rotation = 0;
	this.planeHHalf = 0.8;
	this.planeWHalf = 0.3;
	this.corners = [new kha_math_Vector2(-this.planeWHalf,-this.planeHHalf),new kha_math_Vector2(this.planeWHalf,-this.planeHHalf),new kha_math_Vector2(this.planeWHalf,this.planeHHalf * 0.8),new kha_math_Vector2(-this.planeWHalf,this.planeHHalf * 0.8)];
};
$hxClasses["AABB"] = AABB;
AABB.__name__ = true;
AABB.prototype = {
	planeWHalf: null
	,planeHHalf: null
	,corners: null
	,rotation: null
	,rotatedCorners: null
	,set_rotation: function(_radians) {
		this.rotation = _radians;
		var cos = Math.cos(_radians);
		var sin = Math.sin(_radians);
		this.rotatedCorners.length = 0;
		var _g = 0;
		var _g1 = this.corners;
		while(_g < _g1.length) {
			var corner = _g1[_g];
			++_g;
			this.rotatedCorners.push(new kha_math_Vector2(corner.x * cos - corner.y * sin,corner.x * sin + corner.y * cos));
		}
		this.computeAxes();
		return this.rotation;
	}
	,center: null
	,getGlobalRotatedCorners: function() {
		var globalRotated = [];
		var _g = 0;
		var _g1 = this.rotatedCorners;
		while(_g < _g1.length) {
			var corner = _g1[_g];
			++_g;
			globalRotated.push(new kha_math_Vector2(this.center.x + corner.x,this.center.y + corner.y));
		}
		return globalRotated;
	}
	,axisX: null
	,axisY: null
	,computeAxes: function() {
		var cos = Math.cos(this.rotation);
		var sin = Math.sin(this.rotation);
		this.axisX.x = cos;
		this.axisX.y = sin;
		this.axisY.x = -sin;
		this.axisY.y = cos;
	}
	,__class__: AABB
};
var SATCollision = function() { };
$hxClasses["SATCollision"] = SATCollision;
SATCollision.__name__ = true;
SATCollision.getEdgeAxis = function(_a,_b) {
	var x = _b.x - _a.x;
	var y = _b.y - _a.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var edge_x = x;
	var edge_y = y;
	var length = Math.sqrt(edge_x * edge_x + edge_y * edge_y);
	if(length == 0) {
		return new kha_math_Vector2(0,0);
	}
	return new kha_math_Vector2(edge_x / length,edge_y / length);
};
SATCollision.getPerpAxis = function(_axis) {
	return new kha_math_Vector2(-_axis.y,_axis.x);
};
SATCollision.getPolygonCenter = function(_points) {
	var sum_x = 0;
	var sum_y = 0;
	var _g = 0;
	while(_g < _points.length) {
		var p = _points[_g];
		++_g;
		sum_x += p.x;
		sum_y += p.y;
	}
	return new kha_math_Vector2(sum_x / _points.length,sum_y / _points.length);
};
SATCollision.projectPointOnAxis = function(_p,_axis) {
	return _p.x * _axis.x + _p.y * _axis.y;
};
SATCollision.projectPointsOnAxis = function(_points,_axis) {
	var min = SATCollision.projectPointOnAxis(_points[0],_axis);
	var max = min;
	var _g = 0;
	while(_g < _points.length) {
		var proj = SATCollision.projectPointOnAxis(_points[_g++],_axis);
		if(proj < min) {
			min = proj;
		}
		if(proj > max) {
			max = proj;
		}
	}
	return { min : min, max : max};
};
SATCollision.isOverlap = function(_projA,_projB) {
	return !(_projA.max < _projB.min || _projB.max < _projA.min);
};
SATCollision.test = function(_polygonA,_polygonB) {
	var mtvAxis = null;
	var mtvOverlap = Infinity;
	var testAxes = function(_points) {
		var _g_current = 0;
		while(_g_current < _points.length) {
			var axis = SATCollision.getPerpAxis(SATCollision.getEdgeAxis(_points[_g_current++],_points[(_g_current - 1 + 1) % _points.length]));
			var projA = SATCollision.projectPointsOnAxis(_polygonA,axis);
			var projB = SATCollision.projectPointsOnAxis(_polygonB,axis);
			if(!SATCollision.isOverlap(projA,projB)) {
				return false;
			} else {
				var overlap = Math.min(projA.max,projB.max) - Math.max(projA.min,projB.min);
				if(overlap < mtvOverlap) {
					mtvOverlap = overlap;
					mtvAxis = axis;
				}
			}
		}
		return true;
	};
	if(!testAxes(_polygonA)) {
		return null;
	}
	if(!testAxes(_polygonB)) {
		return null;
	}
	var centerA = SATCollision.getPolygonCenter(_polygonA);
	var centerB = SATCollision.getPolygonCenter(_polygonB);
	var x = centerB.x - centerA.x;
	var y = centerB.y - centerA.y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x * mtvAxis.x + y * mtvAxis.y < 0) {
		mtvAxis = new kha_math_Vector2(-mtvAxis.x,-mtvAxis.y);
	}
	return new kha_math_Vector2(mtvAxis.x * mtvOverlap,mtvAxis.y * mtvOverlap);
};
var InertialPoint = function() {
	this.speed = new kha_math_Vector2(0,0);
	this.engineSin = 0;
	this.engineCos = 0;
	this.y = 0;
	this.x = 0;
	this.movementDistPerTick = 0;
	this.engineAngle = 0;
	this.steeringAngle = 0;
	this.frictionRatio = 0.1;
	this.enginePower = 0;
};
$hxClasses["InertialPoint"] = InertialPoint;
InertialPoint.__name__ = true;
InertialPoint.prototype = {
	enginePower: null
	,frictionRatio: null
	,steeringAngle: null
	,engineAngle: null
	,movementDistPerTick: null
	,set_frictionRatio: function(_ratio) {
		if(_ratio < 0) {
			_ratio = 0;
		} else if(_ratio > 1) {
			_ratio = 1;
		}
		return this.frictionRatio = _ratio;
	}
	,x: null
	,y: null
	,engineCos: null
	,engineSin: null
	,speed: null
	,update: function() {
		this.speed.x *= 1 - this.frictionRatio;
		this.speed.y *= 1 - this.frictionRatio;
		this.engineCos = Math.cos(this.engineAngle);
		this.engineSin = Math.sin(this.engineAngle);
		this.speed.x += this.engineCos * this.enginePower;
		this.speed.y += this.engineSin * this.enginePower;
		this.movementDistPerTick = Math.sqrt(this.speed.x * this.speed.x + this.speed.y * this.speed.y);
		this.x += this.speed.x;
		this.y += this.speed.y;
	}
	,__class__: InertialPoint
};
var Car = function() {
	this.movementAngle = 0;
	this.wheelBase = 16;
	InertialPoint.call(this);
};
$hxClasses["Car"] = Car;
Car.__name__ = true;
Car.__super__ = InertialPoint;
Car.prototype = $extend(InertialPoint.prototype,{
	wheelBase: null
	,movementAngle: null
	,calcTurnRadius: function() {
		if(Math.abs(this.steeringAngle) < 0.001) {
			return 0;
		}
		return this.wheelBase / Math.tan(this.steeringAngle);
	}
	,update: function() {
		InertialPoint.prototype.update.call(this);
		this.movementAngle = Math.atan2(this.speed.y,this.speed.x);
	}
	,__class__: Car
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var aps_render__$Screen_Fps = function() {
	this.baseFontSize = 20;
	this.accumulatedFrames = 0;
	this.lastTime = 0.0;
	this.accumulatedTime = 0.0;
	this.fpsCount = 0;
};
$hxClasses["aps.render._Screen.Fps"] = aps_render__$Screen_Fps;
aps_render__$Screen_Fps.__name__ = true;
aps_render__$Screen_Fps.prototype = {
	fpsCount: null
	,accumulatedTime: null
	,lastTime: null
	,accumulatedFrames: null
	,baseFontSize: null
	,render: function(_g,_screen) {
		var realTime = kha_Scheduler.realTime();
		var deltaTime = realTime - this.lastTime;
		this.lastTime = realTime;
		this.accumulatedTime += deltaTime;
		if(this.accumulatedTime >= 1) {
			this.accumulatedTime = 0;
			this.fpsCount = this.accumulatedFrames;
			this.accumulatedFrames = 0;
		}
		this.accumulatedFrames++;
		if(_screen.showFps) {
			_g.begin(false);
			var _this = _g.transformations[_g.transformationIndex];
			_this._00 = 1;
			_this._10 = 0;
			_this._20 = 0;
			_this._01 = 0;
			_this._11 = 1;
			_this._21 = 0;
			_this._02 = 0;
			_this._12 = 0;
			_this._22 = 1;
			_g.set_font(aps_render_Screen.systemfont);
			_g.set_fontSize(this.baseFontSize * (_screen.isFpsScaled ? aps_render_Resizer.currentScale : 1) | 0);
			var windowW = kha_System.windowWidth();
			var windowH = kha_System.windowHeight();
			var txt = "" + this.fpsCount + " | " + windowW + "x" + windowH + " " + aps_render_Resizer.currentScale + "x";
			var size = aps_render_Screen.getSystemFontSize(_g.get_fontSize(),txt);
			var x = windowW - size.x;
			_g.set_color(-2147483648);
			_g.fillRect(x,0,size.x,size.y);
			_g.set_color(-1);
			_g.drawString(txt,x,-size.y);
			_g.end();
		}
	}
	,__class__: aps_render__$Screen_Fps
};
var aps_render_Mouser = function(_id) {
	this.moveStartY = 0;
	this.moveStartX = 0;
	this.isDown = false;
	this.button = 0;
	this.y = 0;
	this.x = 0;
	this.scale = 1.0;
	this.id = _id;
};
$hxClasses["aps.render.Mouser"] = aps_render_Mouser;
aps_render_Mouser.__name__ = true;
aps_render_Mouser.prototype = {
	id: null
	,scale: null
	,x: null
	,y: null
	,button: null
	,isDown: null
	,moveStartX: null
	,moveStartY: null
	,pressButton: function(_button,_x,_y) {
		this.isDown = true;
		this.button = _button;
		this.x = _x / this.scale | 0;
		this.y = _y / this.scale | 0;
		this.moveStartX = this.x;
		this.moveStartY = this.y;
	}
	,move: function(_x,_y,_mx,_my) {
		this.x = _x / this.scale | 0;
		this.y = _y / this.scale | 0;
	}
	,releaseButton: function(_button,_x,_y) {
		if(!this.isDown) {
			return;
		}
		this.isDown = false;
		this.button = _button;
		this.x = _x / this.scale | 0;
		this.y = _y / this.scale | 0;
	}
	,__class__: aps_render_Mouser
};
var aps_render_Screen = function() {
	this.isFpsScaled = false;
	this.showFps = false;
	this.resizer = new aps_render_Resizer(this);
	new aps_render_Focuser(this);
};
$hxClasses["aps.render.Screen"] = aps_render_Screen;
aps_render_Screen.__name__ = true;
aps_render_Screen.getSystemFontSize = function(_fontSize,_txt) {
	if(aps_render_Screen.systemfont == null) {
		return null;
	}
	var h = Math.ceil(aps_render_Screen.systemfont.height(_fontSize) / 2.666);
	return { x : Math.ceil(aps_render_Screen.systemfont.width(_fontSize,_txt)), y : h};
};
aps_render_Screen.prototype = {
	resizer: null
	,showFps: null
	,isFpsScaled: null
	,show: function() {
		var _gthis = this;
		var keyboard = kha_input_Keyboard.get();
		var mouse = kha_input_Mouse.get();
		if(aps_render_Screen.screen != null) {
			kha_System.removeFramesListener(($_=aps_render_Screen.screen,$bind($_,$_._onRender)));
			if(keyboard != null) {
				keyboard.remove(($_=aps_render_Screen.screen,$bind($_,$_._onKeyDown)),($_=aps_render_Screen.screen,$bind($_,$_._onKeyUp)),null);
			}
			if(mouse != null) {
				mouse.remove(($_=aps_render_Screen.screen,$bind($_,$_._onMouseDown)),($_=aps_render_Screen.screen,$bind($_,$_._onMouseUp)),($_=aps_render_Screen.screen,$bind($_,$_._onMouseMove)),($_=aps_render_Screen.screen,$bind($_,$_.onMouseWheel)),null);
			}
		}
		aps_render_Screen.screen = this;
		if(aps_render_Screen.taskId != -1) {
			kha_Scheduler.removeTimeTask(aps_render_Screen.taskId);
		}
		aps_render_Screen.taskId = kha_Scheduler.addTimeTask(function() {
			_gthis._onUpdate();
		},0,0.016666666666666666);
		kha_System.notifyOnFrames($bind(this,this._onRender));
		if(keyboard != null) {
			keyboard.notify($bind(this,this._onKeyDown),$bind(this,this._onKeyUp),null);
		}
		var key = aps_render_Screen.keys.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			aps_render_Screen.keys.h[key1] = false;
		}
		if(mouse != null) {
			mouse.notify($bind(this,this._onMouseDown),$bind(this,this._onMouseUp),$bind(this,this._onMouseMove),$bind(this,this.onMouseWheel),null);
		}
		aps_render_Screen.mouser.scale = aps_render_Resizer.currentScale;
		this.resizer.recalcContentScale();
	}
	,_onUpdate: function() {
		this.onUpdate();
	}
	,_onRender: function(_frames) {
		this.resizer.checkWindowSize();
		var frame = _frames[0];
		var g = frame.get_g2();
		var _this = g.transformations[g.transformationIndex];
		_this._00 = aps_render_Resizer.currentScale;
		_this._10 = 0;
		_this._20 = 0;
		_this._01 = 0;
		_this._11 = aps_render_Resizer.currentScale;
		_this._21 = 0;
		_this._02 = 0;
		_this._12 = 0;
		_this._22 = 1;
		this.onRender(frame);
		aps_render_Screen.fps.render(g,this);
	}
	,_onMouseDown: function(_button,_x,_y) {
		aps_render_Screen.mouser.pressButton(_button,_x,_y);
		this.onMouseDown(aps_render_Screen.mouser);
	}
	,_onMouseMove: function(_x,_y,_mx,_my) {
		aps_render_Screen.mouser.move(_x,_y,_mx,_my);
		this.onMouseMove(aps_render_Screen.mouser);
	}
	,_onMouseUp: function(_button,_x,_y) {
		aps_render_Screen.mouser.releaseButton(_button,_x,_y);
		this.onMouseUp(aps_render_Screen.mouser);
	}
	,_onKeyDown: function(_key) {
		aps_render_Screen.keys.h[_key] = true;
		this.onKeyDown(_key);
	}
	,_onKeyUp: function(_key) {
		aps_render_Screen.keys.h[_key] = false;
		this.onKeyUp(_key);
	}
	,onResize: function(_newScale) {
	}
	,onFocusOut: function() {
	}
	,onFocusIn: function() {
	}
	,onUpdate: function() {
	}
	,onRender: function(_frame) {
	}
	,onKeyDown: function(_key) {
	}
	,onKeyUp: function(_key) {
	}
	,onMouseDown: function(_m) {
	}
	,onMouseMove: function(_m) {
	}
	,onMouseUp: function(_m) {
	}
	,onMouseWheel: function(_delta) {
	}
	,__class__: aps_render_Screen
};
var GameDisplay = function() {
	this.carTopdownPlane = new threed_Mesh(threed_Mesh.prefabAnchor);
	this.carAABB = new AABB();
	this.physicalTurnRadius = 0;
	this.geometricTurnRadius = 0;
	this.prevMouseY = 0;
	this.prevMouseX = 0;
	this.prevIsPressed = false;
	this.mouseNDC = new kha_math_Vector2(0,0);
	this.floorTriangles = [];
	this.rightWallTriangles = [];
	this.leftWallTriangles = [];
	this.rights = [];
	this.lefts = [];
	this.centers = [];
	this.car = new Car();
	this.actionDown = new aps_render_ActionButton([83,40,32]);
	this.actionUp = new aps_render_ActionButton([87,38]);
	this.actionRight = new aps_render_ActionButton([68,39]);
	this.actionLeft = new aps_render_ActionButton([65,37]);
	this.isSpectator = false;
	this.isDebug = true;
	this.channelEngine = kha_audio2_Audio1.play(kha_Assets.sounds.sfx_engine_0,true);
	this.channelSkid = kha_audio2_Audio1.play(kha_Assets.sounds.sfx_skid);
	this.isStartupClickNeeded = true;
	this.bgm = null;
	this.isWideFix = false;
	var _gthis = this;
	aps_render_Screen.call(this);
	GameDisplay.cam = new threed_Camera(this.resizer.contentW.value,this.resizer.contentH.value);
	this.updateResolution();
	this.show();
	this.showFps = true;
	var staticStructure = new kha_graphics4_VertexStructure();
	staticStructure.add("transformsMeshOffset",0);
	staticStructure.add("pos",2);
	staticStructure.add("normal",2);
	staticStructure.add("uv",1);
	staticStructure.add("tint",3);
	this.staticPipeline = new kha_graphics4_PipelineState();
	this.staticPipeline.inputLayout = [staticStructure];
	this.staticPipeline.fragmentShader = kha_Shaders.simple_frag;
	this.staticPipeline.vertexShader = kha_Shaders.static_vert;
	this.staticPipeline.depthWrite = true;
	this.staticPipeline.depthMode = 5;
	this.staticPipeline.cullMode = 0;
	this.staticPipeline.compile();
	this.updateProjectionMatrix();
	this.staticBatcher = new threed_MeshBatcher(false,this.staticPipeline,staticStructure,13);
	this.scene = new threed_Scene();
	this.bianca = new threed_Mesh(new threed_Prefab(new threed_Gltf(kha_Assets.blobs.audi_quattro___group_b_glb).faces));
	this.bianca.scale.x = 0.1;
	this.bianca.scale.y = this.bianca.scale.x;
	this.bianca.scale.z = this.bianca.scale.x;
	this.bianca.modelCorrection = threed_QuaternionHelper.quatFromEuler(new kha_math_Vector3(-Math.PI * 0.5,Math.PI * 0.5,0));
	this.bianca.texture = kha_Assets.images.audi;
	this.bianca.centerVertices(0,0,-0.35);
	this.bianca.localEuler.y = this.car.engineAngle;
	this.bianca.setWorldEuler(this.bianca.localEuler);
	this.scene.meshesInRoot.push(this.bianca);
	if(this.isSpectator) {
		GameDisplay.cam.localEuler.y = threed_Projectables.degreesToRadians(-90);
		GameDisplay.cam.localEuler.x = threed_Projectables.degreesToRadians(89);
		GameDisplay.cam.updateSightVector();
		this.updateViewMatrix();
	}
	var spline = aps_SplineSegment.buildSpline(true,[new kha_math_Vector2(42,0),new kha_math_Vector2(42,-11),new kha_math_Vector2(32,-20),new kha_math_Vector2(20,-25),new kha_math_Vector2(5,-27),new kha_math_Vector2(-5,-27),new kha_math_Vector2(-20,-25),new kha_math_Vector2(-32,-20),new kha_math_Vector2(-42,-11),new kha_math_Vector2(-45,0),new kha_math_Vector2(-42,11),new kha_math_Vector2(-32,20),new kha_math_Vector2(-20,25),new kha_math_Vector2(-5,27),new kha_math_Vector2(5,27),new kha_math_Vector2(20,25),new kha_math_Vector2(32,20),new kha_math_Vector2(42,11)]);
	this.centers = spline.points;
	var _g = 0;
	var _g1 = this.centers.length;
	while(_g < _g1) {
		var i = _g++;
		var center = this.centers[i];
		var prev = i > 0 ? this.centers[i - 1] : center;
		var next = i < this.centers.length - 1 ? this.centers[i + 1] : center;
		var x = center.x - prev.x;
		var y = center.y - prev.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _this_x = x;
		var _this_y = y;
		var x1 = _this_x;
		var y1 = _this_y;
		if(_this_y == null) {
			y1 = 0;
		}
		if(_this_x == null) {
			x1 = 0;
		}
		var dir1_x = x1;
		var dir1_y = y1;
		var currentLength = Math.sqrt(dir1_x * dir1_x + dir1_y * dir1_y);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			dir1_x *= mul;
			dir1_y *= mul;
		}
		var x2 = next.x - center.x;
		var y2 = next.y - center.y;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var _this_x1 = x2;
		var _this_y1 = y2;
		var x3 = _this_x1;
		var y3 = _this_y1;
		if(_this_y1 == null) {
			y3 = 0;
		}
		if(_this_x1 == null) {
			x3 = 0;
		}
		var dir2_x = x3;
		var dir2_y = y3;
		var currentLength1 = Math.sqrt(dir2_x * dir2_x + dir2_y * dir2_y);
		if(currentLength1 != 0) {
			var mul1 = 1 / currentLength1;
			dir2_x *= mul1;
			dir2_y *= mul1;
		}
		var x4 = dir1_x + dir2_x;
		var y4 = dir1_y + dir2_y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var _this_x2 = x4;
		var _this_y2 = y4;
		var x5 = _this_x2;
		var y5 = _this_y2;
		if(_this_y2 == null) {
			y5 = 0;
		}
		if(_this_x2 == null) {
			x5 = 0;
		}
		var tangent_x = x5;
		var tangent_y = y5;
		var currentLength2 = Math.sqrt(tangent_x * tangent_x + tangent_y * tangent_y);
		if(currentLength2 != 0) {
			var mul2 = 1 / currentLength2;
			tangent_x *= mul2;
			tangent_y *= mul2;
		}
		var x6 = -tangent_y;
		var y6 = tangent_x;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var normal_x = x6;
		var normal_y = y6;
		var x7 = normal_x * 3;
		var y7 = normal_y * 3;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		this.lefts.push(new kha_math_Vector2(center.x - x7,center.y - y7));
		var x8 = normal_x * 3;
		var y8 = normal_y * 3;
		if(y8 == null) {
			y8 = 0;
		}
		if(x8 == null) {
			x8 = 0;
		}
		this.rights.push(new kha_math_Vector2(center.x + x8,center.y + y8));
	}
	if(spline.isBuildedByLoop) {
		var prevLeft = this.lefts[this.lefts.length - 1];
		var prevRight = this.rights[this.rights.length - 1];
		prevLeft.x = this.lefts[0].x;
		prevLeft.y = this.lefts[0].y;
		prevRight.x = this.rights[0].x;
		prevRight.y = this.rights[0].y;
	}
	var centedId = 1;
	var _g = 0;
	var _g1 = spline.segments;
	while(_g < _g1.length) {
		var segment = _g1[_g++];
		var mesh = new threed_Mesh();
		var _g2 = 1;
		var _g3 = segment.subPoints.length;
		while(_g2 < _g3) {
			++_g2;
			var _prevLeft = this.lefts[centedId - 1];
			var _prevRight = this.rights[centedId - 1];
			var _left = this.lefts[centedId];
			var _right = this.rights[centedId];
			++centedId;
			var left = new threed_Point(_left.x,0,_left.y);
			var prevLeft = new threed_Point(_prevLeft.x,0,_prevLeft.y);
			var right = new threed_Point(_right.x,0,_right.y);
			var prevRight = new threed_Point(_prevRight.x,0,_prevRight.y);
			var rightTop = new threed_Point(_right.x,1.5,_right.y);
			var prevRightTop = new threed_Point(_prevRight.x,1.5,_prevRight.y);
			var leftTop = new threed_Point(_left.x,0.5,_left.y);
			var prevLeftTop = new threed_Point(_prevLeft.x,0.5,_prevLeft.y);
			var leftDown = new threed_Point(_left.x,-leftTop.pos.y,_left.y);
			var prevLeftDown = new threed_Point(_prevLeft.x,-prevLeftTop.pos.y,_prevLeft.y);
			var rightDown = new threed_Point(_right.x,-rightTop.pos.y,_right.y);
			var prevRightDown = new threed_Point(_prevRight.x,-prevRightTop.pos.y,_prevRight.y);
			var floorForward = new threed_Triangle([right.copyPos(),left.copyPos(),prevRight.copyPos()]);
			var floorBackward = new threed_Triangle([prevLeft.copyPos(),prevRight.copyPos(),left.copyPos()]);
			mesh.triangulated.push(floorForward);
			mesh.triangulated.push(floorBackward);
			this.floorTriangles.push(floorForward);
			this.floorTriangles.push(floorBackward);
			var rightWall = new threed_Triangle([right.copyPos(),prevRight.copyPos(),rightTop.copyPos()]);
			mesh.triangulated.push(rightWall);
			this.rightWallTriangles.push(rightWall);
			mesh.triangulated.push(new threed_Triangle([rightTop.copyPos(),prevRight.copyPos(),prevRightTop.copyPos()]));
			var leftWall = new threed_Triangle([prevLeft.copyPos(),left.copyPos(),leftTop.copyPos()]);
			mesh.triangulated.push(leftWall);
			this.leftWallTriangles.push(leftWall);
			mesh.triangulated.push(new threed_Triangle([prevLeft.copyPos(),leftTop.copyPos(),prevLeftTop.copyPos()]));
			mesh.triangulated.push(new threed_Triangle([left.copyPos(),prevLeft.copyPos(),leftTop.copyPos()]));
			mesh.triangulated.push(new threed_Triangle([leftTop.copyPos(),prevLeft.copyPos(),prevLeftTop.copyPos()]));
			mesh.triangulated.push(new threed_Triangle([left.copyPos(),leftDown.copyPos(),prevLeft.copyPos()]));
			mesh.triangulated.push(new threed_Triangle([prevLeft.copyPos(),leftDown.copyPos(),prevLeftDown.copyPos()]));
			mesh.triangulated.push(new threed_Triangle([right.copyPos(),rightDown.copyPos(),prevRight.copyPos()]));
			mesh.triangulated.push(new threed_Triangle([prevRightDown.copyPos(),prevRight.copyPos(),rightDown.copyPos()]));
		}
		mesh.texture = Loader.white;
		var _g4 = 0;
		var _g5 = mesh.triangulated;
		while(_g4 < _g5.length) _g5[_g4++].updateNormalAndApplyToVertices();
		this.scene.meshesInRoot.push(mesh);
	}
	this.carTopdownPlane.texture = kha_Assets.images.bianca;
	var _this = this.carAABB.corners;
	var _g_current = 0;
	while(_g_current < _this.length) {
		var _g_value = _this[_g_current];
		var _g_key = _g_current++;
		this.carTopdownPlane.vertices[_g_key].pos.y = 0;
		this.carTopdownPlane.vertices[_g_key].pos.x = _g_value.x;
		this.carTopdownPlane.vertices[_g_key].pos.z = _g_value.y;
	}
	this.scene.meshesInRoot.push(this.carTopdownPlane);
	this.staticBatcher.batch(this.scene.meshesInRoot);
	this.channelSkid.stop();
	this.channelEngine.stop();
	this.gamepadHandle = new aps_utils_GamepadHandle(function(_key) {
		switch(_key) {
		case 12:
			_gthis.actionUp.tryKeyDown(_gthis.actionUp.keyCodes[0]);
			break;
		case 13:
			_gthis.actionDown.tryKeyDown(_gthis.actionDown.keyCodes[0]);
			break;
		case 14:
			_gthis.actionLeft.tryKeyDown(_gthis.actionLeft.keyCodes[0]);
			break;
		case 15:
			_gthis.actionRight.tryKeyDown(_gthis.actionRight.keyCodes[0]);
			break;
		}
	},function(_key) {
		switch(_key) {
		case 12:
			_gthis.actionUp.tryKeyUp(_gthis.actionUp.keyCodes[0]);
			break;
		case 13:
			_gthis.actionDown.tryKeyUp(_gthis.actionDown.keyCodes[0]);
			break;
		case 14:
			_gthis.actionLeft.tryKeyUp(_gthis.actionLeft.keyCodes[0]);
			break;
		case 15:
			_gthis.actionRight.tryKeyUp(_gthis.actionRight.keyCodes[0]);
			break;
		}
	});
	this.initCar(42,0);
};
$hxClasses["GameDisplay"] = GameDisplay;
GameDisplay.__name__ = true;
GameDisplay.__super__ = aps_render_Screen;
GameDisplay.prototype = $extend(aps_render_Screen.prototype,{
	projection: null
	,invertedProjection: null
	,view: null
	,invertedView: null
	,vp: null
	,updateProjectionMatrix: function() {
		var zn = GameDisplay.cam.near;
		var zf = GameDisplay.cam.far;
		var uh = 1.0 / Math.tan(22.5);
		this.projection = new kha_math_FastMatrix4(uh / (this.resizer.contentW.value / this.resizer.contentH.value),0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
		this.invertedProjection = threed_Projectables.safeInverse(this.projection);
	}
	,updateViewMatrix: function() {
		var eye = GameDisplay.cam.pos;
		var _this = GameDisplay.cam.pos;
		var vec = GameDisplay.cam.sight;
		var x = _this.x + vec.x;
		var y = _this.y + vec.y;
		var z = _this.z + vec.z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var up_x = 0;
		var up_y = 1;
		var up_z = 0;
		var x1 = x - eye.x;
		var y1 = y - eye.y;
		var z1 = z - eye.z;
		if(z1 == null) {
			z1 = 0;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var x = _this_x;
		var y = _this_y;
		var z = _this_z;
		if(_this_z == null) {
			z = 0;
		}
		if(_this_y == null) {
			y = 0;
		}
		if(_this_x == null) {
			x = 0;
		}
		var zaxis_x = x;
		var zaxis_y = y;
		var zaxis_z = z;
		var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			zaxis_x *= mul;
			zaxis_y *= mul;
			zaxis_z *= mul;
		}
		var _x = zaxis_y * up_z - zaxis_z * up_y;
		var _y = zaxis_z * up_x - zaxis_x * up_z;
		var _z = zaxis_x * up_y - zaxis_y * up_x;
		var x = _x;
		var y = _y;
		var z = _z;
		if(_z == null) {
			z = 0;
		}
		if(_y == null) {
			y = 0;
		}
		if(_x == null) {
			x = 0;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x = _this_x;
		var y = _this_y;
		var z = _this_z;
		if(_this_z == null) {
			z = 0;
		}
		if(_this_y == null) {
			y = 0;
		}
		if(_this_x == null) {
			x = 0;
		}
		var xaxis_x = x;
		var xaxis_y = y;
		var xaxis_z = z;
		var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			xaxis_x *= mul;
			xaxis_y *= mul;
			xaxis_z *= mul;
		}
		var _x = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
		var _y = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
		var _z = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
		var x = _x;
		var y = _y;
		var z = _z;
		if(_z == null) {
			z = 0;
		}
		if(_y == null) {
			y = 0;
		}
		if(_x == null) {
			x = 0;
		}
		var yaxis_x = x;
		var yaxis_y = y;
		var yaxis_z = z;
		this.view = new kha_math_FastMatrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
		this.invertedView = threed_Projectables.safeInverse(this.view);
	}
	,isWideFix: null
	,updateResolution: function() {
		this.resizer.contentW.set(640);
		this.resizer.contentH.set(this.resizer.contentW.value * (this.isWideFix ? 0.5625 : 0.75) | 0);
		haxe_Log.trace(this.resizer.contentW.value,{ fileName : "GameDisplay.hx", lineNumber : 67, className : "GameDisplay", methodName : "updateResolution", customParams : [this.resizer.contentH.value]});
		this.resizer.isIntegerScale = false;
		if(GameDisplay.cam != null) {
			GameDisplay.cam.updateResolution(this.resizer.contentW.value,this.resizer.contentH.value);
		}
	}
	,staticPipeline: null
	,bgm: null
	,isStartupClickNeeded: null
	,onMouseDown: function(_m) {
		if(this.isStartupClickNeeded) {
			this.isStartupClickNeeded = false;
			if(this.bgm != null) {
				this.bgm.play();
			}
		}
	}
	,onFocusIn: function() {
		if(!this.isStartupClickNeeded) {
			if(this.bgm != null) {
				this.bgm.play();
			}
		}
	}
	,onFocusOut: function() {
		if(this.bgm != null) {
			this.bgm.pause();
		}
	}
	,channelSkid: null
	,channelEngine: null
	,isDebug: null
	,isSpectator: null
	,actionLeft: null
	,actionRight: null
	,actionUp: null
	,actionDown: null
	,gamepadHandle: null
	,staticBatcher: null
	,scene: null
	,car: null
	,bianca: null
	,centers: null
	,lefts: null
	,rights: null
	,leftWallTriangles: null
	,rightWallTriangles: null
	,floorTriangles: null
	,mouseNDC: null
	,prevIsPressed: null
	,prevMouseX: null
	,prevMouseY: null
	,normalizedTopDownSight: null
	,geometricTurnRadius: null
	,physicalTurnRadius: null
	,isReversing: null
	,lastBrakingSpeedFactor: null
	,prevEngineSoundIndex: null
	,cameraTargetAngle: null
	,carAABB: null
	,carTopdownPlane: null
	,initCar: function(_x,_y) {
		this.isReversing = false;
		this.lastBrakingSpeedFactor = 0;
		this.prevEngineSoundIndex = -1;
		this.car.speed.x = 0;
		this.car.speed.y = 0;
		this.car.engineAngle = -Math.PI * 0.5;
		this.car.steeringAngle = 0;
		this.car.enginePower = 0.001;
		this.car.update();
		this.car.enginePower = 0;
		this.cameraTargetAngle = this.car.movementAngle;
		this.car.x = _x;
		this.car.y = _y;
	}
	,onUpdate: function() {
		var _gthis = this;
		if(this.isSpectator) {
			this.mouseNDC.x = aps_render_Screen.mouser.x / this.resizer.contentW.value * 2 - 1;
			this.mouseNDC.y = -(aps_render_Screen.mouser.y / this.resizer.contentH.value) * 2 + 1;
			if(aps_render_Screen.mouser.isDown) {
				var mouseX = this.mouseNDC.x * this.resizer.contentW.value;
				var mouseY = this.mouseNDC.y * this.resizer.contentH.value;
				if(!this.prevIsPressed) {
					this.prevIsPressed = true;
					this.prevMouseX = mouseX;
					this.prevMouseY = mouseY;
				}
				var deltaX = mouseX - this.prevMouseX;
				var deltaY = mouseY - this.prevMouseY;
				this.prevMouseX = mouseX;
				this.prevMouseY = mouseY;
				GameDisplay.cam.localEuler.y += deltaX / this.resizer.contentW.value * Math.PI;
				GameDisplay.cam.localEuler.x -= deltaY / this.resizer.contentW.value * Math.PI;
			} else {
				this.prevIsPressed = false;
			}
			GameDisplay.cam.updateSightVector();
			var topDownMovement_x = 0;
			var topDownMovement_y = 0;
			if(aps_render_Screen.keys.h[87]) {
				topDownMovement_x = .1;
			}
			if(aps_render_Screen.keys.h[83]) {
				topDownMovement_x = -.1;
			}
			if(aps_render_Screen.keys.h[65]) {
				topDownMovement_y = .1;
			}
			if(aps_render_Screen.keys.h[68]) {
				topDownMovement_y = -.1;
			}
			var topDownAngle = Math.atan2(GameDisplay.cam.sight.z,GameDisplay.cam.sight.x);
			this.normalizedTopDownSight = new kha_math_Vector2(Math.cos(topDownAngle),Math.sin(topDownAngle));
			GameDisplay.cam.pos.x += this.normalizedTopDownSight.x * topDownMovement_x;
			GameDisplay.cam.pos.z += this.normalizedTopDownSight.y * topDownMovement_x;
			GameDisplay.cam.pos.x += this.normalizedTopDownSight.y * topDownMovement_y;
			GameDisplay.cam.pos.z -= this.normalizedTopDownSight.x * topDownMovement_y;
			var pitchDelta = 0.0;
			if(aps_render_Screen.keys.h[40] && !aps_render_Screen.keys.h[38]) {
				pitchDelta = 0.01;
			}
			if(pitchDelta != 0) {
				this.bianca.rotatePitch(null,pitchDelta);
			}
			var _this = this.bianca.quatBase;
			var scale = 1.0 / _this.get_length();
			_this.set_x(_this.get_x() * scale);
			_this.set_y(_this.get_y() * scale);
			_this.set_z(_this.get_z() * scale);
			_this.set_w(_this.get_w() * scale);
		} else {
			this.car.set_frictionRatio(0.1);
			var action = 0;
			if(this.actionUp.isPressed && !this.actionDown.isPressed) {
				action = 1;
			} else if(this.actionDown.isPressed) {
				action = 2;
			}
			if(action == 1) {
				this.car.enginePower += 0.00025;
			} else if(action == 2) {
				if(this.car.enginePower > 0.01) {
					this.car.enginePower *= 0.98;
				} else {
					this.car.enginePower -= 8.3333333333333331e-005;
				}
			} else {
				this.car.enginePower *= 0.995;
				if(Math.abs(this.car.enginePower) < 0.001) {
					this.car.enginePower = 0;
				}
			}
			if(this.car.enginePower > 0.03) {
				this.car.enginePower = 0.03;
			} else if(this.car.enginePower < -0.01) {
				this.car.enginePower = -0.01;
			}
			var speedFactor = this.isReversing ? Math.min(Math.abs(this.car.enginePower / 0.01) * 0.5,0.5) : Math.min(Math.abs(this.car.enginePower / 0.03),1);
			var engineSoundIndex = (speedFactor * 5 | 0) / 5;
			if(this.prevEngineSoundIndex != engineSoundIndex) {
				this.prevEngineSoundIndex = engineSoundIndex;
				var sound;
				switch(engineSoundIndex) {
				case 0.2:
					sound = kha_Assets.sounds.sfx_engine_1;
					break;
				case 0.4:
					sound = kha_Assets.sounds.sfx_engine_2;
					break;
				case 0.6:
					sound = kha_Assets.sounds.sfx_engine_3;
					break;
				case 0.8:case 1.0:
					sound = kha_Assets.sounds.sfx_engine_4;
					break;
				default:
					sound = kha_Assets.sounds.sfx_engine_0;
				}
				var pos = this.channelEngine.get_position();
				this.channelEngine.stop();
				this.channelEngine = kha_audio2_Audio1.play(sound,true);
				this.channelEngine.set_volume(0.25 + engineSoundIndex * 0.15);
				if(this.channelEngine.get_volume() > 0.37) {
					this.channelEngine.set_volume(0.37);
				}
				this.channelEngine.set_position(pos);
			}
			if(action != 2) {
				this.channelSkid.stop();
			}
			if(action == 1) {
				if(this.car.enginePower > 0 && speedFactor >= 0.5) {
					this.lastBrakingSpeedFactor = 0.5;
				}
			} else if(action == 2) {
				if(this.car.enginePower > 0 && speedFactor >= 0.5 && speedFactor > this.lastBrakingSpeedFactor) {
					this.lastBrakingSpeedFactor = speedFactor;
					this.channelSkid.stop();
					this.channelSkid.play();
				}
			}
			var maxSteering = 2 * Math.PI * 0.24;
			maxSteering -= maxSteering * (this.isReversing ? 0.1 : 0.5) * speedFactor;
			var delta = maxSteering / 30;
			var changeSteering = function(_isLeft) {
				if(_isLeft) {
					_gthis.car.steeringAngle -= delta;
					if(_gthis.car.steeringAngle < -maxSteering) {
						_gthis.car.steeringAngle = -maxSteering;
					}
				} else {
					_gthis.car.steeringAngle += delta;
					if(_gthis.car.steeringAngle > maxSteering) {
						_gthis.car.steeringAngle = maxSteering;
					}
				}
			};
			if(this.actionLeft.isPressed && !this.actionRight.isPressed) {
				if(this.car.enginePower < 0) {
					changeSteering(false);
				} else {
					changeSteering(true);
				}
			} else if(this.actionRight.isPressed && !this.actionLeft.isPressed) {
				if(this.car.enginePower < 0) {
					changeSteering(true);
				} else {
					changeSteering(false);
				}
			} else {
				this.car.steeringAngle *= 0.8;
			}
			if(Math.abs(this.car.steeringAngle) < 0.01) {
				this.car.steeringAngle = 0;
			}
			this.geometricTurnRadius = Math.abs(this.car.calcTurnRadius());
			this.physicalTurnRadius = this.car.movementDistPerTick * this.car.movementDistPerTick / 0.004;
			if(this.car.steeringAngle != 0) {
				var turnRadius = Math.max(this.geometricTurnRadius,this.physicalTurnRadius);
				this.car.engineAngle += (this.car.steeringAngle > 0 ? 1 : -1) * (turnRadius < 0.001 ? 0 : this.car.movementDistPerTick / turnRadius);
			}
			this.car.update();
			var reversingDot = Math.cos(this.car.movementAngle) * Math.cos(this.car.engineAngle) + Math.sin(this.car.movementAngle) * Math.sin(this.car.engineAngle);
			if(reversingDot < -0.5 || reversingDot > 0.5) {
				this.isReversing = reversingDot < 0;
			}
			var up = this.bianca.debugMeshes[0];
			var forward = this.bianca.debugMeshes[1];
			var back = this.bianca.debugMeshes[2];
			var debug1 = this.bianca.debugMeshes[3];
			var debug2 = this.bianca.debugMeshes[4];
			var debug3 = this.bianca.debugMeshes[5];
			var yawDelta = 0.0;
			if(this.actionRight.isPressed && !this.actionLeft.isPressed) {
				yawDelta = -0.01;
			} else if(this.actionLeft.isPressed && !this.actionRight.isPressed) {
				yawDelta = 0.01;
			}
			yawDelta = -this.car.engineAngle;
			if(yawDelta != 0) {
				this.bianca.rotateYaw(false,yawDelta);
			}
			var _this = this.bianca.quatBase;
			var scale = 1.0 / _this.get_length();
			_this.set_x(_this.get_x() * scale);
			_this.set_y(_this.get_y() * scale);
			_this.set_z(_this.get_z() * scale);
			_this.set_w(_this.get_w() * scale);
			if(this.isDebug) {
				var _g = 0;
				var _g1 = this.leftWallTriangles;
				while(_g < _g1.length) {
					var wall = _g1[_g];
					++_g;
					wall.uvs[0].tint.x = 1;
					wall.uvs[0].tint.y = 1;
					wall.uvs[0].tint.z = 1;
					wall.uvs[1].tint.x = 1;
					wall.uvs[1].tint.y = 1;
					wall.uvs[1].tint.z = 1;
					wall.uvs[2].tint.x = 1;
					wall.uvs[2].tint.y = 1;
					wall.uvs[2].tint.z = 1;
				}
				var _g = 0;
				var _g1 = this.rightWallTriangles;
				while(_g < _g1.length) {
					var wall = _g1[_g];
					++_g;
					wall.uvs[0].tint.x = 1;
					wall.uvs[0].tint.y = 1;
					wall.uvs[0].tint.z = 1;
					wall.uvs[1].tint.x = 1;
					wall.uvs[1].tint.y = 1;
					wall.uvs[1].tint.z = 1;
					wall.uvs[2].tint.x = 1;
					wall.uvs[2].tint.y = 1;
					wall.uvs[2].tint.z = 1;
				}
				var _g = 0;
				var _g1 = this.floorTriangles;
				while(_g < _g1.length) {
					var wall = _g1[_g];
					++_g;
					wall.uvs[0].tint.x = 1;
					wall.uvs[0].tint.y = 1;
					wall.uvs[0].tint.z = 0;
					wall.uvs[1].tint.x = 1;
					wall.uvs[1].tint.y = 1;
					wall.uvs[1].tint.z = 0;
					wall.uvs[2].tint.x = 1;
					wall.uvs[2].tint.y = 1;
					wall.uvs[2].tint.z = 0;
				}
			}
			var carRotatetedCorners = [];
			var updateCarAABB = function() {
				var x = _gthis.car.x;
				var y = _gthis.car.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var _2d_x = x;
				var _2d_y = y;
				var x = _2d_x;
				var z = _2d_y;
				if(_2d_y == null) {
					z = 0;
				}
				if(_2d_x == null) {
					x = 0;
				}
				_gthis.carTopdownPlane.pos = new kha_math_FastVector3(x,0.1,z);
				_gthis.carTopdownPlane.localEuler.y = _gthis.bianca.localEuler.y - Math.PI * 0.5;
				_gthis.carTopdownPlane.quatBase = threed_QuaternionHelper.quatFromEuler(_gthis.carTopdownPlane.localEuler);
				_gthis.carAABB.set_rotation(-_gthis.carTopdownPlane.localEuler.y);
				_gthis.carAABB.center.x = _gthis.car.x;
				_gthis.carAABB.center.y = _gthis.car.y;
				carRotatetedCorners = _gthis.carAABB.getGlobalRotatedCorners();
				up.pos = new kha_math_FastVector3(carRotatetedCorners[0].x,_gthis.carTopdownPlane.pos.y,carRotatetedCorners[0].y);
				debug1.pos = new kha_math_FastVector3(carRotatetedCorners[1].x,_gthis.carTopdownPlane.pos.y,carRotatetedCorners[1].y);
				debug2.pos = new kha_math_FastVector3(carRotatetedCorners[2].x,_gthis.carTopdownPlane.pos.y,carRotatetedCorners[2].y);
				debug3.pos = new kha_math_FastVector3(carRotatetedCorners[3].x,_gthis.carTopdownPlane.pos.y,carRotatetedCorners[3].y);
			};
			updateCarAABB();
			var _this = this.leftWallTriangles;
			var _g_current = 0;
			while(_g_current < _this.length) {
				var _g_value = _this[_g_current];
				++_g_current;
				var _p1 = _g_value.vertices[0].pos;
				var _p2 = _g_value.vertices[1].pos;
				var mtv = SATCollision.test([new kha_math_Vector2(0,0),new kha_math_Vector2(_p2.x,_p2.z),new kha_math_Vector2(_p1.x,_p1.z)],carRotatetedCorners);
				if(mtv != null) {
					this.car.x += mtv.x;
					this.car.y += mtv.y;
					updateCarAABB();
				}
			}
			var _this = this.rightWallTriangles;
			var _g_current = 0;
			while(_g_current < _this.length) {
				var _g_value = _this[_g_current];
				var _g_key = _g_current++;
				var _p1 = this.leftWallTriangles[_g_key].vertices[0].pos;
				var _p2 = this.leftWallTriangles[_g_key].vertices[1].pos;
				var x = _p1.x;
				var y = _p1.z;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var x1 = _p2.x;
				var y1 = _p2.z;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var _p3 = _g_value.vertices[0].pos;
				var _p4 = _g_value.vertices[1].pos;
				var p3 = new kha_math_Vector2(_p3.x,_p3.z);
				var p4 = new kha_math_Vector2(_p4.x,_p4.z);
				var mtv = SATCollision.test([p3,p4,new kha_math_Vector2(p3.x + x,p3.y + y),new kha_math_Vector2(p4.x + x1,p4.y + y1)],carRotatetedCorners);
				if(mtv != null) {
					this.car.x += mtv.x;
					this.car.y += mtv.y;
					updateCarAABB();
				}
			}
			var x = this.car.x;
			var y = this.car.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _2d_x = x;
			var _2d_y = y;
			var x = _2d_x;
			var z = _2d_y;
			if(_2d_y == null) {
				z = 0;
			}
			if(_2d_x == null) {
				x = 0;
			}
			this.bianca.pos.x = x;
			this.bianca.pos.z = z;
			var calcDist = function(_o,_triangle) {
				var left = _triangle.vertices[0];
				var _this = left.pos;
				var _this1 = _triangle.vertices[1].pos;
				var vec = left.pos;
				var x = _this1.x - vec.x;
				var y = _this1.y - vec.y;
				var z = _this1.z - vec.z;
				if(z == null) {
					z = 0;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var x1 = x * 0.5;
				var y1 = y * 0.5;
				var z1 = z * 0.5;
				if(z1 == null) {
					z1 = 0;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var x = _this.x + x1;
				var y = _this.y + y1;
				var z = _this.z + z1;
				if(z == null) {
					z = 0;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var center_x = x;
				var center_z = z;
				var x = center_x;
				var z = center_z;
				if(center_z == null) {
					z = 0;
				}
				if(center_x == null) {
					x = 0;
				}
				var _3d_x = x;
				var _3d_z = z;
				var x = _3d_x;
				var y = _3d_z;
				if(_3d_z == null) {
					y = 0;
				}
				if(_3d_x == null) {
					x = 0;
				}
				var x1 = x - _o.x;
				var y1 = y - _o.y;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var vec_x = x1;
				var vec_y = y1;
				return Math.sqrt(vec_x * vec_x + vec_y * vec_y);
			};
			var nearestToHeroDist = calcDist(new kha_math_Vector2(this.car.x,this.car.y),this.floorTriangles[0]);
			var _g = 0;
			var _g1 = this.floorTriangles.length / 2 | 0;
			while(_g < _g1) {
				var dist = calcDist(new kha_math_Vector2(this.car.x,this.car.y),this.floorTriangles[_g++ * 2]);
				if(dist < nearestToHeroDist) {
					nearestToHeroDist = dist;
				}
			}
			var delta1 = this.limitRadians((this.isReversing ? this.car.movementAngle : this.car.movementAngle) - this.cameraTargetAngle);
			this.cameraTargetAngle += delta1 * 0.1;
			var x = Math.cos(this.cameraTargetAngle);
			var y = Math.sin(this.cameraTargetAngle);
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _2d_x = x;
			var _2d_y = y;
			var x = _2d_x;
			var z = _2d_y;
			if(_2d_y == null) {
				z = 0;
			}
			if(_2d_x == null) {
				x = 0;
			}
			var directionVec_x = x;
			var directionVec_z = z;
			var _this = this.carTopdownPlane.pos;
			var x = directionVec_x;
			var z = directionVec_z;
			if(directionVec_z == null) {
				z = 0;
			}
			if(directionVec_x == null) {
				x = 0;
			}
			forward.pos = new kha_math_FastVector3(_this.x + x,_this.y + 0,_this.z + z);
			var _this = this.carTopdownPlane.pos;
			var x = -directionVec_x;
			var z = -directionVec_z;
			if(z == null) {
				z = 0;
			}
			if(x == null) {
				x = 0;
			}
			back.pos = new kha_math_FastVector3(_this.x + x,_this.y + 0,_this.z + z);
			GameDisplay.cam.pos = threed_Projectables.pointOnSegment(this.carTopdownPlane.pos,back.pos,2);
			GameDisplay.cam.pos.y += 1.5;
			var eye = GameDisplay.cam.pos;
			var at = forward.pos;
			var up_x = 0;
			var up_y = 1;
			var up_z = 0;
			var x = at.x - eye.x;
			var y = at.y - eye.y;
			var z = at.z - eye.z;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(_this_z == null) {
				z = 0;
			}
			if(_this_y == null) {
				y = 0;
			}
			if(_this_x == null) {
				x = 0;
			}
			var zaxis_x = x;
			var zaxis_y = y;
			var zaxis_z = z;
			var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
			if(currentLength != 0) {
				var mul = 1 / currentLength;
				zaxis_x *= mul;
				zaxis_y *= mul;
				zaxis_z *= mul;
			}
			var _x = zaxis_y * up_z - zaxis_z * up_y;
			var _y = zaxis_z * up_x - zaxis_x * up_z;
			var _z = zaxis_x * up_y - zaxis_y * up_x;
			var x = _x;
			var y = _y;
			var z = _z;
			if(_z == null) {
				z = 0;
			}
			if(_y == null) {
				y = 0;
			}
			if(_x == null) {
				x = 0;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(_this_z == null) {
				z = 0;
			}
			if(_this_y == null) {
				y = 0;
			}
			if(_this_x == null) {
				x = 0;
			}
			var xaxis_x = x;
			var xaxis_y = y;
			var xaxis_z = z;
			var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
			if(currentLength != 0) {
				var mul = 1 / currentLength;
				xaxis_x *= mul;
				xaxis_y *= mul;
				xaxis_z *= mul;
			}
			GameDisplay.cam.localEuler.y = Math.atan2(-(-zaxis_z),-(-zaxis_x));
			GameDisplay.cam.localEuler.x = Math.asin(-(-(-zaxis_y)));
			GameDisplay.cam.updateSightVector();
		}
		GameDisplay.cam.far = 96;
		this.updateProjectionMatrix();
		this.updateViewMatrix();
		var ray = new kha_math_FastVector4(this.mouseNDC.x,this.mouseNDC.y,1,1);
		var _this = this.invertedProjection;
		var product = new kha_math_FastVector4();
		product.x = _this._00 * ray.x + _this._10 * ray.y + _this._20 * ray.z + _this._30 * ray.w;
		product.y = _this._01 * ray.x + _this._11 * ray.y + _this._21 * ray.z + _this._31 * ray.w;
		product.z = _this._02 * ray.x + _this._12 * ray.y + _this._22 * ray.z + _this._32 * ray.w;
		product.w = _this._03 * ray.x + _this._13 * ray.y + _this._23 * ray.z + _this._33 * ray.w;
		ray = product;
		var _this = this.invertedView;
		var product1 = new kha_math_FastVector4();
		product1.x = _this._00 * product.x + _this._10 * product.y + _this._20 * product.z + _this._30 * product.w;
		product1.y = _this._01 * product.x + _this._11 * product.y + _this._21 * product.z + _this._31 * product.w;
		product1.z = _this._02 * product.x + _this._12 * product.y + _this._22 * product.z + _this._32 * product.w;
		product1.w = _this._03 * product.x + _this._13 * product.y + _this._23 * product.z + _this._33 * product.w;
		ray = product1;
		var value = 1 / product1.w;
		ray = new kha_math_FastVector4(product1.x * value,product1.y * value,product1.z * value,product1.w * value);
		ray.x -= GameDisplay.cam.pos.x;
		ray.y -= GameDisplay.cam.pos.y;
		ray.z -= GameDisplay.cam.pos.z;
		this.scene.update();
		this.staticBatcher.update();
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__30 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = 0;
		var _this__31 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _this__32 = 0;
		var _this__03 = 0;
		var _this__13 = 0;
		var _this__23 = 0;
		var _this__33 = 1;
		var m = this.projection;
		var _00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02 + _this__30 * m._03;
		var _10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12 + _this__30 * m._13;
		var _20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22 + _this__30 * m._23;
		var _30 = _this__00 * m._30 + _this__10 * m._31 + _this__20 * m._32 + _this__30 * m._33;
		var _01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02 + _this__31 * m._03;
		var _11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12 + _this__31 * m._13;
		var _21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22 + _this__31 * m._23;
		var _31 = _this__01 * m._30 + _this__11 * m._31 + _this__21 * m._32 + _this__31 * m._33;
		var _02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02 + _this__32 * m._03;
		var _12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12 + _this__32 * m._13;
		var _22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22 + _this__32 * m._23;
		var _32 = _this__02 * m._30 + _this__12 * m._31 + _this__22 * m._32 + _this__32 * m._33;
		var _03 = _this__03 * m._00 + _this__13 * m._01 + _this__23 * m._02 + _this__33 * m._03;
		var _13 = _this__03 * m._10 + _this__13 * m._11 + _this__23 * m._12 + _this__33 * m._13;
		var _23 = _this__03 * m._20 + _this__13 * m._21 + _this__23 * m._22 + _this__33 * m._23;
		var _33 = _this__03 * m._30 + _this__13 * m._31 + _this__23 * m._32 + _this__33 * m._33;
		var m = this.view;
		this.vp = new kha_math_FastMatrix4(_00 * m._00 + _10 * m._01 + _20 * m._02 + _30 * m._03,_00 * m._10 + _10 * m._11 + _20 * m._12 + _30 * m._13,_00 * m._20 + _10 * m._21 + _20 * m._22 + _30 * m._23,_00 * m._30 + _10 * m._31 + _20 * m._32 + _30 * m._33,_01 * m._00 + _11 * m._01 + _21 * m._02 + _31 * m._03,_01 * m._10 + _11 * m._11 + _21 * m._12 + _31 * m._13,_01 * m._20 + _11 * m._21 + _21 * m._22 + _31 * m._23,_01 * m._30 + _11 * m._31 + _21 * m._32 + _31 * m._33,_02 * m._00 + _12 * m._01 + _22 * m._02 + _32 * m._03,_02 * m._10 + _12 * m._11 + _22 * m._12 + _32 * m._13,_02 * m._20 + _12 * m._21 + _22 * m._22 + _32 * m._23,_02 * m._30 + _12 * m._31 + _22 * m._32 + _32 * m._33,_03 * m._00 + _13 * m._01 + _23 * m._02 + _33 * m._03,_03 * m._10 + _13 * m._11 + _23 * m._12 + _33 * m._13,_03 * m._20 + _13 * m._21 + _23 * m._22 + _33 * m._23,_03 * m._30 + _13 * m._31 + _23 * m._32 + _33 * m._33);
	}
	,limitRadians: function(angle) {
		angle %= 2 * Math.PI;
		if(angle < -Math.PI) {
			angle += 2 * Math.PI;
		} else if(angle > Math.PI) {
			angle -= 2 * Math.PI;
		}
		return angle;
	}
	,onMouseWheel: function(_delta) {
		if(this.isSpectator) {
			GameDisplay.cam.pos.y -= _delta * 0.25;
		}
	}
	,onKeyDown: function(_key) {
		this.actionLeft.tryKeyDown(_key);
		this.actionRight.tryKeyDown(_key);
		this.actionUp.tryKeyDown(_key);
		this.actionDown.tryKeyDown(_key);
		switch(_key) {
		case 27:
			this.isWideFix = !this.isWideFix;
			this.updateResolution();
			break;
		case 82:
			this.initCar(42,0);
			break;
		default:
		}
	}
	,onKeyUp: function(_key) {
		this.actionLeft.tryKeyUp(_key);
		this.actionRight.tryKeyUp(_key);
		this.actionUp.tryKeyUp(_key);
		this.actionDown.tryKeyUp(_key);
	}
	,onRender: function(canvas) {
		var g4 = GameDisplay.cam.framebuffer.get_g4();
		g4.begin();
		g4.clear(0,1);
		g4.setPipeline(this.staticPipeline);
		this.staticBatcher.render(g4,this.vp,GameDisplay.cam);
		g4.end();
		var g2 = canvas.get_g2();
		g2.set_font(aps_render_Screen.systemfont);
		g2.set_fontSize(20);
		g2.begin();
		g2.set_color(-65281);
		g2.fillRect(0,0,this.resizer.w,this.resizer.h);
		var _this = g2.transformations[g2.transformationIndex];
		var _21 = (this.resizer.contentH.value - -1 * this.resizer.contentH.value) / 2;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = -1;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _00 = _this._00 * m__00 + _this._10 * m__01 + _this._20 * m__02;
		var _10 = _this._00 * m__10 + _this._10 * m__11 + _this._20 * m__12;
		var _20 = _this._00 * m__20 + _this._10 * _21 + _this._20 * m__22;
		var _01 = _this._01 * m__00 + _this._11 * m__01 + _this._21 * m__02;
		var _11 = _this._01 * m__10 + _this._11 * m__11 + _this._21 * m__12;
		var _211 = _this._01 * m__20 + _this._11 * _21 + _this._21 * m__22;
		var _02 = _this._02 * m__00 + _this._12 * m__01 + _this._22 * m__02;
		var _12 = _this._02 * m__10 + _this._12 * m__11 + _this._22 * m__12;
		var _22 = _this._02 * m__20 + _this._12 * _21 + _this._22 * m__22;
		g2.transformationIndex++;
		if(g2.transformationIndex == g2.transformations.length) {
			g2.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = g2.transformations[g2.transformationIndex];
		_this._00 = _00;
		_this._10 = _10;
		_this._20 = _20;
		_this._01 = _01;
		_this._11 = _11;
		_this._21 = _211;
		_this._02 = _02;
		_this._12 = _12;
		_this._22 = _22;
		g2.setTransformation(g2.transformations[g2.transformationIndex]);
		g2.set_color(-1);
		g2.drawImage(GameDisplay.cam.framebuffer,0,0);
		g2.popTransformation();
		if(this.isDebug) {
			var debugStrings = [new String("" + this.resizer.contentW.value + "x" + this.resizer.contentH.value),new String("cam.pos: " + aps_utils_NumberSystemsUtils.afterDot(2,GameDisplay.cam.pos.x) + ", " + aps_utils_NumberSystemsUtils.afterDot(2,GameDisplay.cam.pos.y) + ", " + aps_utils_NumberSystemsUtils.afterDot(2,GameDisplay.cam.pos.z) + ", cam.euler: " + aps_utils_NumberSystemsUtils.afterDot(2,GameDisplay.cam.localEuler.x) + "," + aps_utils_NumberSystemsUtils.afterDot(2,GameDisplay.cam.localEuler.y) + "," + aps_utils_NumberSystemsUtils.afterDot(2,GameDisplay.cam.localEuler.z)),new String("mouseNDC: " + aps_utils_NumberSystemsUtils.afterDot(2,this.mouseNDC.x) + "," + aps_utils_NumberSystemsUtils.afterDot(2,this.mouseNDC.y)),new String(""),new String("movementDistPerTick: " + aps_utils_NumberSystemsUtils.afterDot(2,this.car.movementDistPerTick)),new String("car.speed: " + aps_utils_NumberSystemsUtils.afterDot(2,this.car.speed.x)) + ", " + aps_utils_NumberSystemsUtils.afterDot(2,this.car.speed.y),new String("bianca.euler.y: " + aps_utils_NumberSystemsUtils.afterDot(2,this.bianca.localEuler.y)),new String("steeringAngle: " + aps_utils_NumberSystemsUtils.afterDot(2,this.car.steeringAngle))];
			var screenH = this.resizer.contentH.value;
			g2.set_color(-2147483648);
			var _g_current = 0;
			while(_g_current < debugStrings.length) {
				var _g_value = debugStrings[_g_current++];
				var size = aps_render_Screen.getSystemFontSize(g2.get_fontSize(),_g_value);
				g2.set_color(-2147483648);
				g2.fillRect(16,screenH - 8 * (2 + (_g_current - 1)) + 8,size.x,size.y);
			}
			var _g_current = 0;
			while(_g_current < debugStrings.length) {
				var _g_value = debugStrings[_g_current++];
				g2.set_color(-1);
				g2.drawString(_g_value,16,screenH - 8 * (2 + (_g_current - 1)));
			}
			var offX = this.resizer.contentW.value * 0.0825 * 1.5;
			var offY = this.resizer.contentH.value * 0.075 * 1.5;
			g2.set_color(-16711936);
			var _this = this.lefts;
			var _g_current = 0;
			while(_g_current < _this.length) {
				var _g_value = _this[_g_current];
				var second = this.lefts[(_g_current++ + 1) % this.lefts.length];
				g2.drawLine(offX + _g_value.x * 1.5,offY + _g_value.y * 1.5,offX + second.x * 1.5,offY + second.y * 1.5,0.5);
			}
			var _this = this.rights;
			var _g_current = 0;
			while(_g_current < _this.length) {
				var _g_value = _this[_g_current];
				var second = this.rights[(_g_current++ + 1) % this.rights.length];
				g2.drawLine(offX + _g_value.x * 1.5,offY + _g_value.y * 1.5,offX + second.x * 1.5,offY + second.y * 1.5,0.5);
			}
			g2.set_color(-256);
			var carRotatetedCorners = this.carAABB.getGlobalRotatedCorners();
			var _g_current = 0;
			while(_g_current < carRotatetedCorners.length) {
				var _g_value = carRotatetedCorners[_g_current];
				var second = carRotatetedCorners[(_g_current++ + 1) % carRotatetedCorners.length];
				g2.drawLine(offX + _g_value.x * 1.5,offY + _g_value.y * 1.5,offX + second.x * 1.5,offY + second.y * 1.5,0.5);
			}
			if(this.geometricTurnRadius > 0) {
				g2.set_color(-256);
				kha_graphics2_GraphicsExtension.drawCircle(g2,150.,120.,this.geometricTurnRadius * 1.5,1,16);
			}
			g2.set_color(-65536);
			kha_graphics2_GraphicsExtension.drawCircle(g2,150.,120.,this.physicalTurnRadius * 1.5,1,16);
			g2.set_color(-1);
		}
		g2.end();
	}
	,__class__: GameDisplay
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = true;
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var Loader = function() {
	this.inlinedImagesFailedToLoad = [];
	var _gthis = this;
	haxe_Log.trace("Inlined resources: " + Std.string(haxe_Resource.listNames()),{ fileName : "Loader.hx", lineNumber : 22, className : "Loader", methodName : "new"});
	aps_render_Screen.systemfont = kha_Kravur.fromBytes(haxe_Resource.getBytes("systemfont"));
	var fontGlyphs = [];
	var _g = 32;
	while(_g < 256) fontGlyphs.push(_g++);
	var _g = 1024;
	while(_g < 1280) fontGlyphs.push(_g++);
	kha_graphics2_Graphics.fontGlyphs = fontGlyphs;
	this.getInlinedImage("purplegrid.png",function(image) {
		Loader.purplegrid = image;
		_gthis.getInlinedImage("white.png",function(image) {
			Loader.white = image;
			_gthis.getInlinedImage("grid.jpg",function(image) {
				Loader.grid = image;
				_gthis.getInlinedImage("ball.png",function(image) {
					Loader.ball = image;
					if(_gthis.inlinedImagesFailedToLoad.length > 0) {
						throw haxe_Exception.thrown(_gthis.inlinedImagesFailedToLoad);
					}
					kha_Assets.loadEverything(function() {
						Loader.atlas = new aps_render_AtlasExt(256,64,64);
						Loader.atlas.addFromAllAssets();
						new GameDisplay();
					},null,function(_soundItem) {
						return !StringTools.startsWith(_soundItem.name,"bgm");
					},function(error) {
						throw haxe_Exception.thrown(error);
					});
				});
			});
		});
	});
};
$hxClasses["Loader"] = Loader;
Loader.__name__ = true;
Loader.prototype = {
	inlinedImagesFailedToLoad: null
	,getInlinedImage: function(inlinedImageName,callback) {
		var _gthis = this;
		if(haxe_Resource.listNames().indexOf(inlinedImageName) == -1) {
			_gthis.inlinedImagesFailedToLoad.push(inlinedImageName);
			callback(null);
			return;
		}
		var ext = aps_utils_Fs.getFileNameExt(inlinedImageName);
		if(ext == null) {
			_gthis.inlinedImagesFailedToLoad.push(inlinedImageName);
			callback(null);
			return;
		}
		kha_Image.fromEncodedBytes(haxe_Resource.getBytes(inlinedImageName),ext,function(image) {
			if(image == null) {
				_gthis.inlinedImagesFailedToLoad.push(inlinedImageName);
				callback(null);
				return;
			}
			callback(image);
		},function(error) {
			_gthis.inlinedImagesFailedToLoad.push(inlinedImageName);
			callback(null);
		});
	}
	,__class__: Loader
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.main = function() {
	var windowW = Main.gameW * Main.gameScale | 0;
	var windowH = Main.gameH * Main.gameScale | 0;
	var canvas = window.document.getElementById("khanvas");
	canvas.style.display = "block";
	canvas.style.outline = "none";
	window.document.documentElement.style.padding = "0";
	window.document.documentElement.style.margin = "0";
	window.document.body.style.padding = "0";
	window.document.body.style.margin = "0";
	if(Main.isFullscreenNeeded) {
		Main.setFullWindowCanvas(canvas);
	} else {
		canvas.width = windowW;
		canvas.height = windowH;
		canvas.style.width = canvas.width + "px";
		canvas.style.height = canvas.height + "px";
	}
	kha_System.start(new kha_SystemOptions(Main.title,windowW,windowH,new kha_WindowOptions(null,-1,-1,800,600,-1,true,2,0)),function($window) {
		new Loader();
	});
};
Main.setFullWindowCanvas = function(_canvas) {
	var resize = function() {
		var w = window.document.documentElement.clientWidth;
		var h = window.document.documentElement.clientHeight;
		if(w == 0 || h == 0) {
			w = window.innerWidth;
			h = window.innerHeight;
		}
		var resize = w * window.devicePixelRatio | 0;
		_canvas.width = resize;
		var resize = h * window.devicePixelRatio | 0;
		_canvas.height = resize;
		if(_canvas.style.width == "") {
			_canvas.style.width = "100%";
			_canvas.style.height = "100%";
		}
	};
	window.onresize = resize;
	resize();
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var aps_ItemPlacement = function(_x,_y,_w,_h) {
	this.x = _x;
	this.y = _y;
	this.w = _w;
	this.h = _h;
};
$hxClasses["aps.ItemPlacement"] = aps_ItemPlacement;
aps_ItemPlacement.__name__ = true;
aps_ItemPlacement.prototype = {
	x: null
	,y: null
	,w: null
	,h: null
	,isInsideBounds: function(_bounds) {
		if(this.w < 1 || this.h < 1 || _bounds.w < 1 || _bounds.h < 1) {
			haxe_Log.trace("isInsideBounds: placement.w / h or _bounds.w / h is less than 1",{ fileName : "aps/Inventetris.hx", lineNumber : 19, className : "aps.ItemPlacement", methodName : "isInsideBounds"});
			return false;
		}
		if(this.x >= _bounds.x && this.y >= _bounds.y && this.x + this.w <= _bounds.x + _bounds.w) {
			return this.y + this.h <= _bounds.y + _bounds.h;
		} else {
			return false;
		}
	}
	,__class__: aps_ItemPlacement
};
var aps_Inventetris = function(_cols,_rows) {
	if(_cols < 1) {
		_cols = 1;
	}
	if(_rows < 1) {
		_rows = 1;
	}
	this.cols = _cols;
	this.rows = _rows;
	this.placements = [];
	var _g = [];
	var _g1 = 0;
	var _g2 = this.rows;
	while(_g1 < _g2) {
		++_g1;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = this.cols;
		while(_g4 < _g5) {
			++_g4;
			_g3.push(null);
		}
		_g.push(_g3);
	}
	this.occupiedMap = _g;
	this.isNoFreeCell = false;
};
$hxClasses["aps.Inventetris"] = aps_Inventetris;
aps_Inventetris.__name__ = true;
aps_Inventetris.prototype = {
	cols: null
	,rows: null
	,placements: null
	,occupiedMap: null
	,isNoFreeCell: null
	,clearOccupiedMap: function() {
		var _g = 0;
		var _g1 = this.rows;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = 0;
			var _g3 = this.cols;
			while(_g2 < _g3) this.occupiedMap[iy][_g2++] = null;
		}
	}
	,clear: function() {
		this.clearOccupiedMap();
		this.placements.length = 0;
		this.isNoFreeCell = false;
	}
	,isPlacementFits: function(_ip) {
		if(!this.isPlacementInside(_ip)) {
			return false;
		} else {
			var _g = _ip.y;
			var _g1 = _ip.y + _ip.h;
			while(_g < _g1) {
				var iy = _g++;
				var _g2 = _ip.x;
				var _g3 = _ip.x + _ip.w;
				while(_g2 < _g3) if(this.occupiedMap[iy][_g2++] != null) {
					return false;
				}
			}
			return true;
		}
	}
	,tryPost: function(_allowRotate,_ip,_isSecondAttempt) {
		if(_isSecondAttempt == null) {
			_isSecondAttempt = false;
		}
		if(_ip.w < 1) {
			_ip.w = 1;
		}
		if(_ip.h < 1) {
			_ip.h = 1;
		}
		if(this.placements.indexOf(_ip) != -1) {
			return false;
		} else if(!this.isPlacementFits(_ip)) {
			if(_isSecondAttempt || this.findFreeSpaceForPlacement(_allowRotate,_ip) == null) {
				return false;
			} else {
				return this.tryPost(_allowRotate,_ip,true);
			}
		} else {
			this.placements.push(_ip);
			var _g = _ip.y;
			var _g1 = _ip.y + _ip.h;
			while(_g < _g1) {
				var iy = _g++;
				var _g2 = _ip.x;
				var _g3 = _ip.x + _ip.w;
				while(_g2 < _g3) this.occupiedMap[iy][_g2++] = _ip;
			}
			var atleastOneFree = false;
			var _g = 0;
			var _g1 = this.rows;
			while(_g < _g1) {
				var iy = _g++;
				var _g2 = 0;
				var _g3 = this.cols;
				while(_g2 < _g3) if(this.occupiedMap[iy][_g2++] == null) {
					atleastOneFree = true;
					break;
				}
				if(atleastOneFree) {
					break;
				}
			}
			this.isNoFreeCell = !atleastOneFree;
			return true;
		}
	}
	,isPlacementInside: function(_ip) {
		return _ip.isInsideBounds(new aps_ItemPlacement(0,0,this.cols,this.rows));
	}
	,findFreeSpaceForPlacement: function(_allowRotate,_ip) {
		var _gthis = this;
		var minSide = Math.min(_ip.w,_ip.h) | 0;
		if(minSide > this.cols && minSide > this.rows) {
			return null;
		}
		var findObstaclesAndGetX = function(_tx,_ty,_tw,_th) {
			var x2 = _tx + _tw;
			if(x2 > _gthis.cols) {
				return _gthis.cols;
			}
			var y2 = _ty + _th;
			if(y2 > _gthis.rows) {
				return _tx;
			}
			var _g = _ty;
			while(_g < y2) {
				var iy = _g++;
				var _g1 = _tx;
				while(_g1 < x2) {
					var ix = _g1++;
					if(_gthis.occupiedMap[iy][ix] != null) {
						return ix;
					}
				}
			}
			return -1;
		};
		var _g = 0;
		var _g1 = this.rows - minSide + 1;
		while(_g < _g1) {
			var carriageY = _g++;
			var carriageX = 0;
			while(carriageX < this.cols - minSide + 1) {
				var obstacleX = findObstaclesAndGetX(carriageX,carriageY,_ip.w,_ip.h);
				if(_allowRotate && obstacleX > -1 && this.occupiedMap[carriageY][carriageX] == null) {
					obstacleX = findObstaclesAndGetX(carriageX,carriageY,_ip.h,_ip.w);
					if(obstacleX < 0) {
						var w = _ip.w;
						_ip.w = _ip.h;
						_ip.h = w;
					}
				}
				if(obstacleX > -1) {
					carriageX = obstacleX + 1;
				} else {
					_ip.x = carriageX;
					_ip.y = carriageY;
					return _ip;
				}
			}
		}
		return null;
	}
	,__class__: aps_Inventetris
};
var aps_SplineSegment = function(_p0,_p1,_p2,_p3,_subPointsCount) {
	this.subPoints = [];
	if(_subPointsCount == null || _subPointsCount < 2) {
		var dx = _p2.x - _p1.x;
		var dy = _p2.y - _p1.y;
		_subPointsCount = Math.max(2,Math.sqrt(dx * dx + dy * dy) / 2) | 0;
	}
	this.subPoints.length = 0;
	var _g = 0;
	var _g1 = _subPointsCount;
	while(_g < _g1) this.subPoints.push(this.catmullRom(_p0,_p1,_p2,_p3,_g++ / _subPointsCount));
	this.subPoints.push(_p2);
};
$hxClasses["aps.SplineSegment"] = aps_SplineSegment;
aps_SplineSegment.__name__ = true;
aps_SplineSegment.buildSpline = function(_isLoop,_points) {
	if(_isLoop == null) {
		_isLoop = false;
	}
	var segments = [];
	var points = [];
	var _g = 0;
	var _g1 = _isLoop ? _points.length : _points.length - 1;
	while(_g < _g1) {
		var firstI = _g++;
		var secondI = (firstI + 1) % _points.length;
		var segment = new aps_SplineSegment(_points[_isLoop ? (_points.length + firstI - 1) % _points.length : firstI > 0 ? firstI - 1 : firstI],_points[firstI],_points[secondI],_points[_isLoop ? (firstI + 2) % _points.length : secondI < _points.length - 1 ? secondI + 1 : secondI]);
		segments.push(segment);
		var _g2 = 0;
		var _g3 = segment.subPoints.length - 1;
		while(_g2 < _g3) points.push(segment.subPoints[_g2++]);
	}
	points.push(_points[_isLoop ? 0 : _points.length - 1]);
	return { segments : segments, points : points, isBuildedByLoop : _isLoop};
};
aps_SplineSegment.prototype = {
	subPoints: null
	,catmullRom: function(_p0,_p1,_p2,_p3,_t) {
		var t2 = _t * _t;
		var t3 = t2 * _t;
		var x = _p2.x - _p0.x;
		var y = _p2.y - _p0.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x1 = x * 0.5;
		var y1 = y * 0.5;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var m1_x = x1;
		var m1_y = y1;
		var x = _p3.x - _p1.x;
		var y = _p3.y - _p1.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x1 = x * 0.5;
		var y1 = y * 0.5;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var m2_x = x1;
		var m2_y = y1;
		var x = _p1.x * 2;
		var y = _p1.y * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x1 = _p2.x * 2;
		var y1 = _p2.y * 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var x2 = x - x1;
		var y2 = y - y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var x = x2 + m1_x;
		var y = y2 + m1_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x1 = x + m2_x;
		var y1 = y + m2_y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var x = _p1.x * -3;
		var y = _p1.y * -3;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x2 = _p2.x * 3;
		var y2 = _p2.y * 3;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var x3 = x + x2;
		var y3 = y + y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var x = m1_x * 2;
		var y = m1_y * 2;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x2 = x3 - x;
		var y2 = y3 - y;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var x = x2 - m2_x;
		var y = y2 - m2_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x2 = x1 * t3;
		var y2 = y1 * t3;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var x1 = x * t2;
		var y1 = y * t2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var x = x2 + x1;
		var y = y2 + y1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var x1 = m1_x * _t;
		var y1 = m1_y * _t;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var x2 = x + x1;
		var y2 = y + y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		return new kha_math_Vector2(x2 + _p1.x,y2 + _p1.y);
	}
	,__class__: aps_SplineSegment
};
var aps_ChangableValue = function(_callback) {
	this.callback = _callback;
};
$hxClasses["aps.ChangableValue"] = aps_ChangableValue;
aps_ChangableValue.__name__ = true;
aps_ChangableValue.prototype = {
	value: null
	,callback: null
	,set: function(_value) {
		if(this.value != _value) {
			this.value = _value;
			if(this.callback != null) {
				this.callback(this.value);
			}
			return true;
		}
		return false;
	}
	,__class__: aps_ChangableValue
};
var aps_render_AtlasPiece = function(_atlas,_img) {
	this.size = { x : 0, y : 0};
	this.pos = { x : 0, y : 0};
	this.img = _img;
	this.atlas = _atlas;
	this.size.x = _img.get_width();
	this.size.y = _img.get_height();
};
$hxClasses["aps.render.AtlasPiece"] = aps_render_AtlasPiece;
aps_render_AtlasPiece.__name__ = true;
aps_render_AtlasPiece.prototype = {
	img: null
	,atlas: null
	,pos: null
	,size: null
	,__class__: aps_render_AtlasPiece
};
var aps_render_Atlas = function(_maxSize) {
	this.postedWholeImages = [];
	this.atlasPieces = [];
	this.wholeImagesMap = new haxe_ds_ObjectMap();
	if(_maxSize < 1) {
		throw haxe_Exception.thrown("Atlas.new: _maxSize is less than 1");
	}
	this.maxSize = _maxSize;
	this.composedTexture = kha_Image.createRenderTarget(_maxSize,_maxSize);
	this.atlasG = this.composedTexture.get_g2();
	this.atlasG.set_imageScaleQuality(1);
};
$hxClasses["aps.render.Atlas"] = aps_render_Atlas;
aps_render_Atlas.__name__ = true;
aps_render_Atlas.prototype = {
	maxSize: null
	,wholeImagesMap: null
	,atlasPieces: null
	,composedTexture: null
	,atlasG: null
	,postedWholeImages: null
	,clear: function() {
		this.atlasG.begin(true,0);
		this.atlasG.end();
		this.atlasPieces.length = 0;
		this.wholeImagesMap.h = { __keys__ : { }};
		this.postedWholeImages.length = 0;
	}
	,addFromAllAssets: function() {
		var keys = [];
		var _g = 0;
		var _g1 = Reflect.fields(kha_Assets.images);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(new EReg("(Name|Description|Size|names)$","").match(field)) {
				continue;
			}
			keys.push(field);
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < keys.length) _g.push(kha_Assets.images.get(keys[_g1++]));
		this.addFromImages(_g);
	}
	,addFromImages: function(_images) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < _images.length) {
			var image = _images[_g1];
			++_g1;
			if(image == null) {
				continue;
			}
			if(this.postedWholeImages.indexOf(image) != -1) {
				haxe_Log.trace("Atlas.addFromImages: image already posted",{ fileName : "aps/render/Atlas.hx", lineNumber : 66, className : "aps.render.Atlas", methodName : "addFromImages"});
				continue;
			}
			_g.push(image);
		}
		if(_g.length == 0) {
			return;
		}
		this.addValidated(_g);
	}
	,addValidated: function(_images) {
		var _gthis = this;
		var _g = [];
		var _g1 = 0;
		while(_g1 < _images.length) _g.push(new aps_render_AtlasPiece(this,_images[_g1++]));
		_g.sort(function(a,b) {
			var _size = a.size.y;
			var _size2 = b.size.y;
			if(_size > _size2) {
				return -1;
			} else if(_size < _size2) {
				return 1;
			}
			return 0;
		});
		this.atlasG.begin(true,0);
		var x = 0;
		var y = 0;
		var blockW = 0;
		var blockY = 0;
		var lineY = y;
		var lineH = 0;
		var postImage = function(_piece) {
			if(blockY + _piece.size.y < lineH) {
				y = lineY + blockY;
				if(blockW < _piece.size.x) {
					blockW = _piece.size.x;
				}
			} else {
				x += blockW;
				y = lineY;
				blockW = _piece.size.x;
				blockY = 0;
			}
			if(x + _piece.size.x >= _gthis.maxSize) {
				lineY += lineH;
				x = 0;
				y = lineY;
				blockW = _piece.size.x;
				blockY = 0;
				lineH = 0;
			}
			if(x + blockW > _gthis.maxSize || y + _piece.size.y > _gthis.maxSize) {
				haxe_Log.trace("Atlas.postImage: out of bounds",{ fileName : "aps/render/Atlas.hx", lineNumber : 116, className : "aps.render.Atlas", methodName : "addValidated"});
				return false;
			}
			_gthis.atlasG.drawSubImage(_piece.img,x,y,_piece.pos.x,_piece.pos.y,_piece.size.x,_piece.size.y);
			_piece.pos.x = x;
			_piece.pos.y = y;
			if(lineH < _piece.size.y) {
				lineH = _piece.size.y;
			}
			if(blockW < _piece.size.x) {
				blockW = _piece.size.x;
			}
			blockY += _piece.size.y;
			return true;
		};
		var counter = 0;
		var _g1 = 0;
		while(_g1 < _g.length) {
			var piece = _g[_g1];
			++_g1;
			if(postImage(piece)) {
				this.postedWholeImages.push(piece.img);
				this.atlasPieces.push(piece);
				this.wholeImagesMap.set(piece.img,piece);
				++counter;
			}
		}
		haxe_Log.trace("Atlas: " + counter + "/" + _g.length + " (total " + this.atlasPieces.length + ")",{ fileName : "aps/render/Atlas.hx", lineNumber : 139, className : "aps.render.Atlas", methodName : "addValidated"});
		this.atlasG.end();
	}
	,__class__: aps_render_Atlas
};
var aps_render_AtlasPieceExt = function(_atlas,_img) {
	aps_render_AtlasPiece.call(this,_atlas,_img);
	this.inInventetris = new aps_ItemPlacement(0,0,Math.ceil(this.size.x / _atlas.placementGridW),Math.ceil(this.size.y / _atlas.placementGridH));
};
$hxClasses["aps.render.AtlasPieceExt"] = aps_render_AtlasPieceExt;
aps_render_AtlasPieceExt.__name__ = true;
aps_render_AtlasPieceExt.__super__ = aps_render_AtlasPiece;
aps_render_AtlasPieceExt.prototype = $extend(aps_render_AtlasPiece.prototype,{
	inInventetris: null
	,__class__: aps_render_AtlasPieceExt
});
var aps_render_AtlasExt = function(_maxSize,_gridW,_gridH) {
	if(_gridH == null) {
		_gridH = -1;
	}
	aps_render_Atlas.call(this,_maxSize);
	this.placementGridW = _gridW;
	this.placementGridH = _gridH > 0 ? _gridH : this.placementGridW;
	if(this.placementGridW > 0 && this.placementGridH > 0 && this.placementGridW <= _maxSize && this.placementGridH <= _maxSize) {
		this.placements = new aps_Inventetris(this.maxSize / this.placementGridW | 0,this.maxSize / this.placementGridH | 0);
	} else {
		throw haxe_Exception.thrown("AtlasExt.new: _gridW or _gridH is bigger than _maxSize or less than 0");
	}
	this.clear();
};
$hxClasses["aps.render.AtlasExt"] = aps_render_AtlasExt;
aps_render_AtlasExt.__name__ = true;
aps_render_AtlasExt.__super__ = aps_render_Atlas;
aps_render_AtlasExt.prototype = $extend(aps_render_Atlas.prototype,{
	placementGridW: null
	,placementGridH: null
	,placements: null
	,clear: function() {
		aps_render_Atlas.prototype.clear.call(this);
		this.placements.clear();
	}
	,addValidated: function(_images) {
		var _gthis = this;
		var _g = [];
		var _g1 = 0;
		while(_g1 < _images.length) _g.push(new aps_render_AtlasPieceExt(this,_images[_g1++]));
		_g.sort(function(a,b) {
			var _size = a.size.y;
			var _size2 = b.size.y;
			if(_size > _size2) {
				return -1;
			} else if(_size < _size2) {
				return 1;
			}
			return 0;
		});
		this.atlasG.begin(false);
		var postImage = function(_piece) {
			if(_gthis.placements.tryPost(false,_piece.inInventetris)) {
				_piece.pos.x = _piece.inInventetris.x * _gthis.placementGridW;
				_piece.pos.y = _piece.inInventetris.y * _gthis.placementGridH;
				_gthis.atlasG.drawSubImage(_piece.img,_piece.pos.x,_piece.pos.y,0,0,_piece.size.x,_piece.size.y);
				return true;
			}
			return false;
		};
		var counter = 0;
		var _g1 = 0;
		while(_g1 < _g.length) {
			var piece = _g[_g1];
			++_g1;
			if(postImage(piece)) {
				this.postedWholeImages.push(piece.img);
				this.atlasPieces.push(piece);
				this.wholeImagesMap.set(piece.img,piece);
				++counter;
			}
		}
		haxe_Log.trace("AtlasExt: " + counter + "/" + _g.length + " (total " + this.atlasPieces.length + ")",{ fileName : "aps/render/AtlasExt.hx", lineNumber : 117, className : "aps.render.AtlasExt", methodName : "addValidated"});
		this.atlasG.end();
	}
	,__class__: aps_render_AtlasExt
});
var aps_render_Resizer = function(_screen) {
	this.h = 0;
	this.w = 0;
	this.windowH = new aps_ChangableValue(null);
	this.windowW = new aps_ChangableValue(null);
	this.minScale = 0;
	this.isIntegerScale = false;
	var _gthis = this;
	this.screen = _screen;
	this.contentW = new aps_ChangableValue(function(_value) {
		_gthis.recalcContentScale();
	});
	this.contentH = new aps_ChangableValue(function(_value) {
		_gthis.recalcContentScale();
	});
};
$hxClasses["aps.render.Resizer"] = aps_render_Resizer;
aps_render_Resizer.__name__ = true;
aps_render_Resizer.prototype = {
	isIntegerScale: null
	,minScale: null
	,contentW: null
	,contentH: null
	,screen: null
	,windowW: null
	,windowH: null
	,checkWindowSize: function() {
		if(this.windowW.set(kha_System.windowWidth()) || this.windowH.set(kha_System.windowHeight())) {
			this.recalcContentScale();
			return true;
		}
		return false;
	}
	,w: null
	,h: null
	,recalcContentScale: function() {
		var w = kha_System.windowWidth();
		var h = kha_System.windowHeight();
		this.setScale(Math.min(w / this.contentW.value,h / this.contentH.value));
	}
	,setScale: function(_scale) {
		aps_render_Resizer.currentScale = -1;
		if(this.isIntegerScale) {
			_scale = _scale < 1 ? 1 : _scale | 0;
		}
		if(_scale < this.minScale) {
			_scale = this.minScale;
		}
		if(_scale > 0 && _scale < Infinity) {
			aps_render_Resizer.currentScale = _scale;
			this.w = kha_System.windowWidth() / _scale;
			this.h = kha_System.windowHeight() / _scale;
			aps_render_Screen.mouser.scale = _scale;
			this.screen.onResize(_scale);
			return aps_render_Resizer.currentScale;
		}
		return -1;
	}
	,__class__: aps_render_Resizer
};
var aps_render_Focuser = function(_screen) {
	aps_render_Focuser.screen = _screen;
	if(!aps_render_Focuser.isAlreadyFocusEventsAdded) {
		aps_render_Focuser.isAlreadyFocusEventsAdded = true;
		window.addEventListener("focusout",function() {
			aps_render_Focuser.isFocused = false;
			aps_render_Focuser.screen.onFocusOut();
		});
		window.addEventListener("focusin",function() {
			aps_render_Focuser.isFocused = true;
			aps_render_Focuser.screen.onFocusIn();
		});
	}
};
$hxClasses["aps.render.Focuser"] = aps_render_Focuser;
aps_render_Focuser.__name__ = true;
aps_render_Focuser.prototype = {
	__class__: aps_render_Focuser
};
var aps_render_ActionButton = function(_keys,_onDownCallback,_onUpCallback) {
	this.keyCodes = [];
	this.isPressed = false;
	this.onDownCallback = _onDownCallback;
	this.onUpCallback = _onUpCallback;
	var _g = 0;
	while(_g < _keys.length) this.keyCodes.push(_keys[_g++]);
};
$hxClasses["aps.render.ActionButton"] = aps_render_ActionButton;
aps_render_ActionButton.__name__ = true;
aps_render_ActionButton.prototype = {
	isPressed: null
	,keyCodes: null
	,onDownCallback: null
	,onUpCallback: null
	,tryKeyDown: function(_key) {
		var _this = this.keyCodes;
		var _g_current = 0;
		while(_g_current < _this.length) if(_this[_g_current++] == _key) {
			if(!this.isPressed) {
				this.isPressed = true;
				if(this.onDownCallback != null) {
					this.onDownCallback(this);
				}
				return true;
			}
		}
		return false;
	}
	,tryKeyUp: function(_key) {
		var _this = this.keyCodes;
		var _g_current = 0;
		while(_g_current < _this.length) if(_this[_g_current++] == _key) {
			if(this.isPressed) {
				var isAllReleased = true;
				var _g = 0;
				var _g1 = this.keyCodes;
				while(_g < _g1.length) if(aps_render_Screen.keys.h[_g1[_g++]]) {
					isAllReleased = false;
				}
				if(isAllReleased) {
					this.isPressed = false;
				}
				if(this.onUpCallback != null) {
					this.onUpCallback(this);
				}
				return true;
			}
		}
		return false;
	}
	,__class__: aps_render_ActionButton
};
var aps_utils_Fs = function() { };
$hxClasses["aps.utils.Fs"] = aps_utils_Fs;
aps_utils_Fs.__name__ = true;
aps_utils_Fs.getFileNameExt = function(fileName) {
	var betweenDots = fileName.split(".");
	if(betweenDots.length < 2) {
		return null;
	}
	var ext = betweenDots[betweenDots.length - 1];
	if(ext.length > 0) {
		return ext;
	} else {
		return null;
	}
};
var aps_utils_GamepadHandle = function(_onDownListener,_onUpListener) {
	this.keys = [];
	kha_input_Gamepad.get().notify($bind(this,this.onGamepadAxis),$bind(this,this.onGamepadButtons));
	aps_utils_GamepadHandle.onDownListener = _onDownListener;
	aps_utils_GamepadHandle.onUpListener = _onUpListener;
	this.reset();
};
$hxClasses["aps.utils.GamepadHandle"] = aps_utils_GamepadHandle;
aps_utils_GamepadHandle.__name__ = true;
aps_utils_GamepadHandle.prototype = {
	axisX: null
	,axisY: null
	,axisAngle: null
	,keys: null
	,reset: function() {
		this.axisX = 0;
		this.axisY = 0;
		this.axisAngle = 0;
		var _g = 0;
		var _g1 = this.keys;
		while(_g < _g1.length) ++_g;
	}
	,onGamepadAxis: function(_axis,_value) {
		var x = _axis == 0 ? _value : this.axisX;
		var y = _axis == 1 ? -_value : this.axisY;
		this.axisX = x > -0.15 && x < 0.15 ? 0 : x;
		this.axisY = y > -0.15 && y < 0.15 ? 0 : y;
		this.axisAngle = Math.atan2(this.axisY,this.axisX);
	}
	,onGamepadButtons: function(_key,_state) {
		if(_state == 0) {
			this.keys[_key] = false;
			aps_utils_GamepadHandle.onUpListener(_key);
		} else {
			this.keys[_key] = true;
			aps_utils_GamepadHandle.onDownListener(_key);
		}
	}
	,__class__: aps_utils_GamepadHandle
};
var aps_utils_NumberSystemsUtils = function() { };
$hxClasses["aps.utils.NumberSystemsUtils"] = aps_utils_NumberSystemsUtils;
aps_utils_NumberSystemsUtils.__name__ = true;
aps_utils_NumberSystemsUtils.afterDot = function(digitsAfterDotCount,value) {
	if(digitsAfterDotCount < 1) {
		return value;
	}
	var multiplier = Math.pow(10,digitsAfterDotCount) | 0;
	return (value * multiplier | 0) / multiplier;
};
var gltf_GLTF = function() {
	this.scenes = new Array(0);
	this.defaultScene = null;
	this.nodes = new Array(0);
	this.textures = new Array(0);
	this.skins = new Array(0);
	this.samplers = new Array(0);
	this.meshes = new Array(0);
	this.material = new Array(0);
	this.images = new Array(0);
	this.cameras = new Array(0);
	this.bufferViews = new Array(0);
	this.buffers = new Array(0);
	this.animations = new Array(0);
	this.accessors = new Array(0);
};
$hxClasses["gltf.GLTF"] = gltf_GLTF;
gltf_GLTF.__name__ = true;
gltf_GLTF.parseAndLoadGLB = function(data) {
	if(data.sub(0,4).compare(haxe_io_Bytes.ofString("glTF")) != 0) {
		throw haxe_Exception.thrown("invalid magic: " + data.sub(0,4).toHex());
	}
	if(data.sub(4,4).getInt32(0) != 2) {
		throw haxe_Exception.thrown("invalid gltf version: " + data.sub(4,4).getInt32(0));
	}
	var jsonChunkLength = data.sub(12,4).getInt32(0);
	if(jsonChunkLength < 1) {
		throw haxe_Exception.thrown("invalid json chunk length: " + jsonChunkLength);
	}
	var jsonChunkType = data.sub(16,4).toString();
	if(jsonChunkType != "JSON") {
		throw haxe_Exception.thrown("invalid json chunk type: " + jsonChunkType);
	}
	var raw = gltf_GLTF.parse(data.sub(20,jsonChunkLength).toString());
	var binaryChunkLength = data.sub(20 + jsonChunkLength,4).getInt32(0);
	if(binaryChunkLength < 1) {
		throw haxe_Exception.thrown("invalid binary chunk length: " + binaryChunkLength);
	}
	if(data.sub(24 + jsonChunkLength,4).compare(haxe_io_Bytes.ofHex("42494E00")) != 0) {
		throw haxe_Exception.thrown("invalid binary chunk type: " + data.sub(24 + jsonChunkLength,4).toHex());
	}
	return gltf_GLTF.load(raw,[data.sub(28 + jsonChunkLength,binaryChunkLength)]);
};
gltf_GLTF.load = function(raw,buffers) {
	return gltf_GLTF.loadWithBufferGetter(raw,function(index) {
		return buffers[index];
	});
};
gltf_GLTF.loadWithBufferGetter = function(raw,bufferGetter) {
	var gltf = new gltf_GLTF();
	gltf.nodes = gltf_types_Node.preloadFromRaw(gltf,raw);
	gltf.buffers = gltf_types_Buffer.loadFromRawWithGetter(gltf,raw,bufferGetter);
	gltf.bufferViews = gltf_types_BufferView.loadFromRaw(gltf,raw);
	gltf.accessors = gltf_types_Accessor.loadFromRaw(gltf,raw);
	gltf.animations = gltf_types_Animation.loadFromRaw(gltf,raw);
	gltf.cameras = gltf_types_Camera.loadFromRaw(gltf,raw);
	gltf.images = gltf_types_Image.loadFromRaw(gltf,raw);
	gltf.samplers = gltf_types_Sampler.loadFromRaw(gltf,raw);
	gltf.textures = gltf_types_Texture.loadFromRaw(gltf,raw);
	gltf.meshes = gltf_types_Mesh.loadFromRaw(gltf,raw);
	gltf.material = gltf_types_Material.loadFromRaw(gltf,raw);
	gltf.skins = gltf_types_Skin.loadFromRaw(gltf,raw);
	gltf.nodes = gltf_types_Node.loadFromRaw(gltf,raw);
	gltf.scenes = gltf_types_Scene.loadFromRaw(gltf,raw);
	gltf.defaultScene = gltf.scenes[raw.scene];
	return gltf;
};
gltf_GLTF.parse = function(src) {
	var gltf = JSON.parse(src);
	if(gltf.accessors == null) {
		gltf.accessors = [];
	}
	var _g = 0;
	var _g1 = gltf.accessors;
	while(_g < _g1.length) {
		var accessor = _g1[_g];
		++_g;
		if(accessor.byteOffset == null) {
			accessor.byteOffset = 0;
		}
		if(accessor.normalized == null) {
			accessor.normalized = false;
		}
		if(accessor.max == null) {
			accessor.max = [];
		}
		if(accessor.min == null) {
			accessor.min = [];
		}
		if(accessor.sparse != null) {
			if(accessor.sparse.indices.byteOffset == null) {
				accessor.sparse.indices.byteOffset = 0;
			}
			if(accessor.sparse.values.byteOffset == null) {
				accessor.sparse.values.byteOffset = 0;
			}
		}
	}
	if(gltf.animations == null) {
		gltf.animations = [];
	}
	var _g = 0;
	var _g1 = gltf.animations;
	while(_g < _g1.length) {
		var _g2 = 0;
		var _g3 = _g1[_g++].samplers;
		while(_g2 < _g3.length) {
			var sampler = _g3[_g2];
			++_g2;
			if(sampler.interpolation == null) {
				sampler.interpolation = "LINEAR";
			}
		}
	}
	if(gltf.buffers == null) {
		gltf.buffers = [];
	}
	if(gltf.bufferViews == null) {
		gltf.bufferViews = [];
	}
	var _g = 0;
	var _g1 = gltf.bufferViews;
	while(_g < _g1.length) {
		var bufferView = _g1[_g];
		++_g;
		if(bufferView.byteOffset == null) {
			bufferView.byteOffset = 0;
		}
	}
	if(gltf.cameras == null) {
		gltf.cameras = [];
	}
	if(gltf.images == null) {
		gltf.images = [];
	}
	if(gltf.materials == null) {
		gltf.materials = [];
	}
	var _g = 0;
	var _g1 = gltf.materials;
	while(_g < _g1.length) {
		var material = _g1[_g];
		++_g;
		if(material.normalTexture != null) {
			if(material.normalTexture.texCoord == null) {
				material.normalTexture.texCoord = 0;
			}
			if(material.normalTexture.scale == null) {
				material.normalTexture.scale = 1.0;
			}
		}
		if(material.occlusionTexture != null) {
			if(material.occlusionTexture.texCoord == null) {
				material.occlusionTexture.texCoord = 0;
			}
			if(material.occlusionTexture.strength == null) {
				material.occlusionTexture.strength = 1.0;
			}
		}
		if(material.pbrMetallicRoughness != null) {
			if(material.pbrMetallicRoughness.baseColorFactor == null) {
				material.pbrMetallicRoughness.baseColorFactor = [1.0,1.0,1.0,1.0];
			}
			if(material.pbrMetallicRoughness.baseColorTexture != null) {
				if(material.pbrMetallicRoughness.baseColorTexture.texCoord == null) {
					material.pbrMetallicRoughness.baseColorTexture.texCoord = 0;
				}
			}
			if(material.pbrMetallicRoughness.metallicFactor == null) {
				material.pbrMetallicRoughness.metallicFactor = 1.0;
			}
			if(material.pbrMetallicRoughness.roughnessFactor == null) {
				material.pbrMetallicRoughness.roughnessFactor = 1.0;
			}
			if(material.pbrMetallicRoughness.metallicRoughnessTexture != null) {
				if(material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord == null) {
					material.pbrMetallicRoughness.metallicRoughnessTexture.texCoord = 0;
				}
			}
		}
		if(material.emissiveTexture != null) {
			if(material.emissiveTexture.texCoord == null) {
				material.emissiveTexture.texCoord = 0;
			}
		}
		if(material.emissiveFactor == null) {
			material.emissiveFactor = [0.0,0.0,0.0];
		}
		if(material.alphaCutoff == null) {
			material.alphaCutoff = 0.5;
		}
		if(material.doubleSided == null) {
			material.doubleSided = false;
		}
	}
	if(gltf.meshes == null) {
		gltf.meshes = [];
	}
	var _g = 0;
	var _g1 = gltf.meshes;
	while(_g < _g1.length) {
		var mesh = _g1[_g];
		++_g;
		if(mesh.primitives == null) {
			mesh.primitives = [];
		}
		var _g2 = 0;
		var _g3 = mesh.primitives;
		while(_g2 < _g3.length) {
			var primitive = _g3[_g2];
			++_g2;
			if(primitive.mode == null) {
				primitive.mode = 4;
			}
		}
	}
	if(gltf.nodes == null) {
		gltf.nodes = [];
	}
	var _g = 0;
	var _g1 = gltf.nodes;
	while(_g < _g1.length) {
		var node = _g1[_g];
		++_g;
		if(node.matrix == null && node.rotation == null && node.scale == null && node.translation == null) {
			node.matrix = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		}
		if(node.matrix != null) {
			var a = node.matrix;
			node.translation = [];
			node.translation.push(a[12]);
			node.translation.push(a[13]);
			node.translation.push(a[14]);
			var sx = Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
			var sy = Math.sqrt(a[4] * a[4] + a[5] * a[5] + a[6] * a[6] + a[7] * a[7]);
			var sz = Math.sqrt(a[8] * a[8] + a[9] * a[9] + a[10] * a[10] + a[11] * a[11]);
			node.scale = [];
			node.scale.push(sx);
			node.scale.push(sy);
			node.scale.push(sz);
			var m00 = a[0] / sx;
			var m11 = a[5] / sy;
			var m22 = a[10] / sz;
			node.rotation = [];
			node.rotation.push(Math.sqrt(Math.max(0.0,1.0 + m00 - m11 - m22)) / 2.0);
			node.rotation.push(Math.sqrt(Math.max(0.0,1.0 - m00 + m11 - m22)) / 2.0);
			node.rotation.push(Math.sqrt(Math.max(0.0,1.0 - m00 - m11 + m22)) / 2.0);
			node.rotation.push(Math.sqrt(Math.max(0.0,1.0 + m00 + m11 + m22)) / 2.0);
		} else if(node.matrix == null && (node.rotation != null || node.scale != null || node.translation != null)) {
			if(node.rotation == null) {
				node.rotation = [0.0,0.0,0.0,1.0];
			}
			if(node.scale == null) {
				node.scale = [1.0,1.0,1.0];
			}
			if(node.translation == null) {
				node.translation = [0.0,0.0,0.0];
			}
			var x2 = node.rotation[0] + node.rotation[0];
			var y2 = node.rotation[1] + node.rotation[1];
			var z2 = node.rotation[2] + node.rotation[2];
			var xx = node.rotation[0] * x2;
			var xy = node.rotation[0] * y2;
			var xz = node.rotation[0] * z2;
			var yy = node.rotation[1] * y2;
			var yz = node.rotation[1] * z2;
			var zz = node.rotation[2] * z2;
			var wx = node.rotation[3] * x2;
			var wy = node.rotation[3] * y2;
			var wz = node.rotation[3] * z2;
			node.matrix = [(1 - (yy + zz)) * node.scale[0],(xy + wz) * node.scale[0],(xz - wy) * node.scale[0],0,(xy - wz) * node.scale[1],(1 - (xx + zz)) * node.scale[1],(yz + wx) * node.scale[1],0,(xz + wy) * node.scale[2],(yz - wx) * node.scale[2],(1 - (xx + yy)) * node.scale[2],0,node.translation[0],node.translation[1],node.translation[2],1];
		} else {
			throw haxe_Exception.thrown("Unhandled transform case: " + Std.string(node.matrix == null) + " " + Std.string(node.translation == null) + " " + Std.string(node.rotation == null) + " " + Std.string(node.scale == null));
		}
	}
	if(gltf.samplers == null) {
		gltf.samplers = [];
	}
	var _g = 0;
	var _g1 = gltf.samplers;
	while(_g < _g1.length) {
		var sampler = _g1[_g];
		++_g;
		if(sampler.magFilter == null) {
			sampler.magFilter = 9729;
		}
		if(sampler.minFilter == null) {
			sampler.minFilter = 9729;
		}
		if(sampler.wrapS == null) {
			sampler.wrapS = 10497;
		}
		if(sampler.wrapT == null) {
			sampler.wrapT = 10497;
		}
	}
	if(gltf.scene == null) {
		gltf.scene = 0;
	}
	if(gltf.scenes == null) {
		gltf.scenes = [];
	}
	if(gltf.skins == null) {
		gltf.skins = [];
	}
	if(gltf.textures == null) {
		gltf.textures = [];
	}
	var _g = 0;
	var _g1 = gltf.textures;
	while(_g < _g1.length) {
		var texture = _g1[_g];
		++_g;
		if(texture.sampler == null) {
			texture.sampler = -1;
		}
	}
	return gltf;
};
gltf_GLTF.prototype = {
	accessors: null
	,animations: null
	,buffers: null
	,bufferViews: null
	,cameras: null
	,images: null
	,material: null
	,meshes: null
	,samplers: null
	,skins: null
	,textures: null
	,nodes: null
	,defaultScene: null
	,scenes: null
	,__class__: gltf_GLTF
};
var gltf_types_Accessor = function() {
	this.normalized = false;
	this.type = "SCALAR";
	this.componentType = 5120;
	this.count = 0;
	this.byteOffset = 0;
	this.bufferView = null;
};
$hxClasses["gltf.types.Accessor"] = gltf_types_Accessor;
gltf_types_Accessor.__name__ = true;
gltf_types_Accessor.loadFromRaw = function(gltf,raw) {
	var accessors = new Array(raw.accessors.length);
	var _g = 0;
	var _g1 = raw.accessors.length;
	while(_g < _g1) accessors[_g++] = new gltf_types_Accessor();
	var _g = 0;
	var _g1 = raw.accessors.length;
	while(_g < _g1) {
		var i = _g++;
		accessors[i].load(gltf,raw.accessors[i]);
	}
	return accessors;
};
gltf_types_Accessor.prototype = {
	bufferView: null
	,byteOffset: null
	,count: null
	,componentType: null
	,type: null
	,normalized: null
	,load: function(gltf,accessor) {
		this.bufferView = gltf.bufferViews[accessor.bufferView];
		this.byteOffset = accessor.byteOffset;
		this.count = accessor.count;
		this.componentType = accessor.componentType;
		this.type = accessor.type;
		this.normalized = accessor.normalized == null ? false : accessor.normalized;
	}
	,getInts: function() {
		var _gthis = this;
		if(this.componentType == 5126) {
			throw haxe_Exception.thrown("This accessor points to `float` data, use `getFloats()` instead of `getInts()`!");
		}
		var componentSize;
		switch(this.type) {
		case "MAT2":
			componentSize = 4;
			break;
		case "MAT3":
			componentSize = 9;
			break;
		case "MAT4":
			componentSize = 16;
			break;
		case "SCALAR":
			componentSize = 1;
			break;
		case "VEC2":
			componentSize = 2;
			break;
		case "VEC3":
			componentSize = 3;
			break;
		case "VEC4":
			componentSize = 4;
			break;
		}
		var data = new Array(this.count * componentSize);
		var pos = this.byteOffset;
		var accessor;
		switch(this.componentType) {
		case 5120:case 5121:
			accessor = function(i) {
				var val = _gthis.bufferView.get_data().b[pos];
				data[i] = val;
				pos += 1;
			};
			break;
		case 5122:case 5123:
			accessor = function(i) {
				var val = _gthis.bufferView.get_data().getUInt16(pos);
				data[i] = val;
				pos += 2;
			};
			break;
		case 5125:
			accessor = function(i) {
				var val = _gthis.bufferView.get_data().getInt32(pos);
				data[i] = val;
				pos += 4;
			};
			break;
		default:
			throw haxe_Exception.thrown("Floats aren't supported with this function!");
		}
		var _g = 0;
		var _g1 = this.count * componentSize;
		while(_g < _g1) accessor(_g++);
		return data;
	}
	,getFloats: function() {
		if(this.componentType != 5126) {
			throw haxe_Exception.thrown("This accessor points to `int` data, use `getInts()` instead of `getFloats()`!");
		}
		var size;
		switch(this.type) {
		case "MAT2":
			size = 4;
			break;
		case "MAT3":
			size = 9;
			break;
		case "MAT4":
			size = 16;
			break;
		case "SCALAR":
			size = 1;
			break;
		case "VEC2":
			size = 2;
			break;
		case "VEC3":
			size = 3;
			break;
		case "VEC4":
			size = 4;
			break;
		}
		var data = new Array(this.count * size);
		var pos = this.byteOffset;
		var _g = 0;
		var _g1 = this.count * size;
		while(_g < _g1) {
			data[_g++] = this.bufferView.get_data().getFloat(pos);
			pos += 4;
		}
		return data;
	}
	,__class__: gltf_types_Accessor
};
var gltf_types_Animation = function() {
	this.channels = null;
	this.name = null;
};
$hxClasses["gltf.types.Animation"] = gltf_types_Animation;
gltf_types_Animation.__name__ = true;
gltf_types_Animation.loadFromRaw = function(gltf,raw) {
	var animations = new Array(raw.animations.length);
	var _g = 0;
	var _g1 = raw.animations.length;
	while(_g < _g1) animations[_g++] = new gltf_types_Animation();
	var _g = 0;
	var _g1 = raw.animations.length;
	while(_g < _g1) {
		var i = _g++;
		animations[i].load(gltf,raw.animations[i]);
	}
	return animations;
};
gltf_types_Animation.prototype = {
	name: null
	,channels: null
	,load: function(gltf,animation) {
		this.name = animation.name;
		this.channels = new Array(animation.channels.length);
		var _g = 0;
		var _g1 = animation.channels.length;
		while(_g < _g1) {
			var i = _g++;
			this.channels[i] = new gltf_types_AnimationChannel();
			this.channels[i].node = gltf.nodes[animation.channels[i].target.node];
			this.channels[i].loadSampler(gltf,animation.samplers[animation.channels[i].sampler]);
			this.channels[i].path = animation.channels[i].target.path;
		}
	}
	,__class__: gltf_types_Animation
};
var gltf_types_AnimationSample = function(input,output) {
	this.output = null;
	this.input = 0;
	this.input = input;
	this.output = output;
};
$hxClasses["gltf.types.AnimationSample"] = gltf_types_AnimationSample;
gltf_types_AnimationSample.__name__ = true;
gltf_types_AnimationSample.prototype = {
	input: null
	,output: null
	,__class__: gltf_types_AnimationSample
};
var gltf_types_AnimationChannel = function() {
	this.path = null;
	this.samples = null;
	this.node = null;
};
$hxClasses["gltf.types.AnimationChannel"] = gltf_types_AnimationChannel;
gltf_types_AnimationChannel.__name__ = true;
gltf_types_AnimationChannel.prototype = {
	node: null
	,samples: null
	,path: null
	,loadSampler: function(gltf,sampler) {
		var outputSampler = gltf.accessors[sampler.output];
		var inputs = gltf.accessors[sampler.input].getFloats();
		var outputs = outputSampler.getFloats();
		this.samples = new Array(inputs.length);
		var _g = 0;
		var _g1 = inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var this1 = this.samples;
			var inputs1 = inputs[i];
			var val;
			switch(outputSampler.type) {
			case "SCALAR":
				var o = new Array(1);
				o[0] = outputs[i];
				val = o;
				break;
			case "VEC2":
				var o1 = new Array(2);
				o1[0] = outputs[i * 2];
				o1[1] = outputs[i * 2 + 1];
				val = o1;
				break;
			case "VEC3":
				var o2 = new Array(3);
				o2[0] = outputs[i * 3];
				o2[1] = outputs[i * 3 + 1];
				o2[2] = outputs[i * 3 + 2];
				val = o2;
				break;
			case "VEC4":
				var o3 = new Array(4);
				o3[0] = outputs[i * 4];
				o3[1] = outputs[i * 4 + 1];
				o3[2] = outputs[i * 4 + 2];
				o3[3] = outputs[i * 4 + 3];
				val = o3;
				break;
			default:
				throw haxe_Exception.thrown("Unhandled animation sampler accessor type: '" + outputSampler.type + "'!");
			}
			this1[i] = new gltf_types_AnimationSample(inputs1,val);
		}
	}
	,__class__: gltf_types_AnimationChannel
};
var gltf_types_Buffer = function() {
	this.data = null;
	this.name = "";
	this.uri = "";
};
$hxClasses["gltf.types.Buffer"] = gltf_types_Buffer;
gltf_types_Buffer.__name__ = true;
gltf_types_Buffer.loadFromRawWithGetter = function(gltf,raw,getter) {
	var buffers = new Array(raw.buffers.length);
	var _g = 0;
	var _g1 = raw.buffers.length;
	while(_g < _g1) {
		var i = _g++;
		buffers[i] = new gltf_types_Buffer();
		var raw1 = raw.buffers[i];
		var tmp = getter(i);
		buffers[i].load(gltf,raw1,tmp);
	}
	return buffers;
};
gltf_types_Buffer.prototype = {
	uri: null
	,name: null
	,data: null
	,load: function(gltf,buffer,data) {
		this.uri = buffer.uri;
		this.name = buffer.name;
		this.data = data;
	}
	,__class__: gltf_types_Buffer
};
var gltf_types_BufferView = function() {
	this._data = null;
	this.target = 34962;
	this.byteStride = 0;
	this.byteLength = 0;
	this.byteOffset = 0;
	this.buffer = null;
};
$hxClasses["gltf.types.BufferView"] = gltf_types_BufferView;
gltf_types_BufferView.__name__ = true;
gltf_types_BufferView.loadFromRaw = function(gltf,raw) {
	var views = new Array(raw.bufferViews.length);
	var _g = 0;
	var _g1 = raw.bufferViews.length;
	while(_g < _g1) views[_g++] = new gltf_types_BufferView();
	var _g = 0;
	var _g1 = raw.bufferViews.length;
	while(_g < _g1) {
		var i = _g++;
		views[i].load(gltf,raw.bufferViews[i]);
	}
	return views;
};
gltf_types_BufferView.prototype = {
	buffer: null
	,byteOffset: null
	,byteLength: null
	,byteStride: null
	,target: null
	,_data: null
	,get_data: function() {
		if(this._data == null) {
			this._data = this.buffer.data.sub(this.byteOffset,this.byteLength);
		}
		return this._data;
	}
	,load: function(gltf,bufferView) {
		this.buffer = gltf.buffers[bufferView.buffer];
		this.byteOffset = bufferView.byteOffset;
		this.byteLength = bufferView.byteLength;
		this.byteStride = bufferView.byteStride;
		this.target = bufferView.target;
	}
	,__class__: gltf_types_BufferView
};
var gltf_types_Camera = function() {
};
$hxClasses["gltf.types.Camera"] = gltf_types_Camera;
gltf_types_Camera.__name__ = true;
gltf_types_Camera.loadFromRaw = function(gltf,raw) {
	var cameras = new Array(raw.cameras.length);
	var _g = 0;
	var _g1 = raw.cameras.length;
	while(_g < _g1) cameras[_g++] = new gltf_types_Camera();
	var _g = 0;
	var _g1 = raw.cameras.length;
	while(_g < _g1) {
		var i = _g++;
		cameras[i].load(gltf,raw.cameras[i]);
	}
	return cameras;
};
gltf_types_Camera.prototype = {
	name: null
	,type: null
	,znear: null
	,zfar: null
	,yfov: null
	,aspectRatio: null
	,load: function(gltf,camera) {
		this.name = camera.name;
		if(camera.perspective != null) {
			this.type = gltf_types_CameraType.Perspective(camera.perspective.aspectRatio,camera.perspective.yfov);
			this.znear = camera.perspective.znear;
			this.zfar = camera.perspective.zfar;
			this.yfov = camera.perspective.yfov;
			this.aspectRatio = camera.perspective.aspectRatio;
		} else {
			this.type = gltf_types_CameraType.Orthographic(camera.orthographic.xmag,camera.orthographic.ymag);
			this.znear = camera.orthographic.znear;
			this.zfar = camera.orthographic.zfar;
		}
	}
	,__class__: gltf_types_Camera
};
var gltf_types_CameraType = $hxEnums["gltf.types.CameraType"] = { __ename__:true,__constructs__:null
	,Orthographic: ($_=function(xmag,ymag) { return {_hx_index:0,xmag:xmag,ymag:ymag,__enum__:"gltf.types.CameraType",toString:$estr}; },$_._hx_name="Orthographic",$_.__params__ = ["xmag","ymag"],$_)
	,Perspective: ($_=function(aspectRatio,yFov) { return {_hx_index:1,aspectRatio:aspectRatio,yFov:yFov,__enum__:"gltf.types.CameraType",toString:$estr}; },$_._hx_name="Perspective",$_.__params__ = ["aspectRatio","yFov"],$_)
};
gltf_types_CameraType.__constructs__ = [gltf_types_CameraType.Orthographic,gltf_types_CameraType.Perspective];
var gltf_types_Image = function() {
	this.bufferView = null;
	this.mimeType = "image/png";
	this.uri = null;
	this.name = null;
};
$hxClasses["gltf.types.Image"] = gltf_types_Image;
gltf_types_Image.__name__ = true;
gltf_types_Image.loadFromRaw = function(gltf,raw) {
	var images = new Array(raw.images.length);
	var _g = 0;
	var _g1 = raw.images.length;
	while(_g < _g1) images[_g++] = new gltf_types_Image();
	var _g = 0;
	var _g1 = raw.images.length;
	while(_g < _g1) {
		var i = _g++;
		images[i].load(gltf,raw.images[i]);
	}
	return images;
};
gltf_types_Image.prototype = {
	name: null
	,uri: null
	,mimeType: null
	,bufferView: null
	,load: function(gltf,image) {
		this.name = image.name;
		this.uri = image.uri;
		this.mimeType = image.mimeType;
		if(image.bufferView != null) {
			this.bufferView = gltf.bufferViews[image.bufferView];
		}
	}
	,__class__: gltf_types_Image
};
var gltf_types_Material = function() {
	this.pbrMetallicRoughness = null;
	this.name = null;
};
$hxClasses["gltf.types.Material"] = gltf_types_Material;
gltf_types_Material.__name__ = true;
gltf_types_Material.loadFromRaw = function(gltf,raw) {
	var materials = new Array(raw.materials.length);
	var _g = 0;
	var _g1 = raw.materials.length;
	while(_g < _g1) materials[_g++] = new gltf_types_Material();
	var _g = 0;
	var _g1 = raw.materials.length;
	while(_g < _g1) {
		var i = _g++;
		materials[i].load(gltf,raw.materials[i]);
	}
	return materials;
};
gltf_types_Material.prototype = {
	name: null
	,pbrMetallicRoughness: null
	,load: function(gltf,material) {
		this.name = material.name;
		this.pbrMetallicRoughness = material.pbrMetallicRoughness;
	}
	,__class__: gltf_types_Material
};
var gltf_types_Mesh = function() {
	this.weights = new Array(0);
	this.primitives = new Array(0);
	this.name = null;
};
$hxClasses["gltf.types.Mesh"] = gltf_types_Mesh;
gltf_types_Mesh.__name__ = true;
gltf_types_Mesh.loadFromRaw = function(gltf,raw) {
	var meshes = new Array(raw.meshes.length);
	var _g = 0;
	var _g1 = raw.meshes.length;
	while(_g < _g1) meshes[_g++] = new gltf_types_Mesh();
	var _g = 0;
	var _g1 = raw.meshes.length;
	while(_g < _g1) {
		var i = _g++;
		meshes[i].load(gltf,raw.meshes[i]);
	}
	return meshes;
};
gltf_types_Mesh.prototype = {
	name: null
	,primitives: null
	,weights: null
	,load: function(gltf,mesh) {
		this.name = mesh.name;
		this.primitives = new Array(mesh.primitives.length);
		var _g = 0;
		var _g1 = mesh.primitives.length;
		while(_g < _g1) {
			var i = _g++;
			this.primitives[i] = new gltf_types_MeshPrimitive();
			this.primitives[i].load(gltf,mesh.primitives[i]);
		}
		if(mesh.weights != null) {
			this.weights = mesh.weights.slice(0);
		}
	}
	,__class__: gltf_types_Mesh
};
var gltf_types_MeshPrimitive = function() {
	this.material = null;
	this.indices = null;
	this.attributes = new Array(0);
};
$hxClasses["gltf.types.MeshPrimitive"] = gltf_types_MeshPrimitive;
gltf_types_MeshPrimitive.__name__ = true;
gltf_types_MeshPrimitive.prototype = {
	attributes: null
	,indices: null
	,material: null
	,load: function(gltf,primitive) {
		var names = Reflect.fields(primitive.attributes);
		this.attributes = new Array(names.length);
		var _g = 0;
		var _g1 = names.length;
		while(_g < _g1) {
			var i = _g++;
			this.attributes[i] = { name : names[i], accessor : gltf.accessors[Reflect.field(primitive.attributes,names[i])]};
		}
		if(primitive.indices != null) {
			this.indices = gltf.accessors[primitive.indices];
		}
		if(primitive.material != null) {
			this.material = primitive.material;
		}
	}
	,getFloatAttributeValues: function(attribute) {
		var accessor = null;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.name == attribute) {
				accessor = a.accessor;
				break;
			}
		}
		if(accessor == null) {
			throw haxe_Exception.thrown("This mesh primitive doesn't contain the '" + attribute + "' attribute!");
		}
		if(accessor.componentType != 5126) {
			var ints = accessor.getInts();
			if(accessor.normalized) {
				switch(accessor.componentType) {
				case 5120:
					var length = ints.length;
					var r = new Array(length);
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						r[i] = (ints[i] / 255.0 - 0.5) * 2.0;
					}
					return r;
				case 5121:
					var length = ints.length;
					var r = new Array(length);
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						r[i] = ints[i] / 255.0;
					}
					return r;
				case 5122:
					var length = ints.length;
					var r = new Array(length);
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						r[i] = (ints[i] / 65535.0 - 0.5) * 2.0;
					}
					return r;
				case 5123:
					var length = ints.length;
					var r = new Array(length);
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						r[i] = ints[i] / 65535.0;
					}
					return r;
				case 5125:
					var length = ints.length;
					var r = new Array(length);
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						r[i] = ints[i] / 4294967295.0;
					}
					return r;
				default:
					var length = ints.length;
					var r = new Array(length);
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						r[i] = js_Boot.__cast(ints[i] , Float);
					}
					return r;
				}
			} else {
				var length = ints.length;
				var r = new Array(length);
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					r[i] = js_Boot.__cast(ints[i] , Float);
				}
				return r;
			}
		} else {
			return accessor.getFloats();
		}
	}
	,getIndexValues: function() {
		if(this.indices == null) {
			throw haxe_Exception.thrown("This mesh primitive doesn't have indices!");
		}
		return this.indices.getInts();
	}
	,__class__: gltf_types_MeshPrimitive
};
var gltf_types_Node = function() {
	this.weights = null;
	this.translation = null;
	this.scale = null;
	this.rotation = null;
	this.mesh = null;
	this.matrix = null;
	this.skin = null;
	this.children = new Array(0);
	this.camera = null;
	this.name = null;
	this.id = -1;
};
$hxClasses["gltf.types.Node"] = gltf_types_Node;
gltf_types_Node.__name__ = true;
gltf_types_Node.preloadFromRaw = function(gltf,raw) {
	var existingNodes = new Array(raw.nodes.length);
	var _g = 0;
	var _g1 = raw.nodes.length;
	while(_g < _g1) {
		var i = _g++;
		existingNodes[i] = new gltf_types_Node();
		existingNodes[i].id = i;
	}
	return existingNodes;
};
gltf_types_Node.loadFromRaw = function(gltf,raw) {
	var _g = 0;
	var _g1 = raw.nodes.length;
	while(_g < _g1) {
		var i = _g++;
		gltf.nodes[i].load(gltf,raw.nodes[i],gltf.nodes);
	}
	return gltf.nodes;
};
gltf_types_Node.prototype = {
	id: null
	,name: null
	,camera: null
	,children: null
	,skin: null
	,matrix: null
	,mesh: null
	,rotation: null
	,scale: null
	,translation: null
	,weights: null
	,load: function(gltf,node,existingNodes) {
		this.name = node.name;
		if(node.camera != null) {
			this.camera = gltf.cameras[node.camera];
		}
		if(node.children != null) {
			this.children = new Array(node.children.length);
			var _g = 0;
			var _g1 = node.children.length;
			while(_g < _g1) {
				var i = _g++;
				this.children[i] = existingNodes[node.children[i]];
			}
		}
		if(node.skin != null) {
			this.skin = gltf.skins[node.skin];
		}
		if(node.matrix != null) {
			this.matrix = node.matrix.slice(0);
		}
		if(node.mesh != null) {
			this.mesh = gltf.meshes[node.mesh];
		}
		if(node.rotation != null) {
			this.rotation = node.rotation.slice(0);
		}
		if(node.scale != null) {
			this.scale = node.scale.slice(0);
		}
		if(node.translation != null) {
			this.translation = node.translation.slice(0);
		}
		if(node.weights != null) {
			this.weights = node.weights.slice(0);
		}
	}
	,__class__: gltf_types_Node
};
var gltf_types_Sampler = function() {
};
$hxClasses["gltf.types.Sampler"] = gltf_types_Sampler;
gltf_types_Sampler.__name__ = true;
gltf_types_Sampler.loadFromRaw = function(gltf,raw) {
	var samplers = new Array(raw.samplers.length);
	var _g = 0;
	var _g1 = raw.samplers.length;
	while(_g < _g1) samplers[_g++] = new gltf_types_Sampler();
	var _g = 0;
	var _g1 = raw.samplers.length;
	while(_g < _g1) {
		var i = _g++;
		samplers[i].load(gltf,raw.samplers[i]);
	}
	return samplers;
};
gltf_types_Sampler.prototype = {
	name: null
	,magFilter: null
	,minFilter: null
	,wrapS: null
	,wrapT: null
	,load: function(gltf,sampler) {
		this.name = sampler.name;
		this.magFilter = sampler.magFilter;
		this.minFilter = sampler.minFilter;
		this.wrapS = sampler.wrapS;
		this.wrapT = sampler.wrapT;
	}
	,__class__: gltf_types_Sampler
};
var gltf_types_Scene = function() {
	this.nodes = new Array(0);
	this.name = null;
};
$hxClasses["gltf.types.Scene"] = gltf_types_Scene;
gltf_types_Scene.__name__ = true;
gltf_types_Scene.loadFromRaw = function(gltf,raw) {
	var scenes = new Array(raw.scenes.length);
	var _g = 0;
	var _g1 = raw.scenes.length;
	while(_g < _g1) scenes[_g++] = new gltf_types_Scene();
	var _g = 0;
	var _g1 = raw.scenes.length;
	while(_g < _g1) {
		var i = _g++;
		scenes[i].load(gltf,raw.scenes[i]);
	}
	return scenes;
};
gltf_types_Scene.prototype = {
	name: null
	,nodes: null
	,load: function(gltf,scene) {
		this.name = scene.name;
		this.nodes = new Array(scene.nodes.length);
		var _g = 0;
		var _g1 = scene.nodes.length;
		while(_g < _g1) {
			var i = _g++;
			this.nodes[i] = gltf.nodes[scene.nodes[i]];
		}
	}
	,__class__: gltf_types_Scene
};
var gltf_types_Skin = function() {
};
$hxClasses["gltf.types.Skin"] = gltf_types_Skin;
gltf_types_Skin.__name__ = true;
gltf_types_Skin.loadFromRaw = function(gltf,raw) {
	var skins = new Array(raw.skins.length);
	var _g = 0;
	var _g1 = raw.skins.length;
	while(_g < _g1) {
		var i = _g++;
		var skin = new gltf_types_Skin();
		skin.load(gltf,raw.skins[i]);
		skins[i] = skin;
	}
	return skins;
};
gltf_types_Skin.prototype = {
	skeleton: null
	,joints: null
	,inverseBindMatrices: null
	,load: function(gltf,skin) {
		this.skeleton = gltf.nodes[skin.skeleton];
		this.joints = new Array(skin.joints.length);
		var _g = 0;
		var _g1 = skin.joints.length;
		while(_g < _g1) {
			var i = _g++;
			this.joints[i] = gltf.nodes[skin.joints[i]];
		}
		this.inverseBindMatrices = new Array(skin.joints.length);
		var matrices = gltf.accessors[skin.inverseBindMatrices].getFloats();
		var _g = 0;
		var _g1 = skin.joints.length;
		while(_g < _g1) {
			var i = _g++;
			this.inverseBindMatrices[i] = new Array(16);
			this.inverseBindMatrices[i][0] = matrices[i * 16];
			this.inverseBindMatrices[i][1] = matrices[i * 16 + 1];
			this.inverseBindMatrices[i][2] = matrices[i * 16 + 2];
			this.inverseBindMatrices[i][3] = matrices[i * 16 + 3];
			this.inverseBindMatrices[i][4] = matrices[i * 16 + 4];
			this.inverseBindMatrices[i][5] = matrices[i * 16 + 5];
			this.inverseBindMatrices[i][6] = matrices[i * 16 + 6];
			this.inverseBindMatrices[i][7] = matrices[i * 16 + 7];
			this.inverseBindMatrices[i][8] = matrices[i * 16 + 8];
			this.inverseBindMatrices[i][9] = matrices[i * 16 + 9];
			this.inverseBindMatrices[i][10] = matrices[i * 16 + 10];
			this.inverseBindMatrices[i][11] = matrices[i * 16 + 11];
			this.inverseBindMatrices[i][12] = matrices[i * 16 + 12];
			this.inverseBindMatrices[i][13] = matrices[i * 16 + 13];
			this.inverseBindMatrices[i][14] = matrices[i * 16 + 14];
			this.inverseBindMatrices[i][15] = matrices[i * 16 + 15];
		}
	}
	,__class__: gltf_types_Skin
};
var gltf_types_Texture = function() {
	this.sampler = null;
	this.image = null;
	this.name = null;
};
$hxClasses["gltf.types.Texture"] = gltf_types_Texture;
gltf_types_Texture.__name__ = true;
gltf_types_Texture.loadFromRaw = function(gltf,raw) {
	var textures = new Array(raw.textures.length);
	var _g = 0;
	var _g1 = raw.textures.length;
	while(_g < _g1) textures[_g++] = new gltf_types_Texture();
	var _g = 0;
	var _g1 = raw.textures.length;
	while(_g < _g1) {
		var i = _g++;
		textures[i].load(gltf,raw.textures[i]);
	}
	return textures;
};
gltf_types_Texture.prototype = {
	name: null
	,image: null
	,sampler: null
	,load: function(gltf,texture) {
		this.name = texture.name;
		if(texture.source != null) {
			this.image = gltf.images[texture.source];
		}
		if(texture.sampler != null) {
			this.sampler = gltf.samplers[texture.sampler];
		}
	}
	,__class__: gltf_types_Texture
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = true;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) _g.push(_g2[_g1++].name);
	return _g;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer((len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0)));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		while(_g < len) {
			++_g;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var _g = 0;
		var _g1 = this.length < other.length ? this.length : other.length;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) chars.push(HxOverrides.cca(str,_g++));
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var c = this.b[_g++];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_UInt8Array = {};
haxe_io_UInt8Array.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js_Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.biancaSize = 130629;
	this.biancaDescription = { name : "bianca", original_height : 256, file_sizes : [130629], original_width : 512, files : ["bianca.png"], type : "image"};
	this.bianca = null;
	this.audiSize = 4855;
	this.audiDescription = { name : "audi", original_height : 256, file_sizes : [4855], original_width : 256, files : ["audi.png"], type : "image"};
	this.audi = null;
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = true;
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,audi: null
	,audiDescription: null
	,audiSize: null
	,bianca: null
	,biancaDescription: null
	,biancaSize: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.sfx_skidSize = 25204;
	this.sfx_skidDescription = { name : "sfx_skid", file_sizes : [25204,34944], files : ["sfx/skid.ogg","sfx/skid.mp3"], type : "sound"};
	this.sfx_skid = null;
	this.sfx_engine_4Size = 5272;
	this.sfx_engine_4Description = { name : "sfx_engine_4", file_sizes : [5272,2506], files : ["sfx/engine_4.ogg","sfx/engine_4.mp3"], type : "sound"};
	this.sfx_engine_4 = null;
	this.sfx_engine_3Size = 5255;
	this.sfx_engine_3Description = { name : "sfx_engine_3", file_sizes : [5255,2506], files : ["sfx/engine_3.ogg","sfx/engine_3.mp3"], type : "sound"};
	this.sfx_engine_3 = null;
	this.sfx_engine_2Size = 5237;
	this.sfx_engine_2Description = { name : "sfx_engine_2", file_sizes : [5237,2506], files : ["sfx/engine_2.ogg","sfx/engine_2.mp3"], type : "sound"};
	this.sfx_engine_2 = null;
	this.sfx_engine_1Size = 5237;
	this.sfx_engine_1Description = { name : "sfx_engine_1", file_sizes : [5237,2506], files : ["sfx/engine_1.ogg","sfx/engine_1.mp3"], type : "sound"};
	this.sfx_engine_1 = null;
	this.sfx_engine_0Size = 5265;
	this.sfx_engine_0Description = { name : "sfx_engine_0", file_sizes : [5265,2506], files : ["sfx/engine_0.ogg","sfx/engine_0.mp3"], type : "sound"};
	this.sfx_engine_0 = null;
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = true;
kha__$Assets_SoundList.prototype = {
	sfx_engine_0: null
	,sfx_engine_0Description: null
	,sfx_engine_0Size: null
	,sfx_engine_1: null
	,sfx_engine_1Description: null
	,sfx_engine_1Size: null
	,sfx_engine_2: null
	,sfx_engine_2Description: null
	,sfx_engine_2Size: null
	,sfx_engine_3: null
	,sfx_engine_3Description: null
	,sfx_engine_3Size: null
	,sfx_engine_4: null
	,sfx_engine_4Description: null
	,sfx_engine_4Size: null
	,sfx_skid: null
	,sfx_skidDescription: null
	,sfx_skidSize: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.audi_quattro___group_b_glbSize = 200224;
	this.audi_quattro___group_b_glbDescription = { name : "audi_quattro___group_b_glb", file_sizes : [200224], files : ["audi_quattro_-_group_b.glb"], type : "blob"};
	this.audi_quattro___group_b_glb = null;
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = true;
kha__$Assets_BlobList.prototype = {
	audi_quattro___group_b_glb: null
	,audi_quattro___group_b_glbDescription: null
	,audi_quattro___group_b_glbSize: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = true;
kha__$Assets_FontList.prototype = {
	__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = true;
kha__$Assets_VideoList.prototype = {
	__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = true;
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var byteCount = 0;
	var _g = 0;
	var _g1 = lists.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = Type.getInstanceFields(lists[i]);
		while(_g2 < _g3.length) {
			var file = _g3[_g2];
			++_g2;
			if(StringTools.endsWith(file,"Description")) {
				++fileCount;
			} else if(StringTools.endsWith(file,"Size")) {
				byteCount += Reflect.field(listInstances[i],file);
			}
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var bytesLeft = byteCount;
	var onLoaded = function(bytes) {
		filesLeft -= 1;
		bytesLeft -= bytes;
		kha_Assets.progress = 1 - bytesLeft / byteCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err,bytes) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 143, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded(bytes);
	};
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		var size = desc.file_sizes[0];
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 169, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 173, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 152, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(function() {
						done(size);
					});
				} else {
					done(size);
				}
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 156, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done(size);
			},function(err) {
				onError(err,size);
			},{ fileName : "kha/Assets.hx", lineNumber : 177, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var _g = 0;
	var _g1 = lists.length;
	while(_g < _g1) {
		var i = _g++;
		var listInstance = listInstances[i];
		var _g2 = 0;
		var _g3 = Type.getInstanceFields(lists[i]);
		while(_g2 < _g3.length) {
			var field = _g3[_g2];
			++_g2;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc = Reflect.field(listInstance,field);
			if(filter == null || filter(desc)) {
				loadFunc(desc,onLoaded,onError);
			} else {
				onLoaded(desc.file_sizes[0]);
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	if(description == null) {
		(kha_Assets.reporter(failed,pos))({ url : name, error : "Name not found"});
		return;
	}
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var _g = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			_g(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = true;
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = true;
kha_Resource.__isInterface__ = true;
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = true;
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.create = function(width,height,format,usage,readable) {
	if(readable == null) {
		readable = false;
	}
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1,readable);
	}
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples) {
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples,false);
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(image.width,image.height,0,false,0,1,readable);
		img.image = image;
		img.createTexture();
		return img;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage,readable) {
	if(readable == null) {
		readable = false;
	}
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1,readable);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img = new kha_CanvasImage(width,height,format,false);
	img.get_g2().canvas.putImageData(new ImageData(new Uint8ClampedArray(bytes.b.bufferValue),width,height),0,0);
	return img;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	kha_Image.bufferToBase64(bytes.b.bufferValue,function(dataUrl) {
		var imageElement = window.document.createElement("img");
		imageElement.onload = function() {
			doneCallback(kha_Image.fromImage(imageElement,readable));
		};
		imageElement.onerror = function() {
			errorCallback("Image was not created");
		};
		imageElement.src = "data:image;base64," + dataUrl;
	},function() {
		errorCallback("Image was not created");
	});
};
kha_Image.bufferToBase64 = function(buffer,onLoad,onError) {
	var reader = new FileReader();
	reader.onload = function() {
		var result = reader.result;
		onLoad(HxOverrides.substr(result,result.indexOf(",") + 1,null));
	};
	reader.onerror = function() {
		onError();
	};
	reader.readAsDataURL(new Blob([buffer]));
};
kha_Image.fromVideo = function(video) {
	var jsvideo = video;
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(jsvideo.element.videoWidth,jsvideo.element.videoHeight,0,false);
		img.video = jsvideo.element;
		img.createTexture();
		return img;
	} else {
		var img = new kha_WebGLImage(jsvideo.element.videoWidth,jsvideo.element.videoHeight,0,false,0,1,false);
		img.video = jsvideo.element;
		img.createTexture();
		return img;
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_realWidth: function() {
		return 0;
	}
	,get_realHeight: function() {
		return 0;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.myFormat = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = true;
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,myFormat: null
	,renderTarget: null
	,frameBuffer: null
	,g2canvas: null
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.myFormat == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		this.data = null;
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.ie && kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = this.get_width();
					while(_g2 < _g3) {
						var x = _g2++;
						var _this = this.bytes;
						var pos = y * this.get_width() + x;
						var value = _this.b[pos];
						var pos1 = y * this.get_width() * 4 + x * 4;
						rgbaBytes.b[pos1] = value;
						var pos2 = y * this.get_width() * 4 + x * 4 + 1;
						rgbaBytes.b[pos2] = value;
						var pos3 = y * this.get_width() * 4 + x * 4 + 2;
						rgbaBytes.b[pos3] = value;
						var pos4 = y * this.get_width() * 4 + x * 4 + 3;
						rgbaBytes.b[pos4] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,__class__: kha_CanvasImage
});
var kha_Color = {};
kha_Color.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha_Color._new(a << 24 | r << 16 | g << 8 | b);
};
kha_Color._new = function(value) {
	return value;
};
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = true;
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.prototype = {
	get_frequency: function() {
		return kha_SystemImpl.estimatedRefreshRate;
	}
	,__class__: kha_Display
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = true;
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = true;
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = true;
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) chars[_g++].yoff += this.baseline;
	this.texture = kha_Image.create(width,height,1);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g = 0;
	while(_g < height) {
		++_g;
		var _g1 = 0;
		while(_g1 < width) {
			++_g1;
			var v = pixels.readU8(pos);
			bytes.b[pos] = v;
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = true;
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - kha_KravurImage.charBlocks[i * 2 - 1];
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) width += this.getCharWidth(HxOverrides.cca(str,_g++));
		return width;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
	this.fontIndex = fontIndex;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = true;
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes),fontIndex);
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,fontIndex: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = this.fontIndex * 10000000 + fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var baked = new Array(glyphs.length);
			var _g = 0;
			var _g1 = baked.length;
			while(_g < _g1) baked[_g++] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			var pixels = null;
			var offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,this.fontIndex);
			if(offset == -1) {
				offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,0);
			}
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,offset,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,offset);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var image = new kha_KravurImage(fontSize | 0,Math.round(metrics.ascent * scale),Math.round(metrics.descent * scale),Math.round(metrics.lineGap * scale),width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = true;
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			done(kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0));
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event) {
			done(kha_Image.fromImage(img,readable));
		};
		img.crossOrigin = "";
		img.src = desc.files[0];
	}
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".mp3")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".wav")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var file = desc.files[_g++];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_WebAudioSound(file,done,failed);
				return;
			}
		}
		failed({ url : desc.files.join(","), error : "Unable to find sound files with supported audio formats"});
	} else if(kha_SystemImpl.mobile) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".mp3")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".wav")) {
					new kha_js_MobileWebAudioSound(file,done,failed);
					return;
				}
			}
		}
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var file = desc.files[_g++];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_MobileWebAudioSound(file,done,failed);
				return;
			}
		}
		failed({ url : desc.files.join(","), error : "Unable to find sound files with supported audio formats"});
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadRemote(desc,done,failed);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = true;
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = true;
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = true;
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.lastFrameEnd = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	if(restartTimers) {
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasks;
		while(_g < _g1.length) _g1[_g++].paused = false;
		var _g = 0;
		var _g1 = kha_Scheduler.frameTasks;
		while(_g < _g1.length) _g1[_g++].paused = false;
	}
};
kha_Scheduler.executeFrame = function() {
	var real = kha_Scheduler.realTime();
	var now = real - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.lastFrameEnd;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				now = real - kha_Scheduler.startTime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var frames = Math.round(delta / (1.0 / kha_Display.get_primary().get_frequency()));
				if(frames < 1) {
					return;
				}
				var realdif = frames * (1.0 / kha_Display.get_primary().get_frequency());
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 1;
				while(_g < _g1) {
					var i = _g++;
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT;
				while(_g < _g1) next += kha_Scheduler.deltas[_g++];
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = now;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.lastFrameEnd = frameEnd;
		}
		var _g = 0;
		var _g1 = kha_Scheduler.pausedTimeTasks;
		while(_g < _g1.length) _g1[_g++].next += delta;
		if(kha_Scheduler.stopped) {
			var _g = 0;
			var _g1 = kha_Scheduler.timeTasks;
			while(_g < _g1.length) _g1[_g++].next += delta;
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g = 0;
		var _g1 = kha_Scheduler.timeTasksScratchpad;
		while(_g < _g1.length) HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,_g1[_g++]);
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.current = frameEnd;
	kha_Scheduler.sortFrameTasks();
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(!frameTask.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.current = kha_Scheduler.activeTimeTask.next;
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
	kha_Scheduler.lastFrameEnd = 0;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g = 0;
	var _g1 = kha_Scheduler.pausedTimeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	return null;
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = true;
kha_Shaders.init = function() {
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 2))));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs,["painter-colored.frag.essl","painter-colored-webgl2.frag.essl","painter-colored-relaxed.frag.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 2))));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs,["painter-colored.vert.essl","painter-colored-webgl2.vert.essl","painter-colored-relaxed.vert.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 2))));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs,["painter-image.frag.essl","painter-image-webgl2.frag.essl","painter-image-relaxed.frag.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 2))));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs,["painter-image.vert.essl","painter-image-webgl2.vert.essl","painter-image-relaxed.vert.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 2))));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs,["painter-text.frag.essl","painter-text-webgl2.frag.essl","painter-text-relaxed.frag.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 2))));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs,["painter-text.vert.essl","painter-text-webgl2.vert.essl","painter-text-relaxed.vert.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 2))));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs,["painter-video.frag.essl","painter-video-webgl2.frag.essl","painter-video-relaxed.frag.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 2))));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs,["painter-video.vert.essl","painter-video-webgl2.vert.essl","painter-video-relaxed.vert.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_fragData" + 2))));
	kha_Shaders.simple_frag = new kha_graphics4_FragmentShader(blobs,["simple.frag.essl","simple-webgl2.frag.essl","simple-relaxed.frag.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"skinned_vertData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"skinned_vertData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"skinned_vertData" + 2))));
	kha_Shaders.skinned_vert = new kha_graphics4_VertexShader(blobs,["skinned.vert.essl","skinned-webgl2.vert.essl","skinned-relaxed.vert.essl"]);
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"static_vertData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"static_vertData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"static_vertData" + 2))));
	kha_Shaders.static_vert = new kha_graphics4_VertexShader(blobs,["static.vert.essl","static-webgl2.vert.essl","static-relaxed.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = true;
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
	}
	,__class__: kha_Sound
};
var kha__$System_AudioOptions = function(allowMobileWebAudio) {
	this.allowMobileWebAudio = false;
	if(allowMobileWebAudio != null) {
		this.allowMobileWebAudio = allowMobileWebAudio;
	}
};
$hxClasses["kha._System.AudioOptions"] = kha__$System_AudioOptions;
kha__$System_AudioOptions.__name__ = true;
kha__$System_AudioOptions.prototype = {
	allowMobileWebAudio: null
	,__class__: kha__$System_AudioOptions
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer,audio) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.audio = null;
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,-1,-1,800,600,-1,true,null,0) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(60,true,32,16,8,1) : framebuffer;
	this.audio = audio != null ? audio : new kha__$System_AudioOptions(null);
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = true;
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,audio: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = true;
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) _g1[_g++](framebuffers);
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) _g1[_g++](filePath);
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_height();
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = true;
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = true;
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.ios = kha_SystemImpl.isIOS();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.safari = kha_SystemImpl.isSafari();
	kha_SystemImpl.ie = kha_SystemImpl.isIE();
	kha_SystemImpl.mobileAudioPlaying = !kha_SystemImpl.mobile && !kha_SystemImpl.chrome && !kha_SystemImpl.firefox;
	kha_SystemImpl.initSecondStep(callback);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	kha_SystemImpl.initAnimate(callback);
};
kha_SystemImpl.isMobile = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Android") != -1 || agent.indexOf("webOS") != -1 || agent.indexOf("BlackBerry") != -1 || agent.indexOf("Windows Phone") != -1) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("iPhone") != -1 || agent.indexOf("iPad") != -1 || agent.indexOf("iPod") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Chrome") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Firefox") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isSafari = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("Safari") != -1 && agent.indexOf("Chrome") == -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = $global.navigator.userAgent;
	if(agent.indexOf("MSIE ") != -1 || agent.indexOf("Trident/") != -1) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getTime = function() {
	var now = window.performance != null ? window.performance.now() : Date.now();
	return now / 1000;
};
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		var pad = e.gamepad;
		kha_input_Gamepad.sendConnectEvent(pad.index);
		var _g = 0;
		var _g1 = pad.buttons.length;
		while(_g < _g1) kha_SystemImpl.gamepadStates[pad.index].buttons[_g++] = 0;
	});
	window.addEventListener("gamepaddisconnected",function(e) {
		kha_input_Gamepad.sendDisconnectEvent(e.gamepad.index);
	});
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null) {
		var _g = 0;
		var _g1 = sysGamepads.length;
		while(_g < _g1) {
			var pad = sysGamepads[_g++];
			if(pad != null) {
				kha_SystemImpl.gamepads[pad.index].connected = true;
			}
		}
	}
	var onCopy = function(e) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	};
	var onCut = function(e) {
		if(kha_System.cutListener != null) {
			var data = kha_System.cutListener();
			if(data != null) {
				e.clipboardData.setData("text/plain",data);
			}
			e.preventDefault();
		}
	};
	var onPaste = function(e) {
		if(kha_System.pasteListener != null) {
			var onPaste = e.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste);
			e.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g = 0;
	var _g1 = pad.buttons.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.buttons[i] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i] != pad.buttons[i].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i] = pad.buttons[i].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i,pad.buttons[i].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( _g ) {
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 413, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( _g ) {
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 441, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(0,defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if((!kha_SystemImpl.mobile || kha_SystemImpl.options.audio.allowMobileWebAudio) && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	canvas.focus();
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	canvas.addEventListener("dragstart",function(e) {
		e.preventDefault();
	});
	window.document.addEventListener("dragover",function(e) {
		e.preventDefault();
	});
	window.document.addEventListener("drop",function(event) {
		event.preventDefault();
		if(event.dataTransfer != null && event.dataTransfer.files != null) {
			var _g = 0;
			var _g1 = event.dataTransfer.files;
			while(_g < _g1.length) {
				var file = _g1[_g];
				++_g;
				kha_LoaderImpl.dropFiles.h[file.name] = file;
				kha_System.dropFiles("drop://" + file.name);
			}
		}
	});
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.initAnimate = function(callback) {
	var canvas = kha_SystemImpl.getCanvasElement();
	var $window = window;
	var isRefreshRateDetectionActive = false;
	var lastTimestamp = 0.0;
	var possibleRefreshRates = [30,60,75,90,120,144,240,340,360];
	var _g = [];
	var _g1 = 0;
	var _g2 = possibleRefreshRates.length;
	while(_g1 < _g2) {
		++_g1;
		_g.push(0);
	}
	var refreshRatesCounts = _g;
	var animate = null;
	animate = function(timestamp) {
		$window.requestAnimationFrame(animate);
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var pad = sysGamepads[_g++];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			kha_System.render([kha_SystemImpl.frame]);
			if(kha_SystemImpl.ie && kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
		if(!isRefreshRateDetectionActive) {
			return;
		}
		if(lastTimestamp == 0) {
			lastTimestamp = timestamp;
			return;
		}
		var fps = Math.floor(1000 / (timestamp - lastTimestamp));
		if(kha_SystemImpl.estimatedRefreshRate < fps) {
			kha_SystemImpl.estimatedRefreshRate = fps;
		}
		lastTimestamp = timestamp;
		var _g_current = 0;
		var _g_array = possibleRefreshRates;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			if(fps > _g_value - 3 && fps < _g_value + 3) {
				refreshRatesCounts[_g_key]++;
			}
		}
	};
	window.setTimeout(function() {
		isRefreshRateDetectionActive = true;
		return window.setTimeout(function() {
			isRefreshRateDetectionActive = false;
			var index = possibleRefreshRates.indexOf(60);
			var max = 0;
			var _g_current = 0;
			var _g_array = refreshRatesCounts;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				if(_g_value > max) {
					max = _g_value;
					index = _g_key;
				}
			}
			return kha_SystemImpl.estimatedRefreshRate = possibleRefreshRates[index];
		},1000);
	},500);
	kha_Scheduler.start();
	$window.requestAnimationFrame(animate);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.lockMouse = function() {
	if(kha_SystemImpl.khanvas.requestPointerLock != null) {
		kha_SystemImpl.khanvas.requestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(window.document.exitPointerLock != null) {
		window.document.exitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 699, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.activeWheelEvent = event;
	var _g = kha_input_Mouse.wheelEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		if(_g.func(event)) {
			event.preventDefault();
		}
		break;
	}
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.activeWheelEvent = null;
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.activeWheelEvent = null;
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	kha_SystemImpl.activeWheelEvent = null;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.activeMouseEvent = event;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	} else if(event.which == 4) {
		kha_SystemImpl.mouse.sendDownEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	} else if(event.which == 5) {
		kha_SystemImpl.mouse.sendDownEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	}
	kha_SystemImpl.activeMouseEvent = null;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseBackUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 4) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	kha_SystemImpl.mouse.sendUpEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseForwardUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 5) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	kha_SystemImpl.mouse.sendUpEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.activeMouseEvent = event;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.activeMouseEvent = null;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	var _g = kha_input_Surface.touchDownEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		if(_g.func(event)) {
			event.preventDefault();
		}
		break;
	}
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		if(!kha_input_Surface.listenedEventsBefore) {
			kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		}
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		if(!kha_input_Surface.listenedEventsBefore) {
			kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		}
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			if(!kha_input_Surface.listenedEventsBefore) {
				kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
			}
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		if(!kha_input_Surface.listenedEventsBefore) {
			kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		}
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.activeKeyEvent = event;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.preventDefaultKeyBehavior(event);
	event.stopPropagation();
	if(event.repeat) {
		event.preventDefault();
		return;
	}
	kha_SystemImpl.keyboard.sendDownEvent(kha_SystemImpl.fixedKeyCode(event));
	kha_SystemImpl.activeKeyEvent = null;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.preventDefaultKeyBehavior = function(event) {
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		if(_g.func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		if(e.metaKey && e.keyCode == 81) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.activeKeyEvent = event;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.preventDefaultKeyBehavior(event);
	event.stopPropagation();
	kha_SystemImpl.keyboard.sendUpEvent(kha_SystemImpl.fixedKeyCode(event));
	kha_SystemImpl.activeKeyEvent = null;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.activeKeyEvent = event;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	kha_SystemImpl.preventDefaultKeyBehavior(event);
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.activeKeyEvent = null;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unknown";
};
kha_SystemImpl.getGamepadVendor = function(index) {
	return "unknown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance != null && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if($global.navigator.getGamepads != null) {
		return $global.navigator.getGamepads();
	} else {
		return null;
	}
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = true;
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	__class__: kha_Video
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples,readable) {
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.myFormat = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.readable = readable;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = true;
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,myFormat: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,readable: null
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.myFormat) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.myFormat == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.myFormat) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 284, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.myFormat) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytesToArray: function(bytes) {
		switch(this.myFormat) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.myFormat) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		this.data = null;
		this.image = null;
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.myFormat) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.ie && kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g3 = this.get_width();
						while(_g2 < _g3) {
							var x = _g2++;
							var _this = this.bytes;
							var pos = y * this.get_width() + x;
							var value = _this.b[pos];
							var pos1 = y * this.get_width() * 4 + x * 4;
							rgbaBytes.b[pos1] = value;
							var pos2 = y * this.get_width() * 4 + x * 4 + 1;
							rgbaBytes.b[pos2] = value;
							var pos3 = y * this.get_width() * 4 + x * 4 + 2;
							rgbaBytes.b[pos3] = value;
							var pos4 = y * this.get_width() * 4 + x * 4 + 3;
							rgbaBytes.b[pos4] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			if(!this.readable) {
				this.bytes = null;
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(num,defaultWidth,defaultHeight,canvas) {
	var _gthis = this;
	this.num = num;
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
	kha_Window.resizeCallbacks[num] = [];
	var observer = new MutationObserver(function(mutations,observer) {
		var isResize = false;
		var _g = 0;
		while(_g < mutations.length) {
			var mutation = mutations[_g];
			++_g;
			if(mutation.attributeName == "width" || mutation.attributeName == "height") {
				isResize = true;
				break;
			}
		}
		if(isResize) {
			_gthis.resize(canvas.width,canvas.height);
		}
	});
	observer.observe(canvas,{ attributes : true});
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = true;
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.prototype = {
	num: null
	,canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,resize: function(width,height) {
		var _g = 0;
		var _g1 = kha_Window.resizeCallbacks[this.num];
		while(_g < _g1.length) _g1[_g++](width,height);
	}
	,get_width: function() {
		if(this.canvas.width == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.width;
		}
	}
	,get_height: function() {
		if(this.canvas.height == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.height;
		}
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = true;
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_arrays_ByteArray = {};
kha_arrays_ByteArray._new = function(buffer,byteOffset,byteLength) {
	return new DataView(buffer,byteOffset,byteLength);
};
kha_arrays_ByteArray.make = function(byteLength) {
	return kha_arrays_ByteArray._new(kha_arrays_ByteBuffer.create(byteLength));
};
var kha_arrays_ByteBuffer = {};
kha_arrays_ByteBuffer.create = function(length) {
	return kha_arrays_ByteBuffer._new(length);
};
kha_arrays_ByteBuffer._new = function(length) {
	return new ArrayBuffer(length);
};
var kha_arrays_Float32Array = {};
kha_arrays_Float32Array._new = function(elements) {
	return kha_arrays_ByteArray.make(elements * 4);
};
var kha_arrays_Uint32Array = {};
kha_arrays_Uint32Array._new = function(elements) {
	return kha_arrays_ByteArray.make(elements * 4);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = true;
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,__class__: kha_audio1_AudioChannel
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = true;
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = true;
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( _g ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( _g ) {
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(8192,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(2048,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data.getFloat32(kha_audio2_Audio.buffer.readLocation * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data.getFloat32(kha_audio2_Audio.buffer.readLocation * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = 0;
				output2[i] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) _g1[_g++].wake();
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = true;
kha_audio2_Audio1._init = function() {
	kha_audio2_Audio1.soundChannels = new Array(32);
	kha_audio2_Audio1.streamChannels = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = new Array(32);
	kha_audio2_Audio1.sampleCache1 = kha_arrays_Float32Array._new(512);
	kha_audio2_Audio1.sampleCache2 = kha_arrays_Float32Array._new(512);
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.byteLength >> 2 < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 50, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			while(_g < samples) {
				++_g;
				buffer.data.setFloat32(buffer.writeLocation * 4,0,true);
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		kha_audio2_Audio1.sampleCache1 = kha_arrays_Float32Array._new(samples * 2);
		kha_audio2_Audio1.sampleCache2 = kha_arrays_Float32Array._new(samples * 2);
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g = 0;
	while(_g < samples) kha_audio2_Audio1.sampleCache2.setFloat32(_g++ * 4,0,true);
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		kha_audio2_Audio1.internalSoundChannels[i] = kha_audio2_Audio1.soundChannels[i];
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		kha_audio2_Audio1.internalStreamChannels[i] = kha_audio2_Audio1.streamChannels[i];
	}
	var _g = 0;
	var _g1 = kha_audio2_Audio1.internalSoundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g2 = 0;
		while(_g2 < samples) {
			var i = _g2++;
			var _g3 = kha_audio2_Audio1.sampleCache2;
			_g3.setFloat32(i * 4,_g3.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) + kha_audio2_Audio1.sampleCache1.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) * channel.get_volume(),true);
		}
	}
	var _g = 0;
	var _g1 = kha_audio2_Audio1.internalStreamChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g2 = 0;
		while(_g2 < samples) {
			var i = _g2++;
			var _g3 = kha_audio2_Audio1.sampleCache2;
			_g3.setFloat32(i * 4,_g3.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) + kha_audio2_Audio1.sampleCache1.getFloat32(i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN) * channel.get_volume(),true);
		}
	}
	var _g = 0;
	while(_g < samples) {
		var a = kha_audio2_Audio1.sampleCache2.getFloat32(_g++ * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data.setFloat32(buffer.writeLocation * 4,a1 > -1.0 ? a1 : -1.0,true);
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished() || kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			break;
		}
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.data = null;
	this.looping = looping;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = true;
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			while(_g < requestedLength) requestedSamples.setFloat32(_g++ * 4,0,true);
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g = 0;
			var a = (this.data.byteLength >> 2) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				++_g;
				requestedSamples.setFloat32(requestedSamplesIndex++ * 4,this.data.getFloat32(this.myPosition++ * 4,kha_arrays_ByteArray.LITTLE_ENDIAN),true);
			}
			if(this.myPosition >= this.data.byteLength >> 2) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples.setFloat32(requestedSamplesIndex++ * 4,0,true);
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.byteLength >> 2;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	this.data = kha_arrays_Float32Array._new(size);
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = true;
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = true;
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			while(_g < requestedLength) requestedSamples.setFloat32(_g++ * 4,0,true);
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g = 0;
			var value = Math.ceil((this.data.byteLength >> 2) * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				++_g;
				var k = requestedSamplesIndex++;
				var position = this.myPosition++;
				var factor = this.sampleRate / sampleRate;
				var v;
				if(position % 2 == 0) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var maximum = (this.data.byteLength >> 2) - 1;
					if(maximum % 2 != 0) {
						--maximum;
					}
					var t = pos - Math.floor(pos);
					v = (1 - t) * (pos1 < 0 || pos1 > maximum ? 0 : this.data.getFloat32(pos1 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN)) + t * (pos2 < 0 || pos2 > maximum ? 0 : this.data.getFloat32(pos2 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN));
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var maximum1 = (this.data.byteLength >> 2) - 1;
					if(maximum1 % 2 == 0) {
						--maximum1;
					}
					var t1 = pos3 - Math.floor(pos3);
					v = (1 - t1) * (pos11 < 1 || pos11 > maximum1 ? 0 : this.data.getFloat32(pos11 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN)) + t1 * (pos21 < 1 || pos21 > maximum1 ? 0 : this.data.getFloat32(pos21 * 4,kha_arrays_ByteArray.LITTLE_ENDIAN));
				}
				requestedSamples.setFloat32(k * 4,v,true);
			}
			var value1 = Math.ceil((this.data.byteLength >> 2) * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value1 % 2 == 0 ? value1 : value1 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples.setFloat32(requestedSamplesIndex++ * 4,0,true);
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		var pos = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2.0);
		if(pos % 2 != 0) {
			++pos;
		}
		var value1 = Math.ceil((this.data.byteLength >> 2) * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a = pos < b ? pos : b;
		this.myPosition = a > 0 ? a : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = true;
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			while(_g < length) samples.setFloat32(_g++ * 4,0,true);
			return;
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,get_position: function() {
		return 0.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = 2;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = true;
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = 2;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = 1;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = 0;
		}
	}
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,__class__: kha_audio2_VirtualStreamChannel
};
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = true;
kha_graphics1_Graphics.__isInterface__ = true;
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = true;
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,popTransformation: function() {
		this.transformationIndex--;
		if(this.transformationIndex == -1) {
			throw haxe_Exception.thrown("There is no transformation matrix to remove, check your push/popTransformation code");
		}
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,pipe: null
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,__class__: kha_graphics2_Graphics
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = true;
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_GraphicsExtension = function() { };
$hxClasses["kha.graphics2.GraphicsExtension"] = kha_graphics2_GraphicsExtension;
kha_graphics2_GraphicsExtension.__name__ = true;
kha_graphics2_GraphicsExtension.drawCircle = function(g2,cx,cy,radius,strength,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(strength == null) {
		strength = 1;
	}
	if(kha_SystemImpl.gl == null) {
		radius -= strength / 2;
		g2.drawCircle(cx,cy,radius,strength);
		return;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		++_g;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.drawInnerLine = function(g2,x1,y1,x2,y2,strength) {
	var side = y2 > y1 ? 1 : 0;
	if(y2 == y1) {
		side = x2 - x1 > 0 ? 1 : 0;
	}
	var vec_x = 0;
	var vec_y = 0;
	if(y2 == y1) {
		vec_x = 0;
		vec_y = -1;
	} else {
		var y = -(x2 - x1) / (y2 - y1);
		if(y == null) {
			y = 0;
		}
		vec_x = 1;
		vec_y = y;
	}
	var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
	if(currentLength != 0) {
		var mul = strength / currentLength;
		vec_x *= mul;
		vec_y *= mul;
	}
	var x = x1 + side * vec_x;
	var y = y1 + side * vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p1_x = x;
	var p1_y = y;
	var x = x2 + side * vec_x;
	var y = y2 + side * vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p2_x = x;
	var p2_y = y;
	var x = p1_x - vec_x;
	var y = p1_y - vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var p3_x = x;
	var p3_y = y;
	var x = p2_x - vec_x;
	var y = p2_y - vec_y;
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	g2.fillTriangle(p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	g2.fillTriangle(p3_x,p3_y,p2_x,p2_y,x,y);
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = true;
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = true;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$_$buf = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__buf"] = kha_graphics2_truetype_Stbtt_$_$buf;
kha_graphics2_truetype_Stbtt_$_$buf.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$buf.prototype = {
	data: null
	,cursor: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$buf
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = true;
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = true;
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,gpos: null
	,index_map: null
	,indexToLocFormat: null
	,cff: null
	,charstrings: null
	,gsubrs: null
	,subrs: null
	,fontdicts: null
	,fdselect: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = true;
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,cx1: null
	,cy1: null
	,type: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_Stbtt_$_$csctx = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__csctx"] = kha_graphics2_truetype_Stbtt_$_$csctx;
kha_graphics2_truetype_Stbtt_$_$csctx.__name__ = true;
kha_graphics2_truetype_Stbtt_$_$csctx.prototype = {
	bounds: null
	,started: null
	,first_x: null
	,first_y: null
	,x: null
	,y: null
	,min_x: null
	,min_y: null
	,max_x: null
	,max_y: null
	,pvertices: null
	,num_vertices: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$csctx
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = true;
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c0 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c0 = HxOverrides.cca("OTTO",0);
	var c1 = HxOverrides.cca("OTTO",1);
	var c2 = HxOverrides.cca("OTTO",2);
	var c3 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c0 = HxOverrides.cca("true",0);
	var c1 = HxOverrides.cca("true",1);
	var c2 = HxOverrides.cca("true",2);
	var c3 = HxOverrides.cca("true",3);
	if(font.readU8(0) == c0 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var num_tables = data.readU8(pos + 1) | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	while(_g < num_tables) {
		var loc = tabledir + 16 * _g++;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos = loc + 8;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = data.readU8(pos1);
			var ch2 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			return data.readU8(pos1 + 3) | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var ch1 = font_collection.readU8(4);
		var ch2 = font_collection.readU8(5);
		var ch3 = font_collection.readU8(6);
		if((font_collection.readU8(7) | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var ch1 = font_collection.readU8(4);
			var ch2 = font_collection.readU8(5);
			var ch3 = font_collection.readU8(6);
			tmp = (font_collection.readU8(7) | ch3 << 8 | ch2 << 16 | ch1 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var ch1 = font_collection.readU8(8);
			var ch2 = font_collection.readU8(9);
			var ch3 = font_collection.readU8(10);
			if(index >= (font_collection.readU8(11) | ch3 << 8 | ch2 << 16 | ch1 << 24)) {
				return -1;
			}
			var pos = 12 + index * 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = font_collection.readU8(pos1);
			var ch2 = font_collection.readU8(pos1 + 1);
			var ch3 = font_collection.readU8(pos1 + 2);
			return font_collection.readU8(pos1 + 3) | ch3 << 8 | ch2 << 16 | ch1 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	info.cff = r;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	info.gpos = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"GPOS");
	if(cmap == 0 || info.head == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	if(info.glyf != 0) {
		if(info.loca == 0) {
			return false;
		}
	} else {
		var topdict;
		var topdictidx;
		var cstype = [2];
		var charstrings = [0];
		var fdarrayoff = [0];
		var fdselectoff = [0];
		var cff = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"CFF ");
		if(cff == 0) {
			return false;
		}
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		info.fontdicts = r;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		info.fdselect = r;
		var cff_data = data.sub(cff,data.get_length() - cff);
		var size = cff_data.get_length();
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		if(size >= 1073741824) {
			throw haxe_Exception.thrown("Error");
		}
		r.data = cff_data;
		r.cursor = 0;
		info.cff = r;
		var b = info.cff;
		var o = b.cursor + 2;
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var o;
		if(b.cursor >= b.data.get_length()) {
			o = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			o = b.data.readU8(pos);
		}
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				++_g;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r.data = b.data.sub(start,s);
			}
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				++_g;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				topdictidx = r;
			} else {
				r.data = b.data.sub(start,s);
				topdictidx = r;
			}
		} else {
			topdictidx = b;
		}
		if(0 > topdictidx.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdictidx.cursor = 0 > topdictidx.data.get_length() ? topdictidx.data.get_length() : 0;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var offsize;
		if(topdictidx.cursor >= topdictidx.data.get_length()) {
			offsize = 0;
		} else {
			var pos = topdictidx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			offsize = topdictidx.data.readU8(pos);
		}
		if(0 >= count) {
			throw haxe_Exception.thrown("Error");
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var o = topdictidx.cursor + 0 * offsize;
		if(o > topdictidx.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		topdictidx.cursor = o > topdictidx.data.get_length() || o < 0 ? topdictidx.data.get_length() : o;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			++_g;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var start = v;
		var v = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw haxe_Exception.thrown("Error");
		}
		var _g = 0;
		var _g1 = offsize;
		while(_g < _g1) {
			++_g;
			var v1;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v1 = 0;
			} else {
				var pos = topdictidx.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = topdictidx.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var o = 2 + (count + 1) * offsize + start;
		var s = v - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		if(o < 0 || s < 0 || o > topdictidx.data.get_length() || s > topdictidx.data.get_length() - o) {
			topdict = r;
		} else {
			r.data = topdictidx.data.sub(o,s);
			topdict = r;
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				++_g;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r.data = b.data.sub(start,s);
			}
		}
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var tmp;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				++_g;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				tmp = r;
			} else {
				r.data = b.data.sub(start,s);
				tmp = r;
			}
		} else {
			tmp = b;
		}
		info.gsubrs = tmp;
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var _g = 0;
							while(_g < 2) {
								++_g;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									topdict.data.readU8(pos6);
								}
							}
						} else if(b01 == 29) {
							var _g1 = 0;
							while(_g1 < 4) {
								++_g1;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									topdict.data.readU8(pos7);
								}
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 17) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r;
				} else {
					r.data = topdict.data.sub(start,s);
					ret = r;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r;
			} else {
				r.data = topdict.data.sub(0,0);
				operands = r;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				while(_g < 2) {
					++_g;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g1 = 0;
				while(_g1 < 4) {
					++_g1;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			charstrings[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var _g = 0;
							while(_g < 2) {
								++_g;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									topdict.data.readU8(pos6);
								}
							}
						} else if(b01 == 29) {
							var _g1 = 0;
							while(_g1 < 4) {
								++_g1;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									topdict.data.readU8(pos7);
								}
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 262) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r;
				} else {
					r.data = topdict.data.sub(start,s);
					ret = r;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r;
			} else {
				r.data = topdict.data.sub(0,0);
				operands = r;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				while(_g < 2) {
					++_g;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g1 = 0;
				while(_g1 < 4) {
					++_g1;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			cstype[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var _g = 0;
							while(_g < 2) {
								++_g;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									topdict.data.readU8(pos6);
								}
							}
						} else if(b01 == 29) {
							var _g1 = 0;
							while(_g1 < 4) {
								++_g1;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									topdict.data.readU8(pos7);
								}
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 292) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r;
				} else {
					r.data = topdict.data.sub(start,s);
					ret = r;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r;
			} else {
				r.data = topdict.data.sub(0,0);
				operands = r;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				while(_g < 2) {
					++_g;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g1 = 0;
				while(_g1 < 4) {
					++_g1;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			fdarrayoff[i] = tmp;
			++i;
		}
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var _g = 0;
							while(_g < 2) {
								++_g;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									topdict.data.readU8(pos6);
								}
							}
						} else if(b01 == 29) {
							var _g1 = 0;
							while(_g1 < 4) {
								++_g1;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									topdict.data.readU8(pos7);
								}
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 293) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r;
				} else {
					r.data = topdict.data.sub(start,s);
					ret = r;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r;
			} else {
				r.data = topdict.data.sub(0,0);
				operands = r;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				while(_g < 2) {
					++_g;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g1 = 0;
				while(_g1 < 4) {
					++_g1;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			fdselectoff[i] = tmp;
			++i;
		}
		var subrsoff = [0];
		var private_loc = [0,0];
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw haxe_Exception.thrown("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start = topdict.cursor;
			var op;
			while(true) {
				var tmp;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp = 0;
				} else {
					var pos = topdict.cursor;
					if(pos == null) {
						pos = 0;
					}
					tmp = topdict.data.readU8(pos);
				}
				if(!(tmp >= 28)) {
					break;
				}
				var v;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos1 = topdict.cursor;
					if(pos1 == null) {
						pos1 = 0;
					}
					b0 = topdict.data.readU8(pos1);
				}
				if(b0 < 28) {
					throw haxe_Exception.thrown("Error");
				}
				if(b0 == 30) {
					var o = topdict.cursor + 1;
					if(o > topdict.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					topdict.cursor = o > topdict.data.get_length() || o < 0 ? topdict.data.get_length() : o;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v = 0;
						} else {
							var pos2 = topdict.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							v = topdict.data.readU8(pos2);
						}
						if((v & 15) == 15 || v >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos3 = topdict.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						b01 = topdict.data.readU8(pos3);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos4 = topdict.cursor++;
								if(pos4 == null) {
									pos4 = 0;
								}
								topdict.data.readU8(pos4);
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos5 = topdict.cursor++;
								if(pos5 == null) {
									pos5 = 0;
								}
								topdict.data.readU8(pos5);
							}
						} else if(b01 == 28) {
							var _g = 0;
							while(_g < 2) {
								++_g;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos6 = topdict.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									topdict.data.readU8(pos6);
								}
							}
						} else if(b01 == 29) {
							var _g1 = 0;
							while(_g1 < 4) {
								++_g1;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos7 = topdict.cursor++;
									if(pos7 == null) {
										pos7 = 0;
									}
									topdict.data.readU8(pos7);
								}
							}
						} else {
							throw haxe_Exception.thrown("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos8 = topdict.cursor++;
				if(pos8 == null) {
					pos8 = 0;
				}
				op = topdict.data.readU8(pos8);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos9 = topdict.cursor++;
					if(pos9 == null) {
						pos9 = 0;
					}
					op1 = topdict.data.readU8(pos9);
				}
				op = op1 | 256;
			}
			if(op == 18) {
				var s = end - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(start < 0 || s < 0 || start > topdict.data.get_length() || s > topdict.data.get_length() - start) {
					ret = r;
				} else {
					r.data = topdict.data.sub(start,s);
					ret = r;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r;
			} else {
				r.data = topdict.data.sub(0,0);
				operands = r;
			}
		}
		while(i < 2 && operands.cursor < operands.data.get_length()) {
			var b0;
			if(operands.cursor >= operands.data.get_length()) {
				b0 = 0;
			} else {
				var pos = operands.cursor++;
				if(pos == null) {
					pos = 0;
				}
				b0 = operands.data.readU8(pos);
			}
			var tmp;
			if(b0 >= 32 && b0 <= 246) {
				tmp = b0 - 139;
			} else if(b0 >= 247 && b0 <= 250) {
				var tmp1;
				if(operands.cursor >= operands.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos1 = operands.cursor++;
					if(pos1 == null) {
						pos1 = 0;
					}
					tmp1 = operands.data.readU8(pos1);
				}
				tmp = (b0 - 247) * 256 + tmp1 + 108;
			} else if(b0 >= 251 && b0 <= 254) {
				var tmp2;
				if(operands.cursor >= operands.data.get_length()) {
					tmp2 = 0;
				} else {
					var pos2 = operands.cursor++;
					if(pos2 == null) {
						pos2 = 0;
					}
					tmp2 = operands.data.readU8(pos2);
				}
				tmp = -(b0 - 251) * 256 - tmp2 - 108;
			} else if(b0 == 28) {
				var v = 0;
				var _g = 0;
				while(_g < 2) {
					++_g;
					var v1;
					if(operands.cursor >= operands.data.get_length()) {
						v1 = 0;
					} else {
						var pos3 = operands.cursor++;
						if(pos3 == null) {
							pos3 = 0;
						}
						v1 = operands.data.readU8(pos3);
					}
					v = v << 8 | v1;
				}
				tmp = v;
			} else if(b0 == 29) {
				var v2 = 0;
				var _g1 = 0;
				while(_g1 < 4) {
					++_g1;
					var v3;
					if(operands.cursor >= operands.data.get_length()) {
						v3 = 0;
					} else {
						var pos4 = operands.cursor++;
						if(pos4 == null) {
							pos4 = 0;
						}
						v3 = operands.data.readU8(pos4);
					}
					v2 = v2 << 8 | v3;
				}
				tmp = v2;
			} else {
				throw haxe_Exception.thrown("Error");
			}
			private_loc[i] = tmp;
			++i;
		}
		var tmp;
		if(private_loc[1] == 0 || private_loc[0] == 0) {
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			tmp = r;
		} else {
			var o = private_loc[1];
			var s = private_loc[0];
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var pdict;
			if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
				pdict = r;
			} else {
				r.data = b.data.sub(o,s);
				pdict = r;
			}
			var i = 0;
			if(0 > pdict.data.get_length()) {
				throw haxe_Exception.thrown("Error");
			}
			pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
			var ret = null;
			while(pdict.cursor < pdict.data.get_length()) {
				var start = pdict.cursor;
				var op;
				while(true) {
					var tmp1;
					if(pdict.cursor >= pdict.data.get_length()) {
						tmp1 = 0;
					} else {
						var pos = pdict.cursor;
						if(pos == null) {
							pos = 0;
						}
						tmp1 = pdict.data.readU8(pos);
					}
					if(!(tmp1 >= 28)) {
						break;
					}
					var v;
					var b0;
					if(pdict.cursor >= pdict.data.get_length()) {
						b0 = 0;
					} else {
						var pos1 = pdict.cursor;
						if(pos1 == null) {
							pos1 = 0;
						}
						b0 = pdict.data.readU8(pos1);
					}
					if(b0 < 28) {
						throw haxe_Exception.thrown("Error");
					}
					if(b0 == 30) {
						var o = pdict.cursor + 1;
						if(o > pdict.data.get_length() || o < 0) {
							throw haxe_Exception.thrown("Error");
						}
						pdict.cursor = o > pdict.data.get_length() || o < 0 ? pdict.data.get_length() : o;
						while(pdict.cursor < pdict.data.get_length()) {
							if(pdict.cursor >= pdict.data.get_length()) {
								v = 0;
							} else {
								var pos2 = pdict.cursor++;
								if(pos2 == null) {
									pos2 = 0;
								}
								v = pdict.data.readU8(pos2);
							}
							if((v & 15) == 15 || v >> 4 == 15) {
								break;
							}
						}
					} else {
						var b01;
						if(pdict.cursor >= pdict.data.get_length()) {
							b01 = 0;
						} else {
							var pos3 = pdict.cursor++;
							if(pos3 == null) {
								pos3 = 0;
							}
							b01 = pdict.data.readU8(pos3);
						}
						if(!(b01 >= 32 && b01 <= 246)) {
							if(b01 >= 247 && b01 <= 250) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos4 = pdict.cursor++;
									if(pos4 == null) {
										pos4 = 0;
									}
									pdict.data.readU8(pos4);
								}
							} else if(b01 >= 251 && b01 <= 254) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos5 = pdict.cursor++;
									if(pos5 == null) {
										pos5 = 0;
									}
									pdict.data.readU8(pos5);
								}
							} else if(b01 == 28) {
								var _g = 0;
								while(_g < 2) {
									++_g;
									if(pdict.cursor < pdict.data.get_length()) {
										var pos6 = pdict.cursor++;
										if(pos6 == null) {
											pos6 = 0;
										}
										pdict.data.readU8(pos6);
									}
								}
							} else if(b01 == 29) {
								var _g1 = 0;
								while(_g1 < 4) {
									++_g1;
									if(pdict.cursor < pdict.data.get_length()) {
										var pos7 = pdict.cursor++;
										if(pos7 == null) {
											pos7 = 0;
										}
										pdict.data.readU8(pos7);
									}
								}
							} else {
								throw haxe_Exception.thrown("Error");
							}
						}
					}
				}
				var end = pdict.cursor;
				if(pdict.cursor >= pdict.data.get_length()) {
					op = 0;
				} else {
					var pos8 = pdict.cursor++;
					if(pos8 == null) {
						pos8 = 0;
					}
					op = pdict.data.readU8(pos8);
				}
				if(op == 12) {
					var op1;
					if(pdict.cursor >= pdict.data.get_length()) {
						op1 = 0;
					} else {
						var pos9 = pdict.cursor++;
						if(pos9 == null) {
							pos9 = 0;
						}
						op1 = pdict.data.readU8(pos9);
					}
					op = op1 | 256;
				}
				if(op == 19) {
					var s = end - start;
					var r = new kha_graphics2_truetype_Stbtt_$_$buf();
					r.data = null;
					r.cursor = 0;
					if(start < 0 || s < 0 || start > pdict.data.get_length() || s > pdict.data.get_length() - start) {
						ret = r;
					} else {
						r.data = pdict.data.sub(start,s);
						ret = r;
					}
					break;
				}
			}
			var operands;
			if(ret != null) {
				operands = ret;
			} else {
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
					operands = r;
				} else {
					r.data = pdict.data.sub(0,0);
					operands = r;
				}
			}
			while(i < 1 && operands.cursor < operands.data.get_length()) {
				var b0;
				if(operands.cursor >= operands.data.get_length()) {
					b0 = 0;
				} else {
					var pos = operands.cursor++;
					if(pos == null) {
						pos = 0;
					}
					b0 = operands.data.readU8(pos);
				}
				var tmp1;
				if(b0 >= 32 && b0 <= 246) {
					tmp1 = b0 - 139;
				} else if(b0 >= 247 && b0 <= 250) {
					var tmp2;
					if(operands.cursor >= operands.data.get_length()) {
						tmp2 = 0;
					} else {
						var pos1 = operands.cursor++;
						if(pos1 == null) {
							pos1 = 0;
						}
						tmp2 = operands.data.readU8(pos1);
					}
					tmp1 = (b0 - 247) * 256 + tmp2 + 108;
				} else if(b0 >= 251 && b0 <= 254) {
					var tmp3;
					if(operands.cursor >= operands.data.get_length()) {
						tmp3 = 0;
					} else {
						var pos2 = operands.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						tmp3 = operands.data.readU8(pos2);
					}
					tmp1 = -(b0 - 251) * 256 - tmp3 - 108;
				} else if(b0 == 28) {
					var v = 0;
					var _g = 0;
					while(_g < 2) {
						++_g;
						var v1;
						if(operands.cursor >= operands.data.get_length()) {
							v1 = 0;
						} else {
							var pos3 = operands.cursor++;
							if(pos3 == null) {
								pos3 = 0;
							}
							v1 = operands.data.readU8(pos3);
						}
						v = v << 8 | v1;
					}
					tmp1 = v;
				} else if(b0 == 29) {
					var v2 = 0;
					var _g1 = 0;
					while(_g1 < 4) {
						++_g1;
						var v3;
						if(operands.cursor >= operands.data.get_length()) {
							v3 = 0;
						} else {
							var pos4 = operands.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
							v3 = operands.data.readU8(pos4);
						}
						v2 = v2 << 8 | v3;
					}
					tmp1 = v2;
				} else {
					throw haxe_Exception.thrown("Error");
				}
				subrsoff[i] = tmp1;
				++i;
			}
			if(subrsoff[0] == 0) {
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				tmp = r;
			} else {
				var o = private_loc[1] + subrsoff[0];
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var start = b.cursor;
				var v = 0;
				var _g = 0;
				while(_g < 2) {
					++_g;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var count = v;
				if(count > 0) {
					var offsize;
					if(b.cursor >= b.data.get_length()) {
						offsize = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						offsize = b.data.readU8(pos);
					}
					if(!(offsize >= 1 && offsize <= 4)) {
						throw haxe_Exception.thrown("Error");
					}
					var o = b.cursor + offsize * count;
					if(o > b.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
					var v = 0;
					if(!(offsize >= 1 && offsize <= 4)) {
						throw haxe_Exception.thrown("Error");
					}
					var _g = 0;
					var _g1 = offsize;
					while(_g < _g1) {
						++_g;
						var v1;
						if(b.cursor >= b.data.get_length()) {
							v1 = 0;
						} else {
							var pos = b.cursor++;
							if(pos == null) {
								pos = 0;
							}
							v1 = b.data.readU8(pos);
						}
						v = v << 8 | v1;
					}
					var o = b.cursor + (v - 1);
					if(o > b.data.get_length() || o < 0) {
						throw haxe_Exception.thrown("Error");
					}
					b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
					var s = b.cursor - start;
					var r = new kha_graphics2_truetype_Stbtt_$_$buf();
					r.data = null;
					r.cursor = 0;
					if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
						tmp = r;
					} else {
						r.data = b.data.sub(start,s);
						tmp = r;
					}
				} else {
					tmp = b;
				}
			}
		}
		info.subrs = tmp;
		if(cstype[0] != 2) {
			return false;
		}
		if(charstrings[0] == 0) {
			return false;
		}
		if(fdarrayoff[0] != 0) {
			if(fdselectoff[0] == 0) {
				return false;
			}
			var o = fdarrayoff[0];
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var start = b.cursor;
			var v = 0;
			var _g = 0;
			while(_g < 2) {
				++_g;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var count = v;
			var tmp;
			if(count > 0) {
				var offsize;
				if(b.cursor >= b.data.get_length()) {
					offsize = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					offsize = b.data.readU8(pos);
				}
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o = b.cursor + offsize * count;
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var v = 0;
				if(!(offsize >= 1 && offsize <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g = 0;
				var _g1 = offsize;
				while(_g < _g1) {
					++_g;
					var v1;
					if(b.cursor >= b.data.get_length()) {
						v1 = 0;
					} else {
						var pos = b.cursor++;
						if(pos == null) {
							pos = 0;
						}
						v1 = b.data.readU8(pos);
					}
					v = v << 8 | v1;
				}
				var o = b.cursor + (v - 1);
				if(o > b.data.get_length() || o < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				var s = b.cursor - start;
				var r = new kha_graphics2_truetype_Stbtt_$_$buf();
				r.data = null;
				r.cursor = 0;
				if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
					tmp = r;
				} else {
					r.data = b.data.sub(start,s);
					tmp = r;
				}
			} else {
				tmp = b;
			}
			info.fontdicts = tmp;
			var o = fdselectoff[0];
			var s = b.data.get_length() - fdselectoff[0];
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			var tmp;
			if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
				tmp = r;
			} else {
				r.data = b.data.sub(o,s);
				tmp = r;
			}
			info.fdselect = tmp;
		}
		var o = charstrings[0];
		if(o > b.data.get_length() || o < 0) {
			throw haxe_Exception.thrown("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				v1 = b.data.readU8(pos);
			}
			v = v << 8 | v1;
		}
		var count = v;
		var tmp;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos = b.cursor++;
				if(pos == null) {
					pos = 0;
				}
				offsize = b.data.readU8(pos);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var o = b.cursor + offsize * count;
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var v = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw haxe_Exception.thrown("Error");
			}
			var _g = 0;
			var _g1 = offsize;
			while(_g < _g1) {
				++_g;
				var v1;
				if(b.cursor >= b.data.get_length()) {
					v1 = 0;
				} else {
					var pos = b.cursor++;
					if(pos == null) {
						pos = 0;
					}
					v1 = b.data.readU8(pos);
				}
				v = v << 8 | v1;
			}
			var o = b.cursor + (v - 1);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			var s = b.cursor - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				tmp = r;
			} else {
				r.data = b.data.sub(start,s);
				tmp = r;
			}
		} else {
			tmp = b;
		}
		info.charstrings = tmp;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		info.numGlyphs = data.readU8(pos + 1) | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos = cmap + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var numTables = data.readU8(pos + 1) | ch1 << 8;
	info.index_map = 0;
	var _g = 0;
	while(_g < numTables) {
		var encoding_record = cmap + 4 + 8 * _g++;
		var pos = encoding_record;
		if(encoding_record == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		switch(data.readU8(pos + 1) | ch1 << 8) {
		case 0:
			var pos1 = encoding_record + 4;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch2 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			info.index_map = cmap + (data.readU8(pos2 + 3) | ch3 << 8 | ch2 << 16 | ch11 << 24);
			break;
		case 3:
			var pos3 = encoding_record + 2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch12 = data.readU8(pos3);
			switch(data.readU8(pos3 + 1) | ch12 << 8) {
			case 1:case 10:
				var pos4 = encoding_record + 4;
				if(pos4 == null) {
					pos4 = 0;
				}
				var pos5 = pos4;
				if(pos5 == null) {
					pos5 = 0;
				}
				var ch13 = data.readU8(pos5);
				var ch21 = data.readU8(pos5 + 1);
				var ch31 = data.readU8(pos5 + 2);
				info.index_map = cmap + (data.readU8(pos5 + 3) | ch31 << 8 | ch21 << 16 | ch13 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos = info.head + 50;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	info.indexToLocFormat = data.readU8(pos + 1) | ch1 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(index_map == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var format = data.readU8(pos + 1) | ch1 << 8;
	if(format == 0) {
		var pos = index_map + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		if(unicode_codepoint < (data.readU8(pos + 1) | ch1 << 8) - 6) {
			var pos = index_map + 6 + unicode_codepoint;
			if(pos == null) {
				pos = 0;
			}
			return data.readU8(pos);
		}
		return 0;
	} else if(format == 6) {
		var pos = index_map + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var first = data.readU8(pos + 1) | ch1 << 8;
		var pos = index_map + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var count = data.readU8(pos + 1) | ch1 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			return data.readU8(pos + 1) | ch1 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw haxe_Exception.thrown("Error");
	} else if(format == 4) {
		var pos = index_map + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var segcount = (data.readU8(pos + 1) | ch1 << 8) >> 1;
		var pos = index_map + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var searchRange = (data.readU8(pos + 1) | ch1 << 8) >> 1;
		var pos = index_map + 10;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var entrySelector = data.readU8(pos + 1) | ch1 << 8;
		var pos = index_map + 12;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var rangeShift = (data.readU8(pos + 1) | ch1 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos = endCount + rangeShift * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		if(unicode_codepoint >= (data.readU8(pos + 1) | ch1 << 8)) {
			search = endCount + rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos = search + searchRange * 2;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			if(unicode_codepoint > (data.readU8(pos + 1) | ch1 << 8)) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos = endCount + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		if(unicode_codepoint > (data.readU8(pos + 1) | ch1 << 8)) {
			throw haxe_Exception.thrown("Error");
		}
		var pos = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var start = data.readU8(pos + 1) | ch1 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var offset = data.readU8(pos + 1) | ch1 << 8;
		if(offset == 0) {
			var pos = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var n = data.readU8(pos + 1) | ch1 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		return data.readU8(pos + 1) | ch1 << 8;
	} else if(format == 12 || format == 13) {
		var pos = index_map + 12;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = data.readU8(pos1);
		var ch2 = data.readU8(pos1 + 1);
		var ch3 = data.readU8(pos1 + 2);
		var low = 0;
		var high = data.readU8(pos1 + 3) | ch3 << 8 | ch2 << 16 | ch1 << 24;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos = index_map + 16 + mid * 12;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch1 = data.readU8(pos1);
			var ch2 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var start_char = data.readU8(pos1 + 3) | ch3 << 8 | ch2 << 16 | ch1 << 24;
			var pos2 = index_map + 16 + mid * 12 + 4;
			if(pos2 == null) {
				pos2 = 0;
			}
			var pos3 = pos2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch11 = data.readU8(pos3);
			var ch21 = data.readU8(pos3 + 1);
			var ch31 = data.readU8(pos3 + 2);
			var end_char = data.readU8(pos3 + 3) | ch31 << 8 | ch21 << 16 | ch11 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos4 = index_map + 16 + mid * 12 + 8;
				if(pos4 == null) {
					pos4 = 0;
				}
				var pos5 = pos4;
				if(pos5 == null) {
					pos5 = 0;
				}
				var ch12 = data.readU8(pos5);
				var ch22 = data.readU8(pos5 + 1);
				var ch32 = data.readU8(pos5 + 2);
				var start_glyph = data.readU8(pos5 + 3) | ch32 << 8 | ch22 << 16 | ch12 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw haxe_Exception.thrown("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(!(info.cff.data == null || info.cff.data.get_length() == 0)) {
		throw haxe_Exception.thrown("Error");
	}
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		g1 = info1 + (p.readU8(pos + 1) | ch1 << 8) * 2;
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2 + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		g2 = info1 + (p.readU8(pos + 1) | ch1 << 8) * 2;
	} else {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = p.readU8(pos1);
		var ch2 = p.readU8(pos1 + 1);
		var ch3 = p.readU8(pos1 + 2);
		g1 = info1 + (p.readU8(pos1 + 3) | ch3 << 8 | ch2 << 16 | ch1 << 24);
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 4 + 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = p.readU8(pos1);
		var ch2 = p.readU8(pos1 + 1);
		var ch3 = p.readU8(pos1 + 2);
		g2 = info1 + (p.readU8(pos1 + 3) | ch3 << 8 | ch2 << 16 | ch1 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,rect);
	} else {
		var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
		if(g < 0) {
			return false;
		}
		var p = info.data;
		var pos = g + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		rect.y0 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 6;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		rect.x1 = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = g + 8;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		rect.y1 = (n & 32768) != 0 ? n - 65536 : n;
	}
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	while(_g < count) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(g == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var n = data.readU8(pos + 1) | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + (data.readU8(pos + 1) | ch1 << 8);
		var pos = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var n = 1 + (data.readU8(pos + 1) | ch1 << 8);
		var m = n + 2 * numberOfContours;
		vertices = new Array(m);
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) vertices[_g++] = new kha_graphics2_truetype_Stbtt_$vertex();
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i].type = flags;
		}
		var x = 0;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			flags = vertices[off + i].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var n1 = data.readU8(pointsIndex + 1) | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i].x = x;
		}
		var y = 0;
		var _g = 0;
		while(_g < n) {
			var i = _g++;
			flags = vertices[off + i].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value;
				var ch1 = data.readU8(pointsIndex);
				var n1 = data.readU8(pointsIndex + 1) | ch1 << 8;
				if((n1 & 32768) != 0) {
					value = n1 - 65536;
				} else {
					value = n1;
				}
				y += value;
				pointsIndex += 2;
			}
			vertices[off + i].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = 0;
		var cy = 0;
		var cx = 0;
		var sy = 0;
		var sx = 0;
		var i = 0;
		while(i < n) {
			flags = vertices[off + i].type;
			x = vertices[off + i].x;
			y = vertices[off + i].y;
			if(next_move == i) {
				if(i != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i + 1].type & 1) == 0) {
						sx = x + vertices[off + i + 1].x >> 1;
						sy = y + vertices[off + i + 1].y >> 1;
					} else {
						sx = vertices[off + i + 1].x;
						sy = vertices[off + i + 1].y;
						++i;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos = endPtsOfContoursOffset + j * 2;
				if(pos == null) {
					pos = 0;
				}
				var ch1 = data.readU8(pos);
				next_move = 1 + (data.readU8(pos + 1) | ch1 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours < 0) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos = compIndex;
			if(pos == null) {
				pos = 0;
			}
			var ch1 = data.readU8(pos);
			var n = data.readU8(pos + 1) | ch1 << 8;
			var flags = (n & 32768) != 0 ? n - 65536 : n;
			var pos1 = compIndex += 2;
			if(pos1 == null) {
				pos1 = 0;
			}
			var ch11 = data.readU8(pos1);
			var n1 = data.readU8(pos1 + 1) | ch11 << 8;
			compIndex += 2;
			if((flags & 2) != 0) {
				if((flags & 1) != 0) {
					var pos2 = compIndex;
					if(pos2 == null) {
						pos2 = 0;
					}
					var ch12 = data.readU8(pos2);
					var n2 = data.readU8(pos2 + 1) | ch12 << 8;
					mtx4 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
					var pos3 = compIndex += 2;
					if(pos3 == null) {
						pos3 = 0;
					}
					var ch13 = data.readU8(pos3);
					var n3 = data.readU8(pos3 + 1) | ch13 << 8;
					mtx5 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
					compIndex += 2;
				} else {
					var pos4 = compIndex;
					if(pos4 == null) {
						pos4 = 0;
					}
					var n4 = data.readU8(pos4);
					mtx4 = n4 >= 128 ? n4 - 256 : n4;
					var pos5 = ++compIndex;
					if(pos5 == null) {
						pos5 = 0;
					}
					var n5 = data.readU8(pos5);
					mtx5 = n5 >= 128 ? n5 - 256 : n5;
					++compIndex;
				}
			} else {
				throw haxe_Exception.thrown("Error");
			}
			if((flags & 8) != 0) {
				var pos6 = compIndex;
				if(pos6 == null) {
					pos6 = 0;
				}
				var ch14 = data.readU8(pos6);
				var n6 = data.readU8(pos6 + 1) | ch14 << 8;
				mtx3 = ((n6 & 32768) != 0 ? n6 - 65536 : n6) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags & 64) != 0) {
				var pos7 = compIndex;
				if(pos7 == null) {
					pos7 = 0;
				}
				var ch15 = data.readU8(pos7);
				var n7 = data.readU8(pos7 + 1) | ch15 << 8;
				mtx0 = ((n7 & 32768) != 0 ? n7 - 65536 : n7) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos8 = compIndex;
				if(pos8 == null) {
					pos8 = 0;
				}
				var ch16 = data.readU8(pos8);
				var n8 = data.readU8(pos8 + 1) | ch16 << 8;
				mtx3 = ((n8 & 32768) != 0 ? n8 - 65536 : n8) / 16384.0;
				compIndex += 2;
			} else if((flags & 128) != 0) {
				var pos9 = compIndex;
				if(pos9 == null) {
					pos9 = 0;
				}
				var ch17 = data.readU8(pos9);
				var n9 = data.readU8(pos9 + 1) | ch17 << 8;
				mtx0 = ((n9 & 32768) != 0 ? n9 - 65536 : n9) / 16384.0;
				var pos10 = compIndex += 2;
				if(pos10 == null) {
					pos10 = 0;
				}
				var ch18 = data.readU8(pos10);
				var n10 = data.readU8(pos10 + 1) | ch18 << 8;
				mtx1 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				var pos11 = compIndex += 2;
				if(pos11 == null) {
					pos11 = 0;
				}
				var ch19 = data.readU8(pos11);
				var n11 = data.readU8(pos11 + 1) | ch19 << 8;
				mtx2 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				var pos12 = compIndex += 2;
				if(pos12 == null) {
					pos12 = 0;
				}
				var ch110 = data.readU8(pos12);
				var n12 = data.readU8(pos12 + 1) | ch110 << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			}
			var m = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n13 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,(n1 & 32768) != 0 ? n1 - 65536 : n1);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g = 0;
				var _g1 = comp_num_verts;
				while(_g < _g1) {
					var v = comp_verts[_g++];
					var x = v.x;
					var y = v.y;
					v.x = m * (mtx0 * x + mtx2 * y + mtx4) | 0;
					v.y = n13 * (mtx1 * x + mtx3 * y + mtx5) | 0;
					x = v.cx;
					y = v.cy;
					v.cx = m * (mtx0 * x + mtx2 * y + mtx4) | 0;
					v.cy = n13 * (mtx1 * x + mtx3 * y + mtx5) | 0;
				}
				tmp = new Array(num_vertices + comp_num_verts);
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags & 32;
		}
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw haxe_Exception.thrown("Error");
	}
	if(num_vertices < vertices.length) {
		var tmp = new Array(num_vertices);
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
		return tmp;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__run_charstring = function(info,glyph_index,c) {
	var in_header = true;
	var maskbits = 0;
	var subr_stack_height = 0;
	var sp = 0;
	var v;
	var i;
	var b0;
	var has_subrs = false;
	var clear_stack;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 48) {
		++_g1;
		_g.push(0);
	}
	var _g1 = [];
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	var subrs = info.subrs;
	var b;
	var f;
	var b1 = info.charstrings;
	if(0 > b1.data.get_length()) {
		throw haxe_Exception.thrown("Error");
	}
	b1.cursor = 0 > b1.data.get_length() ? b1.data.get_length() : 0;
	var v1 = 0;
	var _g2 = 0;
	while(_g2 < 2) {
		++_g2;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var count = v1;
	var offsize;
	if(b1.cursor >= b1.data.get_length()) {
		offsize = 0;
	} else {
		var pos = b1.cursor++;
		if(pos == null) {
			pos = 0;
		}
		offsize = b1.data.readU8(pos);
	}
	if(!(glyph_index >= 0 && glyph_index < count)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var o = b1.cursor + glyph_index * offsize;
	if(o > b1.data.get_length() || o < 0) {
		throw haxe_Exception.thrown("Error");
	}
	b1.cursor = o > b1.data.get_length() || o < 0 ? b1.data.get_length() : o;
	var v1 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g2 = 0;
	var _g3 = offsize;
	while(_g2 < _g3) {
		++_g2;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var start = v1;
	var v1 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw haxe_Exception.thrown("Error");
	}
	var _g2 = 0;
	var _g3 = offsize;
	while(_g2 < _g3) {
		++_g2;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var o = 2 + (count + 1) * offsize + start;
	var s = v1 - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	if(o < 0 || s < 0 || o > b1.data.get_length() || s > b1.data.get_length() - o) {
		b = r;
	} else {
		r.data = b1.data.sub(o,s);
		b = r;
	}
	while(b.cursor < b.data.get_length()) {
		i = 0;
		clear_stack = true;
		if(b.cursor >= b.data.get_length()) {
			b0 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			b0 = b.data.readU8(pos);
		}
		switch(b0) {
		case 4:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x = c.first_x | 0;
				var y = c.first_y | 0;
				if(c.bounds) {
					if(x > c.max_x || !c.started) {
						c.max_x = x;
					}
					if(y > c.max_y || !c.started) {
						c.max_y = y;
					}
					if(x < c.min_x || !c.started) {
						c.min_x = x;
					}
					if(y < c.min_y || !c.started) {
						c.min_y = y;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x,y,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x;
			c.first_y = c.y = c.y + _g[sp - 1];
			var x1 = c.x | 0;
			var y1 = c.y | 0;
			if(c.bounds) {
				if(x1 > c.max_x || !c.started) {
					c.max_x = x1;
				}
				if(y1 > c.max_y || !c.started) {
					c.max_y = y1;
				}
				if(x1 < c.min_x || !c.started) {
					c.min_x = x1;
				}
				if(y1 < c.min_y || !c.started) {
					c.min_y = y1;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x1,y1,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 5:
			if(sp < 2) {
				return false;
			}
			while(i + 1 < sp) {
				c.x += _g[i];
				c.y += _g[i + 1];
				var x2 = c.x | 0;
				var y2 = c.y | 0;
				if(c.bounds) {
					if(x2 > c.max_x || !c.started) {
						c.max_x = x2;
					}
					if(y2 > c.max_y || !c.started) {
						c.max_y = y2;
					}
					if(x2 < c.min_x || !c.started) {
						c.min_x = x2;
					}
					if(y2 < c.min_y || !c.started) {
						c.min_y = y2;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x2,y2,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			break;
		case 6:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += _g[i];
				c.y += 0;
				var x3 = c.x | 0;
				var y3 = c.y | 0;
				if(c.bounds) {
					if(x3 > c.max_x || !c.started) {
						c.max_x = x3;
					}
					if(y3 > c.max_y || !c.started) {
						c.max_y = y3;
					}
					if(x3 < c.min_x || !c.started) {
						c.min_x = x3;
					}
					if(y3 < c.min_y || !c.started) {
						c.min_y = y3;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x3,y3,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += 0;
				c.y += _g[i];
				var x4 = c.x | 0;
				var y4 = c.y | 0;
				if(c.bounds) {
					if(x4 > c.max_x || !c.started) {
						c.max_x = x4;
					}
					if(y4 > c.max_y || !c.started) {
						c.max_y = y4;
					}
					if(x4 < c.min_x || !c.started) {
						c.min_x = x4;
					}
					if(y4 < c.min_y || !c.started) {
						c.min_y = y4;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x4,y4,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 7:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += 0;
				c.y += _g[i];
				var x5 = c.x | 0;
				var y5 = c.y | 0;
				if(c.bounds) {
					if(x5 > c.max_x || !c.started) {
						c.max_x = x5;
					}
					if(y5 > c.max_y || !c.started) {
						c.max_y = y5;
					}
					if(x5 < c.min_x || !c.started) {
						c.min_x = x5;
					}
					if(y5 < c.min_y || !c.started) {
						c.min_y = y5;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x5,y5,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += _g[i];
				c.y += 0;
				var x6 = c.x | 0;
				var y6 = c.y | 0;
				if(c.bounds) {
					if(x6 > c.max_x || !c.started) {
						c.max_x = x6;
					}
					if(y6 > c.max_y || !c.started) {
						c.max_y = y6;
					}
					if(x6 < c.min_x || !c.started) {
						c.min_x = x6;
					}
					if(y6 < c.min_y || !c.started) {
						c.min_y = y6;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x6,y6,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 8:
			if(sp < 6) {
				return false;
			}
			while(i + 5 < sp) {
				var cx1 = c.x + _g[i];
				var cy1 = c.y + _g[i + 1];
				var cx2 = cx1 + _g[i + 2];
				var cy2 = cy1 + _g[i + 3];
				c.x = cx2 + _g[i + 4];
				c.y = cy2 + _g[i + 5];
				var x7 = c.x | 0;
				var y7 = c.y | 0;
				var cx = cx1 | 0;
				var cy = cy1 | 0;
				var cx11 = cx2 | 0;
				var cy11 = cy2 | 0;
				if(c.bounds) {
					if(x7 > c.max_x || !c.started) {
						c.max_x = x7;
					}
					if(y7 > c.max_y || !c.started) {
						c.max_y = y7;
					}
					if(x7 < c.min_x || !c.started) {
						c.min_x = x7;
					}
					if(y7 < c.min_y || !c.started) {
						c.min_y = y7;
					}
					c.started = true;
					if(cx > c.max_x || !c.started) {
						c.max_x = cx;
					}
					if(cy > c.max_y || !c.started) {
						c.max_y = cy;
					}
					if(cx < c.min_x || !c.started) {
						c.min_x = cx;
					}
					if(cy < c.min_y || !c.started) {
						c.min_y = cy;
					}
					c.started = true;
					if(cx11 > c.max_x || !c.started) {
						c.max_x = cx11;
					}
					if(cy11 > c.max_y || !c.started) {
						c.max_y = cy11;
					}
					if(cx11 < c.min_x || !c.started) {
						c.min_x = cx11;
					}
					if(cy11 < c.min_y || !c.started) {
						c.min_y = cy11;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x7,y7,cx,cy);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx11 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy11 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			break;
		case 11:
			if(subr_stack_height <= 0) {
				return false;
			}
			b = _g1[--subr_stack_height];
			clear_stack = false;
			break;
		case 12:
			var dx1;
			var dx2;
			var dx3;
			var dx4;
			var dx5;
			var dx6;
			var dy1;
			var dy2;
			var dy3;
			var dy4;
			var dy5;
			var dy6;
			var dx;
			var dy;
			var b1;
			if(b.cursor >= b.data.get_length()) {
				b1 = 0;
			} else {
				var pos1 = b.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				b1 = b.data.readU8(pos1);
			}
			switch(b1) {
			case 34:
				if(sp < 7) {
					return false;
				}
				dx1 = _g[0];
				dx2 = _g[1];
				dy2 = _g[2];
				dx3 = _g[3];
				dx4 = _g[4];
				dx5 = _g[5];
				dx6 = _g[6];
				var cx12 = c.x + dx1;
				var cy12 = c.y;
				var cx21 = cx12 + dx2;
				var cy21 = cy12 + dy2;
				c.x = cx21 + dx3;
				c.y = cy21;
				var x8 = c.x | 0;
				var y8 = c.y | 0;
				var cx3 = cx12 | 0;
				var cy3 = cy12 | 0;
				var cx13 = cx21 | 0;
				var cy13 = cy21 | 0;
				if(c.bounds) {
					if(x8 > c.max_x || !c.started) {
						c.max_x = x8;
					}
					if(y8 > c.max_y || !c.started) {
						c.max_y = y8;
					}
					if(x8 < c.min_x || !c.started) {
						c.min_x = x8;
					}
					if(y8 < c.min_y || !c.started) {
						c.min_y = y8;
					}
					c.started = true;
					if(cx3 > c.max_x || !c.started) {
						c.max_x = cx3;
					}
					if(cy3 > c.max_y || !c.started) {
						c.max_y = cy3;
					}
					if(cx3 < c.min_x || !c.started) {
						c.min_x = cx3;
					}
					if(cy3 < c.min_y || !c.started) {
						c.min_y = cy3;
					}
					c.started = true;
					if(cx13 > c.max_x || !c.started) {
						c.max_x = cx13;
					}
					if(cy13 > c.max_y || !c.started) {
						c.max_y = cy13;
					}
					if(cx13 < c.min_x || !c.started) {
						c.min_x = cx13;
					}
					if(cy13 < c.min_y || !c.started) {
						c.min_y = cy13;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x8,y8,cx3,cy3);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx13 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy13 , Int);
				}
				c.num_vertices++;
				var cx14 = c.x + dx4;
				var cy14 = c.y;
				var cx22 = cx14 + dx5;
				var cy22 = cy14 + -dy2;
				c.x = cx22 + dx6;
				c.y = cy22;
				var x9 = c.x | 0;
				var y9 = c.y | 0;
				var cx4 = cx14 | 0;
				var cy4 = cy14 | 0;
				var cx15 = cx22 | 0;
				var cy15 = cy22 | 0;
				if(c.bounds) {
					if(x9 > c.max_x || !c.started) {
						c.max_x = x9;
					}
					if(y9 > c.max_y || !c.started) {
						c.max_y = y9;
					}
					if(x9 < c.min_x || !c.started) {
						c.min_x = x9;
					}
					if(y9 < c.min_y || !c.started) {
						c.min_y = y9;
					}
					c.started = true;
					if(cx4 > c.max_x || !c.started) {
						c.max_x = cx4;
					}
					if(cy4 > c.max_y || !c.started) {
						c.max_y = cy4;
					}
					if(cx4 < c.min_x || !c.started) {
						c.min_x = cx4;
					}
					if(cy4 < c.min_y || !c.started) {
						c.min_y = cy4;
					}
					c.started = true;
					if(cx15 > c.max_x || !c.started) {
						c.max_x = cx15;
					}
					if(cy15 > c.max_y || !c.started) {
						c.max_y = cy15;
					}
					if(cx15 < c.min_x || !c.started) {
						c.min_x = cx15;
					}
					if(cy15 < c.min_y || !c.started) {
						c.min_y = cy15;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x9,y9,cx4,cy4);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx15 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy15 , Int);
				}
				c.num_vertices++;
				break;
			case 35:
				if(sp < 13) {
					return false;
				}
				dx1 = _g[0];
				dy1 = _g[1];
				dx2 = _g[2];
				dy2 = _g[3];
				dx3 = _g[4];
				dy3 = _g[5];
				dx4 = _g[6];
				dy4 = _g[7];
				dx5 = _g[8];
				dy5 = _g[9];
				dx6 = _g[10];
				dy6 = _g[11];
				var cx16 = c.x + dx1;
				var cy16 = c.y + dy1;
				var cx23 = cx16 + dx2;
				var cy23 = cy16 + dy2;
				c.x = cx23 + dx3;
				c.y = cy23 + dy3;
				var x10 = c.x | 0;
				var y10 = c.y | 0;
				var cx5 = cx16 | 0;
				var cy5 = cy16 | 0;
				var cx17 = cx23 | 0;
				var cy17 = cy23 | 0;
				if(c.bounds) {
					if(x10 > c.max_x || !c.started) {
						c.max_x = x10;
					}
					if(y10 > c.max_y || !c.started) {
						c.max_y = y10;
					}
					if(x10 < c.min_x || !c.started) {
						c.min_x = x10;
					}
					if(y10 < c.min_y || !c.started) {
						c.min_y = y10;
					}
					c.started = true;
					if(cx5 > c.max_x || !c.started) {
						c.max_x = cx5;
					}
					if(cy5 > c.max_y || !c.started) {
						c.max_y = cy5;
					}
					if(cx5 < c.min_x || !c.started) {
						c.min_x = cx5;
					}
					if(cy5 < c.min_y || !c.started) {
						c.min_y = cy5;
					}
					c.started = true;
					if(cx17 > c.max_x || !c.started) {
						c.max_x = cx17;
					}
					if(cy17 > c.max_y || !c.started) {
						c.max_y = cy17;
					}
					if(cx17 < c.min_x || !c.started) {
						c.min_x = cx17;
					}
					if(cy17 < c.min_y || !c.started) {
						c.min_y = cy17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x10,y10,cx5,cy5);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx17 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy17 , Int);
				}
				c.num_vertices++;
				var cx18 = c.x + dx4;
				var cy18 = c.y + dy4;
				var cx24 = cx18 + dx5;
				var cy24 = cy18 + dy5;
				c.x = cx24 + dx6;
				c.y = cy24 + dy6;
				var x11 = c.x | 0;
				var y11 = c.y | 0;
				var cx6 = cx18 | 0;
				var cy6 = cy18 | 0;
				var cx19 = cx24 | 0;
				var cy19 = cy24 | 0;
				if(c.bounds) {
					if(x11 > c.max_x || !c.started) {
						c.max_x = x11;
					}
					if(y11 > c.max_y || !c.started) {
						c.max_y = y11;
					}
					if(x11 < c.min_x || !c.started) {
						c.min_x = x11;
					}
					if(y11 < c.min_y || !c.started) {
						c.min_y = y11;
					}
					c.started = true;
					if(cx6 > c.max_x || !c.started) {
						c.max_x = cx6;
					}
					if(cy6 > c.max_y || !c.started) {
						c.max_y = cy6;
					}
					if(cx6 < c.min_x || !c.started) {
						c.min_x = cx6;
					}
					if(cy6 < c.min_y || !c.started) {
						c.min_y = cy6;
					}
					c.started = true;
					if(cx19 > c.max_x || !c.started) {
						c.max_x = cx19;
					}
					if(cy19 > c.max_y || !c.started) {
						c.max_y = cy19;
					}
					if(cx19 < c.min_x || !c.started) {
						c.min_x = cx19;
					}
					if(cy19 < c.min_y || !c.started) {
						c.min_y = cy19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x11,y11,cx6,cy6);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx19 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy19 , Int);
				}
				c.num_vertices++;
				break;
			case 36:
				if(sp < 9) {
					return false;
				}
				dx1 = _g[0];
				dy1 = _g[1];
				dx2 = _g[2];
				dy2 = _g[3];
				dx3 = _g[4];
				dx4 = _g[5];
				dx5 = _g[6];
				dy5 = _g[7];
				dx6 = _g[8];
				var cx110 = c.x + dx1;
				var cy110 = c.y + dy1;
				var cx25 = cx110 + dx2;
				var cy25 = cy110 + dy2;
				c.x = cx25 + dx3;
				c.y = cy25;
				var x12 = c.x | 0;
				var y12 = c.y | 0;
				var cx7 = cx110 | 0;
				var cy7 = cy110 | 0;
				var cx111 = cx25 | 0;
				var cy111 = cy25 | 0;
				if(c.bounds) {
					if(x12 > c.max_x || !c.started) {
						c.max_x = x12;
					}
					if(y12 > c.max_y || !c.started) {
						c.max_y = y12;
					}
					if(x12 < c.min_x || !c.started) {
						c.min_x = x12;
					}
					if(y12 < c.min_y || !c.started) {
						c.min_y = y12;
					}
					c.started = true;
					if(cx7 > c.max_x || !c.started) {
						c.max_x = cx7;
					}
					if(cy7 > c.max_y || !c.started) {
						c.max_y = cy7;
					}
					if(cx7 < c.min_x || !c.started) {
						c.min_x = cx7;
					}
					if(cy7 < c.min_y || !c.started) {
						c.min_y = cy7;
					}
					c.started = true;
					if(cx111 > c.max_x || !c.started) {
						c.max_x = cx111;
					}
					if(cy111 > c.max_y || !c.started) {
						c.max_y = cy111;
					}
					if(cx111 < c.min_x || !c.started) {
						c.min_x = cx111;
					}
					if(cy111 < c.min_y || !c.started) {
						c.min_y = cy111;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x12,y12,cx7,cy7);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx111 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy111 , Int);
				}
				c.num_vertices++;
				var cx112 = c.x + dx4;
				var cy112 = c.y;
				var cx26 = cx112 + dx5;
				var cy26 = cy112 + dy5;
				c.x = cx26 + dx6;
				c.y = cy26 + -(dy1 + dy2 + dy5);
				var x13 = c.x | 0;
				var y13 = c.y | 0;
				var cx8 = cx112 | 0;
				var cy8 = cy112 | 0;
				var cx113 = cx26 | 0;
				var cy113 = cy26 | 0;
				if(c.bounds) {
					if(x13 > c.max_x || !c.started) {
						c.max_x = x13;
					}
					if(y13 > c.max_y || !c.started) {
						c.max_y = y13;
					}
					if(x13 < c.min_x || !c.started) {
						c.min_x = x13;
					}
					if(y13 < c.min_y || !c.started) {
						c.min_y = y13;
					}
					c.started = true;
					if(cx8 > c.max_x || !c.started) {
						c.max_x = cx8;
					}
					if(cy8 > c.max_y || !c.started) {
						c.max_y = cy8;
					}
					if(cx8 < c.min_x || !c.started) {
						c.min_x = cx8;
					}
					if(cy8 < c.min_y || !c.started) {
						c.min_y = cy8;
					}
					c.started = true;
					if(cx113 > c.max_x || !c.started) {
						c.max_x = cx113;
					}
					if(cy113 > c.max_y || !c.started) {
						c.max_y = cy113;
					}
					if(cx113 < c.min_x || !c.started) {
						c.min_x = cx113;
					}
					if(cy113 < c.min_y || !c.started) {
						c.min_y = cy113;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x13,y13,cx8,cy8);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx113 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy113 , Int);
				}
				c.num_vertices++;
				break;
			case 37:
				if(sp < 11) {
					return false;
				}
				dx1 = _g[0];
				dy1 = _g[1];
				dx2 = _g[2];
				dy2 = _g[3];
				dx3 = _g[4];
				dy3 = _g[5];
				dx4 = _g[6];
				dy4 = _g[7];
				dx5 = _g[8];
				dy5 = _g[9];
				dy6 = _g[10];
				dx6 = dy6;
				dx = dx1 + dx2 + dx3 + dx4 + dx5;
				dy = dy1 + dy2 + dy3 + dy4 + dy5;
				if(Math.abs(dx) > Math.abs(dy)) {
					dy6 = -dy;
				} else {
					dx6 = -dx;
				}
				var cx114 = c.x + dx1;
				var cy114 = c.y + dy1;
				var cx27 = cx114 + dx2;
				var cy27 = cy114 + dy2;
				c.x = cx27 + dx3;
				c.y = cy27 + dy3;
				var x14 = c.x | 0;
				var y14 = c.y | 0;
				var cx9 = cx114 | 0;
				var cy9 = cy114 | 0;
				var cx115 = cx27 | 0;
				var cy115 = cy27 | 0;
				if(c.bounds) {
					if(x14 > c.max_x || !c.started) {
						c.max_x = x14;
					}
					if(y14 > c.max_y || !c.started) {
						c.max_y = y14;
					}
					if(x14 < c.min_x || !c.started) {
						c.min_x = x14;
					}
					if(y14 < c.min_y || !c.started) {
						c.min_y = y14;
					}
					c.started = true;
					if(cx9 > c.max_x || !c.started) {
						c.max_x = cx9;
					}
					if(cy9 > c.max_y || !c.started) {
						c.max_y = cy9;
					}
					if(cx9 < c.min_x || !c.started) {
						c.min_x = cx9;
					}
					if(cy9 < c.min_y || !c.started) {
						c.min_y = cy9;
					}
					c.started = true;
					if(cx115 > c.max_x || !c.started) {
						c.max_x = cx115;
					}
					if(cy115 > c.max_y || !c.started) {
						c.max_y = cy115;
					}
					if(cx115 < c.min_x || !c.started) {
						c.min_x = cx115;
					}
					if(cy115 < c.min_y || !c.started) {
						c.min_y = cy115;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x14,y14,cx9,cy9);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx115 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy115 , Int);
				}
				c.num_vertices++;
				var cx116 = c.x + dx4;
				var cy116 = c.y + dy4;
				var cx28 = cx116 + dx5;
				var cy28 = cy116 + dy5;
				c.x = cx28 + dx6;
				c.y = cy28 + dy6;
				var x15 = c.x | 0;
				var y15 = c.y | 0;
				var cx10 = cx116 | 0;
				var cy10 = cy116 | 0;
				var cx117 = cx28 | 0;
				var cy117 = cy28 | 0;
				if(c.bounds) {
					if(x15 > c.max_x || !c.started) {
						c.max_x = x15;
					}
					if(y15 > c.max_y || !c.started) {
						c.max_y = y15;
					}
					if(x15 < c.min_x || !c.started) {
						c.min_x = x15;
					}
					if(y15 < c.min_y || !c.started) {
						c.min_y = y15;
					}
					c.started = true;
					if(cx10 > c.max_x || !c.started) {
						c.max_x = cx10;
					}
					if(cy10 > c.max_y || !c.started) {
						c.max_y = cy10;
					}
					if(cx10 < c.min_x || !c.started) {
						c.min_x = cx10;
					}
					if(cy10 < c.min_y || !c.started) {
						c.min_y = cy10;
					}
					c.started = true;
					if(cx117 > c.max_x || !c.started) {
						c.max_x = cx117;
					}
					if(cy117 > c.max_y || !c.started) {
						c.max_y = cy117;
					}
					if(cx117 < c.min_x || !c.started) {
						c.min_x = cx117;
					}
					if(cy117 < c.min_y || !c.started) {
						c.min_y = cy117;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x15,y15,cx10,cy10);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx117 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy117 , Int);
				}
				c.num_vertices++;
				break;
			default:
				return false;
			}
			break;
		case 14:
			if(c.first_x != c.x || c.first_y != c.y) {
				var x16 = c.first_x | 0;
				var y16 = c.first_y | 0;
				if(c.bounds) {
					if(x16 > c.max_x || !c.started) {
						c.max_x = x16;
					}
					if(y16 > c.max_y || !c.started) {
						c.max_y = y16;
					}
					if(x16 < c.min_x || !c.started) {
						c.min_x = x16;
					}
					if(y16 < c.min_y || !c.started) {
						c.min_y = y16;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x16,y16,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			return true;
		case 19:case 20:
			if(in_header) {
				maskbits += sp / 2 | 0;
			}
			in_header = false;
			var o = b.cursor + ((maskbits + 7) / 8 | 0);
			if(o > b.data.get_length() || o < 0) {
				throw haxe_Exception.thrown("Error");
			}
			b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
			break;
		case 21:
			in_header = false;
			if(sp < 2) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x17 = c.first_x | 0;
				var y17 = c.first_y | 0;
				if(c.bounds) {
					if(x17 > c.max_x || !c.started) {
						c.max_x = x17;
					}
					if(y17 > c.max_y || !c.started) {
						c.max_y = y17;
					}
					if(x17 < c.min_x || !c.started) {
						c.min_x = x17;
					}
					if(y17 < c.min_y || !c.started) {
						c.min_y = y17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x17,y17,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + _g[sp - 2];
			c.first_y = c.y = c.y + _g[sp - 1];
			var x18 = c.x | 0;
			var y18 = c.y | 0;
			if(c.bounds) {
				if(x18 > c.max_x || !c.started) {
					c.max_x = x18;
				}
				if(y18 > c.max_y || !c.started) {
					c.max_y = y18;
				}
				if(x18 < c.min_x || !c.started) {
					c.min_x = x18;
				}
				if(y18 < c.min_y || !c.started) {
					c.min_y = y18;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x18,y18,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 22:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x19 = c.first_x | 0;
				var y19 = c.first_y | 0;
				if(c.bounds) {
					if(x19 > c.max_x || !c.started) {
						c.max_x = x19;
					}
					if(y19 > c.max_y || !c.started) {
						c.max_y = y19;
					}
					if(x19 < c.min_x || !c.started) {
						c.min_x = x19;
					}
					if(y19 < c.min_y || !c.started) {
						c.min_y = y19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x19,y19,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + _g[sp - 1];
			c.first_y = c.y = c.y;
			var x20 = c.x | 0;
			var y20 = c.y | 0;
			if(c.bounds) {
				if(x20 > c.max_x || !c.started) {
					c.max_x = x20;
				}
				if(y20 > c.max_y || !c.started) {
					c.max_y = y20;
				}
				if(x20 < c.min_x || !c.started) {
					c.min_x = x20;
				}
				if(y20 < c.min_y || !c.started) {
					c.min_y = y20;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x20,y20,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 1:case 3:case 18:case 23:
			maskbits += sp / 2 | 0;
			break;
		case 24:
			if(sp < 8) {
				return false;
			}
			while(i + 5 < sp - 2) {
				var cx118 = c.x + _g[i];
				var cy118 = c.y + _g[i + 1];
				var cx29 = cx118 + _g[i + 2];
				var cy29 = cy118 + _g[i + 3];
				c.x = cx29 + _g[i + 4];
				c.y = cy29 + _g[i + 5];
				var x21 = c.x | 0;
				var y21 = c.y | 0;
				var cx20 = cx118 | 0;
				var cy20 = cy118 | 0;
				var cx119 = cx29 | 0;
				var cy119 = cy29 | 0;
				if(c.bounds) {
					if(x21 > c.max_x || !c.started) {
						c.max_x = x21;
					}
					if(y21 > c.max_y || !c.started) {
						c.max_y = y21;
					}
					if(x21 < c.min_x || !c.started) {
						c.min_x = x21;
					}
					if(y21 < c.min_y || !c.started) {
						c.min_y = y21;
					}
					c.started = true;
					if(cx20 > c.max_x || !c.started) {
						c.max_x = cx20;
					}
					if(cy20 > c.max_y || !c.started) {
						c.max_y = cy20;
					}
					if(cx20 < c.min_x || !c.started) {
						c.min_x = cx20;
					}
					if(cy20 < c.min_y || !c.started) {
						c.min_y = cy20;
					}
					c.started = true;
					if(cx119 > c.max_x || !c.started) {
						c.max_x = cx119;
					}
					if(cy119 > c.max_y || !c.started) {
						c.max_y = cy119;
					}
					if(cx119 < c.min_x || !c.started) {
						c.min_x = cx119;
					}
					if(cy119 < c.min_y || !c.started) {
						c.min_y = cy119;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x21,y21,cx20,cy20);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx119 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy119 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			if(i + 1 >= sp) {
				return false;
			}
			c.x += _g[i];
			c.y += _g[i + 1];
			var x22 = c.x | 0;
			var y22 = c.y | 0;
			if(c.bounds) {
				if(x22 > c.max_x || !c.started) {
					c.max_x = x22;
				}
				if(y22 > c.max_y || !c.started) {
					c.max_y = y22;
				}
				if(x22 < c.min_x || !c.started) {
					c.min_x = x22;
				}
				if(y22 < c.min_y || !c.started) {
					c.min_y = y22;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x22,y22,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 25:
			if(sp < 8) {
				return false;
			}
			while(i + 1 < sp - 6) {
				c.x += _g[i];
				c.y += _g[i + 1];
				var x23 = c.x | 0;
				var y23 = c.y | 0;
				if(c.bounds) {
					if(x23 > c.max_x || !c.started) {
						c.max_x = x23;
					}
					if(y23 > c.max_y || !c.started) {
						c.max_y = y23;
					}
					if(x23 < c.min_x || !c.started) {
						c.min_x = x23;
					}
					if(y23 < c.min_y || !c.started) {
						c.min_y = y23;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x23,y23,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			if(i + 5 >= sp) {
				return false;
			}
			var cx120 = c.x + _g[i];
			var cy120 = c.y + _g[i + 1];
			var cx210 = cx120 + _g[i + 2];
			var cy210 = cy120 + _g[i + 3];
			c.x = cx210 + _g[i + 4];
			c.y = cy210 + _g[i + 5];
			var x24 = c.x | 0;
			var y24 = c.y | 0;
			var cx30 = cx120 | 0;
			var cy30 = cy120 | 0;
			var cx121 = cx210 | 0;
			var cy121 = cy210 | 0;
			if(c.bounds) {
				if(x24 > c.max_x || !c.started) {
					c.max_x = x24;
				}
				if(y24 > c.max_y || !c.started) {
					c.max_y = y24;
				}
				if(x24 < c.min_x || !c.started) {
					c.min_x = x24;
				}
				if(y24 < c.min_y || !c.started) {
					c.min_y = y24;
				}
				c.started = true;
				if(cx30 > c.max_x || !c.started) {
					c.max_x = cx30;
				}
				if(cy30 > c.max_y || !c.started) {
					c.max_y = cy30;
				}
				if(cx30 < c.min_x || !c.started) {
					c.min_x = cx30;
				}
				if(cy30 < c.min_y || !c.started) {
					c.min_y = cy30;
				}
				c.started = true;
				if(cx121 > c.max_x || !c.started) {
					c.max_x = cx121;
				}
				if(cy121 > c.max_y || !c.started) {
					c.max_y = cy121;
				}
				if(cx121 < c.min_x || !c.started) {
					c.min_x = cx121;
				}
				if(cy121 < c.min_y || !c.started) {
					c.min_y = cy121;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x24,y24,cx30,cy30);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx121 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy121 , Int);
			}
			c.num_vertices++;
			break;
		case 26:case 27:
			if(sp < 4) {
				return false;
			}
			f = 0.0;
			if((sp & 1) != 0) {
				f = _g[0];
				i = 1;
			}
			while(i + 3 < sp) {
				if(b0 == 27) {
					var cx122 = c.x + _g[i];
					var cy122 = c.y + f;
					var cx211 = cx122 + _g[i + 1];
					var cy211 = cy122 + _g[i + 2];
					c.x = cx211 + _g[i + 3];
					c.y = cy211;
					var x25 = c.x | 0;
					var y25 = c.y | 0;
					var cx31 = cx122 | 0;
					var cy31 = cy122 | 0;
					var cx123 = cx211 | 0;
					var cy123 = cy211 | 0;
					if(c.bounds) {
						if(x25 > c.max_x || !c.started) {
							c.max_x = x25;
						}
						if(y25 > c.max_y || !c.started) {
							c.max_y = y25;
						}
						if(x25 < c.min_x || !c.started) {
							c.min_x = x25;
						}
						if(y25 < c.min_y || !c.started) {
							c.min_y = y25;
						}
						c.started = true;
						if(cx31 > c.max_x || !c.started) {
							c.max_x = cx31;
						}
						if(cy31 > c.max_y || !c.started) {
							c.max_y = cy31;
						}
						if(cx31 < c.min_x || !c.started) {
							c.min_x = cx31;
						}
						if(cy31 < c.min_y || !c.started) {
							c.min_y = cy31;
						}
						c.started = true;
						if(cx123 > c.max_x || !c.started) {
							c.max_x = cx123;
						}
						if(cy123 > c.max_y || !c.started) {
							c.max_y = cy123;
						}
						if(cx123 < c.min_x || !c.started) {
							c.min_x = cx123;
						}
						if(cy123 < c.min_y || !c.started) {
							c.min_y = cy123;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x25,y25,cx31,cy31);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx123 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy123 , Int);
					}
					c.num_vertices++;
				} else {
					var cx124 = c.x + f;
					var cy124 = c.y + _g[i];
					var cx212 = cx124 + _g[i + 1];
					var cy212 = cy124 + _g[i + 2];
					c.x = cx212;
					c.y = cy212 + _g[i + 3];
					var x26 = c.x | 0;
					var y26 = c.y | 0;
					var cx32 = cx124 | 0;
					var cy32 = cy124 | 0;
					var cx125 = cx212 | 0;
					var cy125 = cy212 | 0;
					if(c.bounds) {
						if(x26 > c.max_x || !c.started) {
							c.max_x = x26;
						}
						if(y26 > c.max_y || !c.started) {
							c.max_y = y26;
						}
						if(x26 < c.min_x || !c.started) {
							c.min_x = x26;
						}
						if(y26 < c.min_y || !c.started) {
							c.min_y = y26;
						}
						c.started = true;
						if(cx32 > c.max_x || !c.started) {
							c.max_x = cx32;
						}
						if(cy32 > c.max_y || !c.started) {
							c.max_y = cy32;
						}
						if(cx32 < c.min_x || !c.started) {
							c.min_x = cx32;
						}
						if(cy32 < c.min_y || !c.started) {
							c.min_y = cy32;
						}
						c.started = true;
						if(cx125 > c.max_x || !c.started) {
							c.max_x = cx125;
						}
						if(cy125 > c.max_y || !c.started) {
							c.max_y = cy125;
						}
						if(cx125 < c.min_x || !c.started) {
							c.min_x = cx125;
						}
						if(cy125 < c.min_y || !c.started) {
							c.min_y = cy125;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x26,y26,cx32,cy32);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx125 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy125 , Int);
					}
					c.num_vertices++;
				}
				f = 0.0;
				i += 4;
			}
			break;
		case 10:case 29:
			if(b0 == 10) {
				if(!has_subrs) {
					if(info.fdselect.data.get_length() != 0) {
						var fdselect = info.fdselect;
						var nranges;
						var start;
						var end;
						var v1;
						var fmt;
						var fdselector = -1;
						if(0 > fdselect.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
						if(fdselect.cursor >= fdselect.data.get_length()) {
							fmt = 0;
						} else {
							var pos2 = fdselect.cursor++;
							if(pos2 == null) {
								pos2 = 0;
							}
							fmt = fdselect.data.readU8(pos2);
						}
						if(fmt == 0) {
							var o1 = fdselect.cursor + glyph_index;
							if(o1 > fdselect.data.get_length() || o1 < 0) {
								throw haxe_Exception.thrown("Error");
							}
							fdselect.cursor = o1 > fdselect.data.get_length() || o1 < 0 ? fdselect.data.get_length() : o1;
							if(fdselect.cursor >= fdselect.data.get_length()) {
								fdselector = 0;
							} else {
								var pos3 = fdselect.cursor++;
								if(pos3 == null) {
									pos3 = 0;
								}
								fdselector = fdselect.data.readU8(pos3);
							}
						} else if(fmt == 3) {
							var v2 = 0;
							var _g2 = 0;
							while(_g2 < 2) {
								++_g2;
								var v3;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v3 = 0;
								} else {
									var pos4 = fdselect.cursor++;
									if(pos4 == null) {
										pos4 = 0;
									}
									v3 = fdselect.data.readU8(pos4);
								}
								v2 = v2 << 8 | v3;
							}
							nranges = v2;
							var v4 = 0;
							var _g3 = 0;
							while(_g3 < 2) {
								++_g3;
								var v5;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v5 = 0;
								} else {
									var pos5 = fdselect.cursor++;
									if(pos5 == null) {
										pos5 = 0;
									}
									v5 = fdselect.data.readU8(pos5);
								}
								v4 = v4 << 8 | v5;
							}
							start = v4;
							var _g4 = 0;
							while(_g4 < nranges) {
								++_g4;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v1 = 0;
								} else {
									var pos6 = fdselect.cursor++;
									if(pos6 == null) {
										pos6 = 0;
									}
									v1 = fdselect.data.readU8(pos6);
								}
								var v6 = 0;
								var _g5 = 0;
								while(_g5 < 2) {
									++_g5;
									var v7;
									if(fdselect.cursor >= fdselect.data.get_length()) {
										v7 = 0;
									} else {
										var pos7 = fdselect.cursor++;
										if(pos7 == null) {
											pos7 = 0;
										}
										v7 = fdselect.data.readU8(pos7);
									}
									v6 = v6 << 8 | v7;
								}
								end = v6;
								if(glyph_index >= start && glyph_index < end) {
									fdselector = v1;
									break;
								}
								start = end;
							}
						}
						if(fdselector == -1) {
							var r = new kha_graphics2_truetype_Stbtt_$_$buf();
							r.data = null;
							r.cursor = 0;
						}
						var cff = info.cff;
						var b2 = info.fontdicts;
						if(0 > b2.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						b2.cursor = 0 > b2.data.get_length() ? b2.data.get_length() : 0;
						var v8 = 0;
						var _g6 = 0;
						while(_g6 < 2) {
							++_g6;
							var v9;
							if(b2.cursor >= b2.data.get_length()) {
								v9 = 0;
							} else {
								var pos8 = b2.cursor++;
								if(pos8 == null) {
									pos8 = 0;
								}
								v9 = b2.data.readU8(pos8);
							}
							v8 = v8 << 8 | v9;
						}
						var count = v8;
						var offsize;
						if(b2.cursor >= b2.data.get_length()) {
							offsize = 0;
						} else {
							var pos9 = b2.cursor++;
							if(pos9 == null) {
								pos9 = 0;
							}
							offsize = b2.data.readU8(pos9);
						}
						if(!(fdselector >= 0 && fdselector < count)) {
							throw haxe_Exception.thrown("Error");
						}
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var o2 = b2.cursor + fdselector * offsize;
						if(o2 > b2.data.get_length() || o2 < 0) {
							throw haxe_Exception.thrown("Error");
						}
						b2.cursor = o2 > b2.data.get_length() || o2 < 0 ? b2.data.get_length() : o2;
						var v10 = 0;
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var _g7 = 0;
						var _g8 = offsize;
						while(_g7 < _g8) {
							++_g7;
							var v11;
							if(b2.cursor >= b2.data.get_length()) {
								v11 = 0;
							} else {
								var pos10 = b2.cursor++;
								if(pos10 == null) {
									pos10 = 0;
								}
								v11 = b2.data.readU8(pos10);
							}
							v10 = v10 << 8 | v11;
						}
						var start1 = v10;
						var v12 = 0;
						if(!(offsize >= 1 && offsize <= 4)) {
							throw haxe_Exception.thrown("Error");
						}
						var _g9 = 0;
						var _g10 = offsize;
						while(_g9 < _g10) {
							++_g9;
							var v13;
							if(b2.cursor >= b2.data.get_length()) {
								v13 = 0;
							} else {
								var pos11 = b2.cursor++;
								if(pos11 == null) {
									pos11 = 0;
								}
								v13 = b2.data.readU8(pos11);
							}
							v12 = v12 << 8 | v13;
						}
						var o3 = 2 + (count + 1) * offsize + start1;
						var s = v12 - start1;
						var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
						r1.data = null;
						r1.cursor = 0;
						var fontdict;
						if(o3 < 0 || s < 0 || o3 > b2.data.get_length() || s > b2.data.get_length() - o3) {
							fontdict = r1;
						} else {
							r1.data = b2.data.sub(o3,s);
							fontdict = r1;
						}
						var subrsoff = [0];
						var private_loc = [0,0];
						var i1 = 0;
						if(0 > fontdict.data.get_length()) {
							throw haxe_Exception.thrown("Error");
						}
						fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
						var ret = null;
						while(fontdict.cursor < fontdict.data.get_length()) {
							var start2 = fontdict.cursor;
							var op;
							while(true) {
								var subrs1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									subrs1 = 0;
								} else {
									var pos12 = fontdict.cursor;
									if(pos12 == null) {
										pos12 = 0;
									}
									subrs1 = fontdict.data.readU8(pos12);
								}
								if(!(subrs1 >= 28)) {
									break;
								}
								var v14;
								var b01;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									b01 = 0;
								} else {
									var pos13 = fontdict.cursor;
									if(pos13 == null) {
										pos13 = 0;
									}
									b01 = fontdict.data.readU8(pos13);
								}
								if(b01 < 28) {
									throw haxe_Exception.thrown("Error");
								}
								if(b01 == 30) {
									var o4 = fontdict.cursor + 1;
									if(o4 > fontdict.data.get_length() || o4 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									fontdict.cursor = o4 > fontdict.data.get_length() || o4 < 0 ? fontdict.data.get_length() : o4;
									while(fontdict.cursor < fontdict.data.get_length()) {
										if(fontdict.cursor >= fontdict.data.get_length()) {
											v14 = 0;
										} else {
											var pos14 = fontdict.cursor++;
											if(pos14 == null) {
												pos14 = 0;
											}
											v14 = fontdict.data.readU8(pos14);
										}
										if((v14 & 15) == 15 || v14 >> 4 == 15) {
											break;
										}
									}
								} else {
									var b02;
									if(fontdict.cursor >= fontdict.data.get_length()) {
										b02 = 0;
									} else {
										var pos15 = fontdict.cursor++;
										if(pos15 == null) {
											pos15 = 0;
										}
										b02 = fontdict.data.readU8(pos15);
									}
									if(!(b02 >= 32 && b02 <= 246)) {
										if(b02 >= 247 && b02 <= 250) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos16 = fontdict.cursor++;
												if(pos16 == null) {
													pos16 = 0;
												}
												fontdict.data.readU8(pos16);
											}
										} else if(b02 >= 251 && b02 <= 254) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos17 = fontdict.cursor++;
												if(pos17 == null) {
													pos17 = 0;
												}
												fontdict.data.readU8(pos17);
											}
										} else if(b02 == 28) {
											var _g11 = 0;
											while(_g11 < 2) {
												++_g11;
												if(fontdict.cursor < fontdict.data.get_length()) {
													var pos18 = fontdict.cursor++;
													if(pos18 == null) {
														pos18 = 0;
													}
													fontdict.data.readU8(pos18);
												}
											}
										} else if(b02 == 29) {
											var _g12 = 0;
											while(_g12 < 4) {
												++_g12;
												if(fontdict.cursor < fontdict.data.get_length()) {
													var pos19 = fontdict.cursor++;
													if(pos19 == null) {
														pos19 = 0;
													}
													fontdict.data.readU8(pos19);
												}
											}
										} else {
											throw haxe_Exception.thrown("Error");
										}
									}
								}
							}
							var end1 = fontdict.cursor;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								op = 0;
							} else {
								var pos20 = fontdict.cursor++;
								if(pos20 == null) {
									pos20 = 0;
								}
								op = fontdict.data.readU8(pos20);
							}
							if(op == 12) {
								var op1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									op1 = 0;
								} else {
									var pos21 = fontdict.cursor++;
									if(pos21 == null) {
										pos21 = 0;
									}
									op1 = fontdict.data.readU8(pos21);
								}
								op = op1 | 256;
							}
							if(op == 18) {
								var s1 = end1 - start2;
								var r2 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r2.data = null;
								r2.cursor = 0;
								if(start2 < 0 || s1 < 0 || start2 > fontdict.data.get_length() || s1 > fontdict.data.get_length() - start2) {
									ret = r2;
								} else {
									r2.data = fontdict.data.sub(start2,s1);
									ret = r2;
								}
								break;
							}
						}
						var operands;
						if(ret != null) {
							operands = ret;
						} else {
							var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r3.data = null;
							r3.cursor = 0;
							if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
								operands = r3;
							} else {
								r3.data = fontdict.data.sub(0,0);
								operands = r3;
							}
						}
						while(i1 < 2 && operands.cursor < operands.data.get_length()) {
							var b03;
							if(operands.cursor >= operands.data.get_length()) {
								b03 = 0;
							} else {
								var pos22 = operands.cursor++;
								if(pos22 == null) {
									pos22 = 0;
								}
								b03 = operands.data.readU8(pos22);
							}
							var subrs2;
							if(b03 >= 32 && b03 <= 246) {
								subrs2 = b03 - 139;
							} else if(b03 >= 247 && b03 <= 250) {
								var subrs3;
								if(operands.cursor >= operands.data.get_length()) {
									subrs3 = 0;
								} else {
									var pos23 = operands.cursor++;
									if(pos23 == null) {
										pos23 = 0;
									}
									subrs3 = operands.data.readU8(pos23);
								}
								subrs2 = (b03 - 247) * 256 + subrs3 + 108;
							} else if(b03 >= 251 && b03 <= 254) {
								var subrs4;
								if(operands.cursor >= operands.data.get_length()) {
									subrs4 = 0;
								} else {
									var pos24 = operands.cursor++;
									if(pos24 == null) {
										pos24 = 0;
									}
									subrs4 = operands.data.readU8(pos24);
								}
								subrs2 = -(b03 - 251) * 256 - subrs4 - 108;
							} else if(b03 == 28) {
								var v15 = 0;
								var _g13 = 0;
								while(_g13 < 2) {
									++_g13;
									var v16;
									if(operands.cursor >= operands.data.get_length()) {
										v16 = 0;
									} else {
										var pos25 = operands.cursor++;
										if(pos25 == null) {
											pos25 = 0;
										}
										v16 = operands.data.readU8(pos25);
									}
									v15 = v15 << 8 | v16;
								}
								subrs2 = v15;
							} else if(b03 == 29) {
								var v17 = 0;
								var _g14 = 0;
								while(_g14 < 4) {
									++_g14;
									var v18;
									if(operands.cursor >= operands.data.get_length()) {
										v18 = 0;
									} else {
										var pos26 = operands.cursor++;
										if(pos26 == null) {
											pos26 = 0;
										}
										v18 = operands.data.readU8(pos26);
									}
									v17 = v17 << 8 | v18;
								}
								subrs2 = v17;
							} else {
								throw haxe_Exception.thrown("Error");
							}
							private_loc[i1] = subrs2;
							++i1;
						}
						if(private_loc[1] == 0 || private_loc[0] == 0) {
							var r4 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r4.data = null;
							r4.cursor = 0;
							subrs = r4;
						} else {
							var o5 = private_loc[1];
							var s2 = private_loc[0];
							var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r5.data = null;
							r5.cursor = 0;
							var pdict;
							if(o5 < 0 || s2 < 0 || o5 > cff.data.get_length() || s2 > cff.data.get_length() - o5) {
								pdict = r5;
							} else {
								r5.data = cff.data.sub(o5,s2);
								pdict = r5;
							}
							var i2 = 0;
							if(0 > pdict.data.get_length()) {
								throw haxe_Exception.thrown("Error");
							}
							pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
							var ret1 = null;
							while(pdict.cursor < pdict.data.get_length()) {
								var start3 = pdict.cursor;
								var op2;
								while(true) {
									var subrs5;
									if(pdict.cursor >= pdict.data.get_length()) {
										subrs5 = 0;
									} else {
										var pos27 = pdict.cursor;
										if(pos27 == null) {
											pos27 = 0;
										}
										subrs5 = pdict.data.readU8(pos27);
									}
									if(!(subrs5 >= 28)) {
										break;
									}
									var v19;
									var b04;
									if(pdict.cursor >= pdict.data.get_length()) {
										b04 = 0;
									} else {
										var pos28 = pdict.cursor;
										if(pos28 == null) {
											pos28 = 0;
										}
										b04 = pdict.data.readU8(pos28);
									}
									if(b04 < 28) {
										throw haxe_Exception.thrown("Error");
									}
									if(b04 == 30) {
										var o6 = pdict.cursor + 1;
										if(o6 > pdict.data.get_length() || o6 < 0) {
											throw haxe_Exception.thrown("Error");
										}
										pdict.cursor = o6 > pdict.data.get_length() || o6 < 0 ? pdict.data.get_length() : o6;
										while(pdict.cursor < pdict.data.get_length()) {
											if(pdict.cursor >= pdict.data.get_length()) {
												v19 = 0;
											} else {
												var pos29 = pdict.cursor++;
												if(pos29 == null) {
													pos29 = 0;
												}
												v19 = pdict.data.readU8(pos29);
											}
											if((v19 & 15) == 15 || v19 >> 4 == 15) {
												break;
											}
										}
									} else {
										var b05;
										if(pdict.cursor >= pdict.data.get_length()) {
											b05 = 0;
										} else {
											var pos30 = pdict.cursor++;
											if(pos30 == null) {
												pos30 = 0;
											}
											b05 = pdict.data.readU8(pos30);
										}
										if(!(b05 >= 32 && b05 <= 246)) {
											if(b05 >= 247 && b05 <= 250) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos31 = pdict.cursor++;
													if(pos31 == null) {
														pos31 = 0;
													}
													pdict.data.readU8(pos31);
												}
											} else if(b05 >= 251 && b05 <= 254) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos32 = pdict.cursor++;
													if(pos32 == null) {
														pos32 = 0;
													}
													pdict.data.readU8(pos32);
												}
											} else if(b05 == 28) {
												var _g15 = 0;
												while(_g15 < 2) {
													++_g15;
													if(pdict.cursor < pdict.data.get_length()) {
														var pos33 = pdict.cursor++;
														if(pos33 == null) {
															pos33 = 0;
														}
														pdict.data.readU8(pos33);
													}
												}
											} else if(b05 == 29) {
												var _g16 = 0;
												while(_g16 < 4) {
													++_g16;
													if(pdict.cursor < pdict.data.get_length()) {
														var pos34 = pdict.cursor++;
														if(pos34 == null) {
															pos34 = 0;
														}
														pdict.data.readU8(pos34);
													}
												}
											} else {
												throw haxe_Exception.thrown("Error");
											}
										}
									}
								}
								var end2 = pdict.cursor;
								if(pdict.cursor >= pdict.data.get_length()) {
									op2 = 0;
								} else {
									var pos35 = pdict.cursor++;
									if(pos35 == null) {
										pos35 = 0;
									}
									op2 = pdict.data.readU8(pos35);
								}
								if(op2 == 12) {
									var op3;
									if(pdict.cursor >= pdict.data.get_length()) {
										op3 = 0;
									} else {
										var pos36 = pdict.cursor++;
										if(pos36 == null) {
											pos36 = 0;
										}
										op3 = pdict.data.readU8(pos36);
									}
									op2 = op3 | 256;
								}
								if(op2 == 19) {
									var s3 = end2 - start3;
									var r6 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r6.data = null;
									r6.cursor = 0;
									if(start3 < 0 || s3 < 0 || start3 > pdict.data.get_length() || s3 > pdict.data.get_length() - start3) {
										ret1 = r6;
									} else {
										r6.data = pdict.data.sub(start3,s3);
										ret1 = r6;
									}
									break;
								}
							}
							var operands1;
							if(ret1 != null) {
								operands1 = ret1;
							} else {
								var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r7.data = null;
								r7.cursor = 0;
								if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
									operands1 = r7;
								} else {
									r7.data = pdict.data.sub(0,0);
									operands1 = r7;
								}
							}
							while(i2 < 1 && operands1.cursor < operands1.data.get_length()) {
								var b06;
								if(operands1.cursor >= operands1.data.get_length()) {
									b06 = 0;
								} else {
									var pos37 = operands1.cursor++;
									if(pos37 == null) {
										pos37 = 0;
									}
									b06 = operands1.data.readU8(pos37);
								}
								var subrs6;
								if(b06 >= 32 && b06 <= 246) {
									subrs6 = b06 - 139;
								} else if(b06 >= 247 && b06 <= 250) {
									var subrs7;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs7 = 0;
									} else {
										var pos38 = operands1.cursor++;
										if(pos38 == null) {
											pos38 = 0;
										}
										subrs7 = operands1.data.readU8(pos38);
									}
									subrs6 = (b06 - 247) * 256 + subrs7 + 108;
								} else if(b06 >= 251 && b06 <= 254) {
									var subrs8;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs8 = 0;
									} else {
										var pos39 = operands1.cursor++;
										if(pos39 == null) {
											pos39 = 0;
										}
										subrs8 = operands1.data.readU8(pos39);
									}
									subrs6 = -(b06 - 251) * 256 - subrs8 - 108;
								} else if(b06 == 28) {
									var v20 = 0;
									var _g17 = 0;
									while(_g17 < 2) {
										++_g17;
										var v21;
										if(operands1.cursor >= operands1.data.get_length()) {
											v21 = 0;
										} else {
											var pos40 = operands1.cursor++;
											if(pos40 == null) {
												pos40 = 0;
											}
											v21 = operands1.data.readU8(pos40);
										}
										v20 = v20 << 8 | v21;
									}
									subrs6 = v20;
								} else if(b06 == 29) {
									var v22 = 0;
									var _g18 = 0;
									while(_g18 < 4) {
										++_g18;
										var v23;
										if(operands1.cursor >= operands1.data.get_length()) {
											v23 = 0;
										} else {
											var pos41 = operands1.cursor++;
											if(pos41 == null) {
												pos41 = 0;
											}
											v23 = operands1.data.readU8(pos41);
										}
										v22 = v22 << 8 | v23;
									}
									subrs6 = v22;
								} else {
									throw haxe_Exception.thrown("Error");
								}
								subrsoff[i2] = subrs6;
								++i2;
							}
							if(subrsoff[0] == 0) {
								var r8 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r8.data = null;
								r8.cursor = 0;
								subrs = r8;
							} else {
								var o7 = private_loc[1] + subrsoff[0];
								if(o7 > cff.data.get_length() || o7 < 0) {
									throw haxe_Exception.thrown("Error");
								}
								cff.cursor = o7 > cff.data.get_length() || o7 < 0 ? cff.data.get_length() : o7;
								var start4 = cff.cursor;
								var v24 = 0;
								var _g19 = 0;
								while(_g19 < 2) {
									++_g19;
									var v25;
									if(cff.cursor >= cff.data.get_length()) {
										v25 = 0;
									} else {
										var pos42 = cff.cursor++;
										if(pos42 == null) {
											pos42 = 0;
										}
										v25 = cff.data.readU8(pos42);
									}
									v24 = v24 << 8 | v25;
								}
								var count1 = v24;
								if(count1 > 0) {
									var offsize1;
									if(cff.cursor >= cff.data.get_length()) {
										offsize1 = 0;
									} else {
										var pos43 = cff.cursor++;
										if(pos43 == null) {
											pos43 = 0;
										}
										offsize1 = cff.data.readU8(pos43);
									}
									if(!(offsize1 >= 1 && offsize1 <= 4)) {
										throw haxe_Exception.thrown("Error");
									}
									var o8 = cff.cursor + offsize1 * count1;
									if(o8 > cff.data.get_length() || o8 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									cff.cursor = o8 > cff.data.get_length() || o8 < 0 ? cff.data.get_length() : o8;
									var v26 = 0;
									if(!(offsize1 >= 1 && offsize1 <= 4)) {
										throw haxe_Exception.thrown("Error");
									}
									var _g20 = 0;
									var _g21 = offsize1;
									while(_g20 < _g21) {
										++_g20;
										var v27;
										if(cff.cursor >= cff.data.get_length()) {
											v27 = 0;
										} else {
											var pos44 = cff.cursor++;
											if(pos44 == null) {
												pos44 = 0;
											}
											v27 = cff.data.readU8(pos44);
										}
										v26 = v26 << 8 | v27;
									}
									var o9 = cff.cursor + (v26 - 1);
									if(o9 > cff.data.get_length() || o9 < 0) {
										throw haxe_Exception.thrown("Error");
									}
									cff.cursor = o9 > cff.data.get_length() || o9 < 0 ? cff.data.get_length() : o9;
									var s4 = cff.cursor - start4;
									var r9 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r9.data = null;
									r9.cursor = 0;
									if(start4 < 0 || s4 < 0 || start4 > cff.data.get_length() || s4 > cff.data.get_length() - start4) {
										subrs = r9;
									} else {
										r9.data = cff.data.sub(start4,s4);
										subrs = r9;
									}
								} else {
									subrs = cff;
								}
							}
						}
					}
					has_subrs = true;
				}
			}
			if(sp < 1) {
				return false;
			}
			v = _g[--sp] | 0;
			if(subr_stack_height >= 10) {
				return false;
			}
			_g1[subr_stack_height++] = b;
			var idx = b0 == 10 ? subrs : info.gsubrs;
			var n = v;
			if(0 > idx.data.get_length()) {
				throw haxe_Exception.thrown("Error");
			}
			idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
			var v28 = 0;
			var _g22 = 0;
			while(_g22 < 2) {
				++_g22;
				var v29;
				if(idx.cursor >= idx.data.get_length()) {
					v29 = 0;
				} else {
					var pos45 = idx.cursor++;
					if(pos45 == null) {
						pos45 = 0;
					}
					v29 = idx.data.readU8(pos45);
				}
				v28 = v28 << 8 | v29;
			}
			var count2 = v28;
			var bias = 107;
			if(count2 >= 33900) {
				bias = 32768;
			} else if(count2 >= 1240) {
				bias = 1131;
			}
			n = v + bias;
			if(n < 0 || n >= count2) {
				var r10 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r10.data = null;
				r10.cursor = 0;
				b = r10;
			} else {
				if(0 > idx.data.get_length()) {
					throw haxe_Exception.thrown("Error");
				}
				idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
				var v30 = 0;
				var _g23 = 0;
				while(_g23 < 2) {
					++_g23;
					var v31;
					if(idx.cursor >= idx.data.get_length()) {
						v31 = 0;
					} else {
						var pos46 = idx.cursor++;
						if(pos46 == null) {
							pos46 = 0;
						}
						v31 = idx.data.readU8(pos46);
					}
					v30 = v30 << 8 | v31;
				}
				var count3 = v30;
				var offsize2;
				if(idx.cursor >= idx.data.get_length()) {
					offsize2 = 0;
				} else {
					var pos47 = idx.cursor++;
					if(pos47 == null) {
						pos47 = 0;
					}
					offsize2 = idx.data.readU8(pos47);
				}
				if(!(n >= 0 && n < count3)) {
					throw haxe_Exception.thrown("Error");
				}
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var o10 = idx.cursor + n * offsize2;
				if(o10 > idx.data.get_length() || o10 < 0) {
					throw haxe_Exception.thrown("Error");
				}
				idx.cursor = o10 > idx.data.get_length() || o10 < 0 ? idx.data.get_length() : o10;
				var v32 = 0;
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g24 = 0;
				var _g25 = offsize2;
				while(_g24 < _g25) {
					++_g24;
					var v33;
					if(idx.cursor >= idx.data.get_length()) {
						v33 = 0;
					} else {
						var pos48 = idx.cursor++;
						if(pos48 == null) {
							pos48 = 0;
						}
						v33 = idx.data.readU8(pos48);
					}
					v32 = v32 << 8 | v33;
				}
				var start5 = v32;
				var v34 = 0;
				if(!(offsize2 >= 1 && offsize2 <= 4)) {
					throw haxe_Exception.thrown("Error");
				}
				var _g26 = 0;
				var _g27 = offsize2;
				while(_g26 < _g27) {
					++_g26;
					var v35;
					if(idx.cursor >= idx.data.get_length()) {
						v35 = 0;
					} else {
						var pos49 = idx.cursor++;
						if(pos49 == null) {
							pos49 = 0;
						}
						v35 = idx.data.readU8(pos49);
					}
					v34 = v34 << 8 | v35;
				}
				var o11 = 2 + (count3 + 1) * offsize2 + start5;
				var s5 = v34 - start5;
				var r11 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r11.data = null;
				r11.cursor = 0;
				if(o11 < 0 || s5 < 0 || o11 > idx.data.get_length() || s5 > idx.data.get_length() - o11) {
					b = r11;
				} else {
					r11.data = idx.data.sub(o11,s5);
					b = r11;
				}
			}
			if(b.data.get_length() == 0) {
				return false;
			}
			b.cursor = 0;
			clear_stack = false;
			break;
		case 30:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx126 = c.x;
				var cy126 = c.y + _g[i];
				var cx213 = cx126 + _g[i + 1];
				var cy213 = cy126 + _g[i + 2];
				c.x = cx213 + _g[i + 3];
				c.y = cy213 + (sp - i == 5 ? _g[i + 4] : 0);
				var x27 = c.x | 0;
				var y27 = c.y | 0;
				var cx33 = cx126 | 0;
				var cy33 = cy126 | 0;
				var cx127 = cx213 | 0;
				var cy127 = cy213 | 0;
				if(c.bounds) {
					if(x27 > c.max_x || !c.started) {
						c.max_x = x27;
					}
					if(y27 > c.max_y || !c.started) {
						c.max_y = y27;
					}
					if(x27 < c.min_x || !c.started) {
						c.min_x = x27;
					}
					if(y27 < c.min_y || !c.started) {
						c.min_y = y27;
					}
					c.started = true;
					if(cx33 > c.max_x || !c.started) {
						c.max_x = cx33;
					}
					if(cy33 > c.max_y || !c.started) {
						c.max_y = cy33;
					}
					if(cx33 < c.min_x || !c.started) {
						c.min_x = cx33;
					}
					if(cy33 < c.min_y || !c.started) {
						c.min_y = cy33;
					}
					c.started = true;
					if(cx127 > c.max_x || !c.started) {
						c.max_x = cx127;
					}
					if(cy127 > c.max_y || !c.started) {
						c.max_y = cy127;
					}
					if(cx127 < c.min_x || !c.started) {
						c.min_x = cx127;
					}
					if(cy127 < c.min_y || !c.started) {
						c.min_y = cy127;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x27,y27,cx33,cy33);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx127 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy127 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx128 = c.x + _g[i];
				var cy128 = c.y;
				var cx214 = cx128 + _g[i + 1];
				var cy214 = cy128 + _g[i + 2];
				c.x = cx214 + (sp - i == 5 ? _g[i + 4] : 0);
				c.y = cy214 + _g[i + 3];
				var x28 = c.x | 0;
				var y28 = c.y | 0;
				var cx34 = cx128 | 0;
				var cy34 = cy128 | 0;
				var cx129 = cx214 | 0;
				var cy129 = cy214 | 0;
				if(c.bounds) {
					if(x28 > c.max_x || !c.started) {
						c.max_x = x28;
					}
					if(y28 > c.max_y || !c.started) {
						c.max_y = y28;
					}
					if(x28 < c.min_x || !c.started) {
						c.min_x = x28;
					}
					if(y28 < c.min_y || !c.started) {
						c.min_y = y28;
					}
					c.started = true;
					if(cx34 > c.max_x || !c.started) {
						c.max_x = cx34;
					}
					if(cy34 > c.max_y || !c.started) {
						c.max_y = cy34;
					}
					if(cx34 < c.min_x || !c.started) {
						c.min_x = cx34;
					}
					if(cy34 < c.min_y || !c.started) {
						c.min_y = cy34;
					}
					c.started = true;
					if(cx129 > c.max_x || !c.started) {
						c.max_x = cx129;
					}
					if(cy129 > c.max_y || !c.started) {
						c.max_y = cy129;
					}
					if(cx129 < c.min_x || !c.started) {
						c.min_x = cx129;
					}
					if(cy129 < c.min_y || !c.started) {
						c.min_y = cy129;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x28,y28,cx34,cy34);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx129 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy129 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		case 31:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx130 = c.x + _g[i];
				var cy130 = c.y;
				var cx215 = cx130 + _g[i + 1];
				var cy215 = cy130 + _g[i + 2];
				c.x = cx215 + (sp - i == 5 ? _g[i + 4] : 0);
				c.y = cy215 + _g[i + 3];
				var x29 = c.x | 0;
				var y29 = c.y | 0;
				var cx35 = cx130 | 0;
				var cy35 = cy130 | 0;
				var cx131 = cx215 | 0;
				var cy131 = cy215 | 0;
				if(c.bounds) {
					if(x29 > c.max_x || !c.started) {
						c.max_x = x29;
					}
					if(y29 > c.max_y || !c.started) {
						c.max_y = y29;
					}
					if(x29 < c.min_x || !c.started) {
						c.min_x = x29;
					}
					if(y29 < c.min_y || !c.started) {
						c.min_y = y29;
					}
					c.started = true;
					if(cx35 > c.max_x || !c.started) {
						c.max_x = cx35;
					}
					if(cy35 > c.max_y || !c.started) {
						c.max_y = cy35;
					}
					if(cx35 < c.min_x || !c.started) {
						c.min_x = cx35;
					}
					if(cy35 < c.min_y || !c.started) {
						c.min_y = cy35;
					}
					c.started = true;
					if(cx131 > c.max_x || !c.started) {
						c.max_x = cx131;
					}
					if(cy131 > c.max_y || !c.started) {
						c.max_y = cy131;
					}
					if(cx131 < c.min_x || !c.started) {
						c.min_x = cx131;
					}
					if(cy131 < c.min_y || !c.started) {
						c.min_y = cy131;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x29,y29,cx35,cy35);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx131 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy131 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx132 = c.x;
				var cy132 = c.y + _g[i];
				var cx216 = cx132 + _g[i + 1];
				var cy216 = cy132 + _g[i + 2];
				c.x = cx216 + _g[i + 3];
				c.y = cy216 + (sp - i == 5 ? _g[i + 4] : 0);
				var x30 = c.x | 0;
				var y30 = c.y | 0;
				var cx36 = cx132 | 0;
				var cy36 = cy132 | 0;
				var cx133 = cx216 | 0;
				var cy133 = cy216 | 0;
				if(c.bounds) {
					if(x30 > c.max_x || !c.started) {
						c.max_x = x30;
					}
					if(y30 > c.max_y || !c.started) {
						c.max_y = y30;
					}
					if(x30 < c.min_x || !c.started) {
						c.min_x = x30;
					}
					if(y30 < c.min_y || !c.started) {
						c.min_y = y30;
					}
					c.started = true;
					if(cx36 > c.max_x || !c.started) {
						c.max_x = cx36;
					}
					if(cy36 > c.max_y || !c.started) {
						c.max_y = cy36;
					}
					if(cx36 < c.min_x || !c.started) {
						c.min_x = cx36;
					}
					if(cy36 < c.min_y || !c.started) {
						c.min_y = cy36;
					}
					c.started = true;
					if(cx133 > c.max_x || !c.started) {
						c.max_x = cx133;
					}
					if(cy133 > c.max_y || !c.started) {
						c.max_y = cy133;
					}
					if(cx133 < c.min_x || !c.started) {
						c.min_x = cx133;
					}
					if(cy133 < c.min_y || !c.started) {
						c.min_y = cy133;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x30,y30,cx36,cy36);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx133 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy133 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		default:
			if(b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
				return false;
			}
			if(b0 == 255) {
				var v36 = 0;
				var _g28 = 0;
				while(_g28 < 4) {
					++_g28;
					var v37;
					if(b.cursor >= b.data.get_length()) {
						v37 = 0;
					} else {
						var pos50 = b.cursor++;
						if(pos50 == null) {
							pos50 = 0;
						}
						v37 = b.data.readU8(pos50);
					}
					v36 = v36 << 8 | v37;
				}
				f = v36 / 65536;
			} else {
				var o12 = b.cursor + (-1);
				if(o12 > b.data.get_length() || o12 < 0) {
					throw haxe_Exception.thrown("Error");
				}
				b.cursor = o12 > b.data.get_length() || o12 < 0 ? b.data.get_length() : o12;
				var b07;
				if(b.cursor >= b.data.get_length()) {
					b07 = 0;
				} else {
					var pos51 = b.cursor++;
					if(pos51 == null) {
						pos51 = 0;
					}
					b07 = b.data.readU8(pos51);
				}
				if(b07 >= 32 && b07 <= 246) {
					f = b07 - 139;
				} else if(b07 >= 247 && b07 <= 250) {
					var f1;
					if(b.cursor >= b.data.get_length()) {
						f1 = 0;
					} else {
						var pos52 = b.cursor++;
						if(pos52 == null) {
							pos52 = 0;
						}
						f1 = b.data.readU8(pos52);
					}
					f = (b07 - 247) * 256 + f1 + 108;
				} else if(b07 >= 251 && b07 <= 254) {
					var f2;
					if(b.cursor >= b.data.get_length()) {
						f2 = 0;
					} else {
						var pos53 = b.cursor++;
						if(pos53 == null) {
							pos53 = 0;
						}
						f2 = b.data.readU8(pos53);
					}
					f = -(b07 - 251) * 256 - f2 - 108;
				} else if(b07 == 28) {
					var v38 = 0;
					var _g29 = 0;
					while(_g29 < 2) {
						++_g29;
						var v39;
						if(b.cursor >= b.data.get_length()) {
							v39 = 0;
						} else {
							var pos54 = b.cursor++;
							if(pos54 == null) {
								pos54 = 0;
							}
							v39 = b.data.readU8(pos54);
						}
						v38 = v38 << 8 | v39;
					}
					f = v38;
				} else if(b07 == 29) {
					var v40 = 0;
					var _g30 = 0;
					while(_g30 < 4) {
						++_g30;
						var v41;
						if(b.cursor >= b.data.get_length()) {
							v41 = 0;
						} else {
							var pos55 = b.cursor++;
							if(pos55 == null) {
								pos55 = 0;
							}
							v41 = b.data.readU8(pos55);
						}
						v40 = v40 << 8 | v41;
					}
					f = v40;
				} else {
					throw haxe_Exception.thrown("Error");
				}
			}
			if(sp >= 48) {
				return false;
			}
			_g[sp++] = f;
			clear_stack = false;
		}
		if(clear_stack) {
			sp = 0;
		}
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2 = function(info,glyph_index) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var tmp1 = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp1.bounds = false;
	tmp1.started = false;
	tmp1.first_x = 0;
	tmp1.first_y = 0;
	tmp1.x = 0;
	tmp1.y = 0;
	tmp1.min_x = 0;
	tmp1.min_y = 0;
	tmp1.max_x = 0;
	tmp1.max_y = 0;
	tmp1.pvertices = null;
	tmp1.num_vertices = 0;
	if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,tmp)) {
		tmp1.pvertices = new Array(tmp.num_vertices);
		var _g = 0;
		var _g1 = tmp.num_vertices;
		while(_g < _g1) tmp1.pvertices[_g++] = new kha_graphics2_truetype_Stbtt_$vertex();
		if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,tmp1)) {
			if(tmp1.num_vertices != tmp.num_vertices) {
				throw haxe_Exception.thrown("Error");
			}
			return tmp1.pvertices;
		}
	}
	return null;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2 = function(info,glyph_index,rect) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var r = kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,tmp);
	if(rect != null) {
		rect.x0 = r ? tmp.min_x : 0;
		rect.y0 = r ? tmp.min_y : 0;
		rect.x1 = r ? tmp.max_x : 0;
		rect.y1 = r ? tmp.max_y : 0;
	}
	if(r) {
		return tmp.num_vertices;
	} else {
		return 0;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	if(info.cff.data == null || info.cff.data.get_length() == 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT(info,glyph_index);
	} else {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2(info,glyph_index);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var numOfLongHorMetrics = p.readU8(pos + 1) | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p = info.data;
		var pos = info.hmtx + 4 * glyph_index;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = info.hmtx + 4 * glyph_index + 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		metrics.leftSideBearing = (n & 32768) != 0 ? n - 65536 : n;
	} else {
		var p = info.data;
		var pos = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p = info.data;
		var pos = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var n = p.readU8(pos + 1) | ch1 << 8;
		metrics.leftSideBearing = (n & 32768) != 0 ? n - 65536 : n;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var n = p.readU8(pos + 1) | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.hhea + 6;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var n = p.readU8(pos + 1) | ch1 << 8;
	metrics.descent = (n & 32768) != 0 ? n - 65536 : n;
	var p = info.data;
	var pos = info.hhea + 8;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var n = p.readU8(pos + 1) | ch1 << 8;
	metrics.lineGap = (n & 32768) != 0 ? n - 65536 : n;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var n = p.readU8(pos + 1) | ch1 << 8;
	var p = info.data;
	var pos = info.hhea + 6;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var n1 = p.readU8(pos + 1) | ch1 << 8;
	return height / (((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var y0 = rect.y0;
		rect.x0 = Math.floor(rect.x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-rect.y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(rect.x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		throw haxe_Exception.thrown("Error");
	}
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw haxe_Exception.thrown("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw haxe_Exception.thrown("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw haxe_Exception.thrown("Error");
	}
	if(x0 <= x && x1 <= x) {
		scanline[scanlineIndex + x] += e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw haxe_Exception.thrown("Error");
		}
		scanline[scanlineIndex + x] += e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw haxe_Exception.thrown("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw haxe_Exception.thrown("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw haxe_Exception.thrown("Error");
					}
					scanline[x] += e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					scanline_fill[scanline_fillIndex + x] += e.direction * height;
				} else {
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dy = -dy;
						x01 = xb;
					}
					var x1 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x1 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					scanline[x1] += area * (1 - (x_top - x1 + (x1 + 1 - x1)) / 2);
					var step = sign * dy;
					var _g = x1 + 1;
					while(_g < x2) {
						scanline[_g++] += area + step / 2;
						area += step;
					}
					y_crossing += dy * (x2 - (x1 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw haxe_Exception.thrown("Error");
					}
					scanline[x2] += area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing);
					scanline_fill[scanline_fillIndex + x2] += sign * (sy1 - sy0);
				}
			} else {
				var _g1 = 0;
				while(_g1 < len) {
					var x3 = _g1++;
					var x11 = x3;
					var x21 = x3 + 1;
					var x31 = xb;
					var y1 = (x3 - x01) / dx + y_top;
					var y2 = (x3 + 1 - x01) / dx + y_top;
					if(x01 < x11 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x11,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x21,y2,x31,y_bottom);
					} else if(x31 < x11 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x21,y2,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x11,y1,x31,y_bottom);
					} else if(x01 < x11 && x31 > x11) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x11,y1,x31,y_bottom);
					} else if(x31 < x11 && x01 > x11) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x11,y1,x31,y_bottom);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x21,y2,x31,y_bottom);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x21,y2,x31,y_bottom);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x3,e,x01,y_top,x31,y_bottom);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		scanline = new Array(result.w * 2 + 1);
	} else {
		scanline = new Array(129);
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) scanline[_g++] = 0;
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) scanline2[scanline2Index + _g2++] = 0;
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw haxe_Exception.thrown("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw haxe_Exception.thrown("Error");
				}
				if(z1 != null) {
					if(j == 0 && off_y != 0) {
						if(z1.ey < scan_y_top) {
							z1.ey = scan_y_top;
						}
					}
					if(!(z1.ey >= scan_y_top)) {
						throw haxe_Exception.thrown("Error");
					}
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i = _g4++;
			sum += scanline2[scanline2Index + i];
			var k = scanline[i] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i,m);
		}
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var j;
	var _g = 1;
	while(_g < n) {
		var i = _g++;
		var t = p[i];
		j = i;
		while(j > 0) {
			if(!kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(t,p[j - 1])) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]) != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var j;
	var n = 0;
	var _g = 0;
	while(_g < windings) n += wcount[_g++];
	var e = new Array(n + 1);
	if(e == null) {
		return;
	} else {
		var _g = 0;
		var _g1 = e.length;
		while(_g < _g1) e[_g++] = new kha_graphics2_truetype_Stbtt_$_$edge();
	}
	n = 0;
	var m = 0;
	var _g = 0;
	while(_g < windings) {
		var i = _g++;
		var pIndex = m;
		m += wcount[i];
		j = wcount[i] - 1;
		var _g1 = 0;
		var _g2 = wcount[i];
		while(_g1 < _g2) {
			var k = _g1++;
			var a = k;
			var b = j;
			if(pts[pIndex + j].y == pts[pIndex + k].y) {
				j = k;
				continue;
			}
			e[n].invert = false;
			if(invert ? pts[pIndex + j].y > pts[pIndex + k].y : pts[pIndex + j].y < pts[pIndex + k].y) {
				e[n].invert = true;
				a = j;
				b = k;
			}
			e[n].x0 = pts[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = pts[pIndex + a].y * y_scale_inv + shift_y;
			e[n].x1 = pts[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = pts[pIndex + b].y * y_scale_inv + shift_y;
			++n;
			j = k;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,1,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic = function(points,num_points,x0,y0,x1,y1,x2,y2,x3,y3,objspace_flatness_squared,n) {
	while(true) {
		var dx0 = x1 - x0;
		var dy0 = y1 - y0;
		var dx1 = x2 - x1;
		var dy1 = y2 - y1;
		var dx2 = x3 - x2;
		var dy2 = y3 - y2;
		var dx = x3 - x0;
		var dy = y3 - y0;
		var longlen = Math.sqrt(dx0 * dx0 + dy0 * dy0) + Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2);
		var shortlen = Math.sqrt(dx * dx + dy * dy);
		if(n > 16) {
			return;
		}
		if(longlen * longlen - shortlen * shortlen > objspace_flatness_squared) {
			var x01 = (x0 + x1) / 2;
			var y01 = (y0 + y1) / 2;
			var x12 = (x1 + x2) / 2;
			var y12 = (y1 + y2) / 2;
			var x23 = (x2 + x3) / 2;
			var y23 = (y2 + y3) / 2;
			var xa = (x01 + x12) / 2;
			var ya = (y01 + y12) / 2;
			var xb = (x12 + x23) / 2;
			var yb = (y12 + y23) / 2;
			var mx = (xa + xb) / 2;
			var my = (ya + yb) / 2;
			kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,x0,y0,x01,y01,xa,ya,mx,my,objspace_flatness_squared,n + 1);
			x0 = mx;
			y0 = my;
			x1 = xb;
			y1 = yb;
			x2 = x23;
			y2 = y23;
			n += 1;
			continue;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x3,y3);
			num_points.value += 1;
		}
		return;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var n = 0;
	var start = 0;
	var _g = 0;
	while(_g < num_verts) if(vertices[_g++].type == 1) {
		++n;
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	contour_lengths.value = new Array(n);
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g = 0;
	while(_g < 2) {
		var x = 0;
		var y = 0;
		if(_g++ == 1) {
			points = new Array(num_points);
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g1 = 0;
				var _g2 = points.length;
				while(_g1 < _g2) points[_g1++] = new kha_graphics2_truetype_Stbtt_$_$point();
			}
		}
		num_points = 0;
		n = -1;
		var _g3 = 0;
		while(_g3 < num_verts) {
			var i = _g3++;
			switch(vertices[i].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i].x;
				y = vertices[i].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i].x;
				y = vertices[i].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i].cx,vertices[i].cy,vertices[i].x,vertices[i].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i].x;
				y = vertices[i].y;
				break;
			case 4:
				var num_points_reference1 = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points_reference1,x,y,vertices[i].cx,vertices[i].cy,vertices[i].cx1,vertices[i].cy1,vertices[i].x,vertices[i].y,objspace_flatness_squared,0);
				num_points = num_points_reference1.value;
				x = vertices[i].x;
				y = vertices[i].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : 0};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / (scale_x > scale_y ? scale_y : scale_x),winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = 1;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,chars[_g++]);
		var advance = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g).advanceWidth;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var gw = rect.x1 - x0;
		var gh = rect.y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw haxe_Exception.thrown("Error");
		}
		if(y + gh >= ph) {
			throw haxe_Exception.thrown("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g = 0;
	var _g1 = pw * ph;
	while(_g < _g1) pixels.writeU8(_g++,0);
	i = 0;
	var ch;
	var _g = 0;
	while(_g < chars.length) {
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,chars[_g++]);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g);
		++i;
	}
	return bottom_y;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = true;
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = true;
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		}
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_g2: function() {
		return null;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) this.sources.push(sources[_g++].toString());
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = true;
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function() { };
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = true;
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = true;
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,end: null
	,clear: null
	,setVertexBuffer: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureParameters: null
	,setPipeline: null
	,setFloat: null
	,setVector3: null
	,setMatrix: null
	,drawIndexedVertices: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_InternalPipeline = function(pipeline,projectionLocation,textureLocation) {
	this.pipeline = pipeline;
	this.projectionLocation = projectionLocation;
	this.textureLocation = textureLocation;
};
$hxClasses["kha.graphics4.InternalPipeline"] = kha_graphics4_InternalPipeline;
kha_graphics4_InternalPipeline.__name__ = true;
kha_graphics4_InternalPipeline.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_InternalPipeline
};
var kha_graphics4_PipelineCache = function() { };
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = true;
kha_graphics4_PipelineCache.__isInterface__ = true;
kha_graphics4_PipelineCache.prototype = {
	get: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_PerFramebufferPipelineCache = function(pipeline,texture) {
	this.pipelines = [];
	pipeline.compile();
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( _g ) {
		haxe_Log.trace(haxe_Exception.caught(_g).unwrap(),{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 90, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( _g ) {
			haxe_Log.trace(haxe_Exception.caught(_g).unwrap(),{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 99, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
		}
	}
	this.pipelines.push(new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation));
};
$hxClasses["kha.graphics4.PerFramebufferPipelineCache"] = kha_graphics4_PerFramebufferPipelineCache;
kha_graphics4_PerFramebufferPipelineCache.__name__ = true;
kha_graphics4_PerFramebufferPipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_PerFramebufferPipelineCache.prototype = {
	pipelines: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipelines[this.hash(colorFormats,depthStencilFormat)];
	}
	,hash: function(colorFormats,depthStencilFormat) {
		return 0;
	}
	,__class__: kha_graphics4_PerFramebufferPipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferStart = 0;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = true;
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PerFramebufferPipelineCache(kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure),true);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices.setUint32(i * 3 * 2 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 1) * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 2) * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 3) * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 4) * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 5) * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,drawBuffer: function(end) {
		if(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart == 0) {
			return;
		}
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock((kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(kha_graphics4_ImageShaderPainter.bufferStart * 2 * 3,(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		if(end || (kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1) * 4 >= 1500) {
			kha_graphics4_ImageShaderPainter.bufferStart = 0;
			kha_graphics4_ImageShaderPainter.bufferIndex = 0;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(0);
		} else {
			kha_graphics4_ImageShaderPainter.bufferStart = kha_graphics4_ImageShaderPainter.bufferIndex;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(kha_graphics4_ImageShaderPainter.bufferStart * 4);
		}
	}
	,setBilinearFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinear = bilinear;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = true;
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PerFramebufferPipelineCache(kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure),false);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices.setUint32(i * 3 * 2 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 1) * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 2) * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 3) * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 4) * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 5) * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				triIndices.setUint32(i * 3 * 4,i * 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
				triIndices.setUint32((i * 3 + 1) * 4,i * 3 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				triIndices.setUint32((i * 3 + 2) * 4,i * 3 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 4 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 4) * 4,topleftx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 5) * 4,toplefty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 6) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 8) * 4,toprightx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 9) * 4,toprighty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 10) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 12) * 4,bottomrightx,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 13) * 4,bottomrighty,true);
		kha_graphics4_ColoredShaderPainter.rectVertices.setFloat32((baseIndex + 14) * 4,-5.0,true);
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 4 * 4 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 12 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 28 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.rectVertices.setUint8(baseIndex + 60 + 3,a * 255 | 0);
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 4 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32(baseIndex * 4,x1,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 1) * 4,y1,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 4) * 4,x2,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 5) * 4,y2,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 6) * 4,-5.0,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 8) * 4,x3,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 9) * 4,y3,true);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setFloat32((baseIndex + 10) * 4,-5.0,true);
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 4 * 4 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 12 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 28 + 3,a * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ColoredShaderPainter.triangleVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
	}
	,drawBuffer: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex == 0) {
			return;
		}
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,__class__: kha_graphics4_ColoredShaderPainter
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = true;
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PerFramebufferPipelineCache(kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure),true);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices.setUint32(i * 3 * 2 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 1) * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 2) * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 3) * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 4) * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
				indices.setUint32((i * 3 * 2 + 5) * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 9) * 4,topleftx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 10) * 4,toplefty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 11) * 4,-5.0,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 18) * 4,toprightx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 19) * 4,toprighty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 20) * 4,-5.0,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 27) * 4,bottomrightx,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 28) * 4,bottomrighty,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 29) * 4,-5.0,true);
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 3) * 4,left,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 4) * 4,bottom,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 12) * 4,left,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 13) * 4,top,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 21) * 4,right,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 22) * 4,top,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 30) * 4,right,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 31) * 4,bottom,true);
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 5) * 4,((color & 16711680) >>> 16) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 6) * 4,((color & 65280) >>> 8) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 7) * 4,(color & 255) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 8) * 4,a,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 14) * 4,((color & 16711680) >>> 16) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 15) * 4,((color & 65280) >>> 8) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 16) * 4,(color & 255) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 17) * 4,a,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 23) * 4,((color & 16711680) >>> 16) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 24) * 4,((color & 65280) >>> 8) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 25) * 4,(color & 255) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 26) * 4,a,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 32) * 4,((color & 16711680) >>> 16) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 33) * 4,((color & 65280) >>> 8) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 34) * 4,(color & 255) * 0.00392156862745098,true);
		kha_graphics4_TextShaderPainter.rectVertices.setFloat32((baseIndex + 35) * 4,a,true);
	}
	,drawBuffer: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex == 0) {
			return;
		}
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var charCode = text.charCodeAt(_g++);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,y);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x == null) {
					x = 0;
				}
				var value_x = x;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x2 = x1;
				var y3 = y2;
				if(y2 == null) {
					y3 = 0;
				}
				if(x1 == null) {
					x2 = 0;
				}
				var x3 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var value_x1 = x3;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x4 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x5 = x4;
				var y6 = y5;
				if(y5 == null) {
					y6 = 0;
				}
				if(x4 == null) {
					x5 = 0;
				}
				var x6 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var value_x2 = x6;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x7 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x8 = x7;
				var y9 = y8;
				if(y8 == null) {
					y9 = 0;
				}
				if(x7 == null) {
					x8 = 0;
				}
				var x9 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var value_x3 = x9;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x10 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x11 = x10;
				var y12 = y11;
				if(y11 == null) {
					y12 = 0;
				}
				if(x10 == null) {
					x11 = 0;
				}
				this.setRectVertices(x2,y3,x5,y6,x8,y9,x11,y12);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = true;
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexUV",1);
	structure.add("vertexColor",16);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",16);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexUV",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			_this._00 = 2 / width;
			_this._10 = 0;
			_this._20 = 0;
			_this._30 = -width / width;
			_this._01 = 0;
			_this._11 = 2.0 / (0 - height);
			_this._21 = 0;
			_this._31 = -height / (0 - height);
			_this._02 = 0;
			_this._12 = 0;
			_this._22 = -0.002000200020002;
			_this._32 = -1.0002000200020003;
			_this._03 = 0;
			_this._13 = 0;
			_this._23 = 0;
			_this._33 = 1;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this = this.projectionMatrix;
				_this._00 = 2 / width;
				_this._10 = 0;
				_this._20 = 0;
				_this._30 = -width / width;
				_this._01 = 0;
				_this._11 = 2.0 / height;
				_this._21 = 0;
				_this._31 = -height / height;
				_this._02 = 0;
				_this._12 = 0;
				_this._22 = -0.002000200020002;
				_this._32 = -1.0002000200020003;
				_this._03 = 0;
				_this._13 = 0;
				_this._23 = 0;
				_this._33 = 1;
			} else {
				var _this = this.projectionMatrix;
				_this._00 = 2 / width;
				_this._10 = 0;
				_this._20 = 0;
				_this._30 = -width / width;
				_this._01 = 0;
				_this._11 = 2.0 / (0 - height);
				_this._21 = 0;
				_this._31 = -height / (0 - height);
				_this._02 = 0;
				_this._12 = 0;
				_this._22 = -0.002000200020002;
				_this._32 = -1.0002000200020003;
				_this._03 = 0;
				_this._13 = 0;
				_this._23 = 0;
				_this._33 = 1;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(yh == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y1 == null) {
			y2 = 0;
		}
		if(x1 == null) {
			x2 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y3 = y1;
		if(y1 == null) {
			y3 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = xw;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(xw == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x3 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = xw;
		var y = yh;
		if(yh == null) {
			y = 0;
		}
		if(xw == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x4 = x;
		var y4 = y;
		if(y == null) {
			y4 = 0;
		}
		if(x == null) {
			x4 = 0;
		}
		var _this = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
		var right = img.get_width() / img.get_realWidth();
		var bottom = img.get_height() / img.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,x2,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,y2,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,x1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,y3,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,x3,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,y1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,x4,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,y4,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(dx == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy;
		if(dy == null) {
			y = 0;
		}
		if(dx == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x;
		var y2 = y;
		if(y == null) {
			y2 = 0;
		}
		if(x == null) {
			x2 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = dx + dw;
		var y = dy;
		if(dy == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x;
		var y3 = y;
		if(y == null) {
			y3 = 0;
		}
		if(x == null) {
			x3 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = dx + dw;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x4 = x;
		var y4 = y;
		if(y == null) {
			y4 = 0;
		}
		if(x == null) {
			x4 = 0;
		}
		var _this = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this.drawBuffer(false);
		}
		var left = sx / img.get_realWidth();
		var top = sy / img.get_realHeight();
		var right = (sx + sw) / img.get_realWidth();
		var bottom = (sy + sh) / img.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 12,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 16,bottom,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 36,left,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 40,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 60,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 64,top,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 84,right,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 88,bottom,true);
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 20 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 44 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 68 + 3,a * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92,r * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 1,g * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 2,b * 255 | 0);
		kha_graphics4_ImageShaderPainter.rectVertices.setUint8(baseIndex + 92 + 3,a * 255 | 0);
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 6 * 4 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex,x1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 4,y1,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 8,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 24,x2,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 28,y2,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 32,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 48,x3,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 52,y3,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 56,-5.0,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 72,x4,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 76,y4,true);
		kha_graphics4_ImageShaderPainter.rectVertices.setFloat32(baseIndex + 80,-5.0,true);
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y1 == null) {
			y2 = 0;
		}
		if(x1 == null) {
			x2 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x1;
		var y3 = y1;
		if(y1 == null) {
			y3 = 0;
		}
		if(x1 == null) {
			x3 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x4 = x1;
		var y4 = y1;
		if(y1 == null) {
			y4 = 0;
		}
		if(x1 == null) {
			x4 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x1 = x + width;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),x2,y2,x3,y3,x4,y4,x1,y1);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			vec_x = 0;
			vec_y = -1;
		} else {
			var y = -(x2 - x1) / (y2 - y1);
			if(y == null) {
				y = 0;
			}
			vec_x = 1;
			vec_y = y;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x = x1 + 0.5 * vec_x;
		var y = y1 + 0.5 * vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p1_x = x;
		var p1_y = y;
		var x = x2 + 0.5 * vec_x;
		var y = y2 + 0.5 * vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p2_x = x;
		var p2_y = y;
		var x = p1_x - vec_x;
		var y = p1_y - vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p3_x = x;
		var p3_y = y;
		var x = p2_x - vec_x;
		var y = p2_y - vec_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p4_x = x;
		var p4_y = y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		p1_x = x1;
		p1_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p2_x + _this._12 * p2_y + _this._22;
		var x = (_this._00 * p2_x + _this._10 * p2_y + _this._20) / w;
		var y = (_this._01 * p2_x + _this._11 * p2_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		p2_x = x1;
		p2_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p3_x + _this._12 * p3_y + _this._22;
		var x = (_this._00 * p3_x + _this._10 * p3_y + _this._20) / w;
		var y = (_this._01 * p3_x + _this._11 * p3_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		p3_x = x1;
		p3_y = y1;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p4_x + _this._12 * p4_y + _this._22;
		var x = (_this._00 * p4_x + _this._10 * p4_y + _this._20) / w;
		var y = (_this._01 * p4_x + _this._11 * p4_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		p4_x = x1;
		p4_y = y1;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y1 == null) {
			y = 0;
		}
		if(x1 == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x1 = x;
		var y1 = y;
		if(y == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = x2;
		var y = y2;
		if(y2 == null) {
			y = 0;
		}
		if(x2 == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x2 = x;
		var y2 = y;
		if(y == null) {
			y2 = 0;
		}
		if(x == null) {
			x2 = 0;
		}
		var _this = this.transformations[this.transformationIndex];
		var x = x3;
		var y = y3;
		if(y3 == null) {
			y = 0;
		}
		if(x3 == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x;
		var y3 = y;
		if(y == null) {
			y3 = 0;
		}
		if(x == null) {
			x3 = 0;
		}
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),x1,y1,x2,y2,x3,y3);
	}
	,myImageScaleQuality: null
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw haxe_Exception.thrown("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw haxe_Exception.thrown("Begin before you end");
		}
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = kha_arrays_Uint32Array._new(indexCount);
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = true;
kha_graphics4_IndexBuffer.prototype = {
	_data: null
	,buffer: null
	,mySize: null
	,usage: null
	,lockStart: null
	,lockEnd: null
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		var end = this.lockEnd;
		var start = this.lockStart * 4;
		var end1 = end != null ? end * 4 : null;
		return kha_arrays_ByteArray._new(this._data.buffer,start,end1 != null ? end1 - start : null);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var end = this.lockEnd;
		var start = this.lockStart * 4;
		var end1 = end != null ? end * 4 : null;
		var data = kha_arrays_ByteArray._new(this._data.buffer,start,end1 != null ? end1 - start : null);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(data.buffer) : data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilFrontMode = 0;
	this.stencilFrontBothPass = 0;
	this.stencilFrontDepthFail = 0;
	this.stencilFrontFail = 0;
	this.stencilBackMode = 0;
	this.stencilBackBothPass = 0;
	this.stencilBackDepthFail = 0;
	this.stencilBackFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorAttachmentCount = 1;
	this.colorAttachments = [];
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.depthStencilAttachment = 0;
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = true;
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilFrontMode: null
	,stencilFrontBothPass: null
	,stencilFrontDepthFail: null
	,stencilFrontFail: null
	,stencilBackMode: null
	,stencilBackBothPass: null
	,stencilBackDepthFail: null
	,stencilBackFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,colorAttachmentCount: null
	,colorAttachments: null
	,depthStencilAttachment: null
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = true;
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].elements;
			while(_g2 < _g3.length) {
				var element = _g3[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			var message = "Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program);
			haxe_Log.trace("Error: " + message,{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 49, className : "kha.graphics4.PipelineState", methodName : "compile"});
			throw haxe_Exception.thrown(message);
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMasksRed[0],this.colorWriteMasksGreen[0],this.colorWriteMasksBlue[0],this.colorWriteMasksAlpha[0]);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highp = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338);
		var highpSupported = highp.precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			var message = "Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s);
			haxe_Log.trace("Error: " + message,{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 89, className : "kha.graphics4.PipelineState", methodName : "compileShader"});
			throw haxe_Exception.thrown(message);
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 98, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		while(_g < count) {
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,_g++);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 117, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__:true,__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_._hx_name="Static",$_.__params__ = ["value"],$_)
};
kha_graphics4_StencilValue.__constructs__ = [kha_graphics4_StencilValue.Dynamic,kha_graphics4_StencilValue.Static];
var kha_graphics4_TessellationControlShader = function() { };
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = true;
var kha_graphics4_TessellationEvaluationShader = function() { };
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = true;
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = true;
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) this.myStride += kha_graphics4_VertexStructure.dataByteSize(_g1[_g++].data);
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = kha_arrays_ByteArray.make(vertexCount * this.myStride);
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		var size;
		var type;
		switch(element.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:case 7:
			size = 1;
			type = 5120;
			break;
		case 6:case 8:
			size = 1;
			type = 5121;
			break;
		case 9:case 11:
			size = 2;
			type = 5120;
			break;
		case 10:case 12:
			size = 2;
			type = 5121;
			break;
		case 13:case 15:
			size = 4;
			type = 5120;
			break;
		case 14:case 16:
			size = 4;
			type = 5121;
			break;
		case 17:case 19:
			size = 1;
			type = 5122;
			break;
		case 18:case 20:
			size = 1;
			type = 5123;
			break;
		case 21:case 23:
			size = 2;
			type = 5122;
			break;
		case 22:case 24:
			size = 2;
			type = 5123;
			break;
		case 25:case 27:
			size = 4;
			type = 5122;
			break;
		case 26:case 28:
			size = 4;
			type = 5123;
			break;
		case 29:
			size = 1;
			type = 5124;
			break;
		case 30:
			size = 1;
			type = 5125;
			break;
		case 31:
			size = 2;
			type = 5124;
			break;
		case 32:
			size = 2;
			type = 5125;
			break;
		case 33:
			size = 3;
			type = 5124;
			break;
		case 34:
			size = 3;
			type = 5125;
			break;
		case 35:
			size = 4;
			type = 5124;
			break;
		case 36:
			size = 4;
			type = 5125;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		offset += kha_graphics4_VertexStructure.dataByteSize(element.data);
		++index;
	}
	kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
	var tmp = kha_SystemImpl.gl;
	var this1 = this._data;
	var start = 0 * this.stride();
	var end = this.mySize * this.stride();
	tmp.bufferData(34962,kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null),usage == 1 ? 35048 : 35044);
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = true;
kha_graphics4_VertexBuffer.prototype = {
	_data: null
	,buffer: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,instanceDataStepRate: null
	,lockStart: null
	,lockEnd: null
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		var this1 = this._data;
		var start = this.lockStart * this.stride();
		var end = this.lockEnd * this.stride();
		return kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		if(kha_SystemImpl.safari) {
			var tmp = kha_SystemImpl.gl;
			var this1 = this._data;
			var start = 0 * this.stride();
			var end = this.lockEnd * this.stride();
			tmp.bufferData(34962,kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null),35048);
		} else {
			var tmp = kha_SystemImpl.gl;
			var tmp1 = this.lockStart * this.stride();
			var this1 = this._data;
			var start = this.lockStart * this.stride();
			var end = this.lockEnd * this.stride();
			tmp.bufferSubData(34962,tmp1,kha_arrays_ByteArray._new(this1.buffer,start,end != null ? end - start : null));
		}
	}
	,stride: function() {
		return this.myStride;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = true;
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) this.sources.push(sources[_g++].toString());
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = true;
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = true;
kha_graphics4_VertexStructure.dataByteSize = function(data) {
	switch(data) {
	case 0:
		return 4;
	case 1:
		return 8;
	case 2:
		return 12;
	case 3:
		return 16;
	case 4:
		return 64;
	case 5:case 6:case 7:case 8:
		return 1;
	case 9:case 10:case 11:case 12:
		return 2;
	case 13:case 14:case 15:case 16:
		return 4;
	case 17:case 18:case 19:case 20:
		return 2;
	case 21:case 22:case 23:case 24:
		return 4;
	case 25:case 26:case 27:case 28:
		return 8;
	case 29:case 30:
		return 4;
	case 31:case 32:
		return 8;
	case 33:case 34:
		return 12;
	case 35:case 36:
		return 16;
	}
};
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.buttonListeners = [];
	this.axisListeners = [];
	this.connected = false;
	this.index = index;
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = true;
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) _g1[_g++](index);
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) _g1[_g++](index);
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,vendor: null
	,connected: null
	,rumble: function(leftAmount,rightAmount) {
	}
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,get_vendor: function() {
		return kha_SystemImpl.getGamepadVendor(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) _g1[_g++](axis,value);
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) _g1[_g++](button,value);
	}
	,__class__: kha_input_Gamepad
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_name:"Full",_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_name:"None",_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["func"],$_)
};
kha_input_BlockInterventions.__constructs__ = [kha_input_BlockInterventions.Default,kha_input_BlockInterventions.Full,kha_input_BlockInterventions.None,kha_input_BlockInterventions.Custom];
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = true;
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = true;
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,0);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) _g1[_g++](code);
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,1);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) _g1[_g++](code);
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			bytes.b[4] = HxOverrides.cca(char,0);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) _g1[_g++](char);
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			this.sendDownEvent(bytes.b[4]);
			return;
		}
		if(funcindex == 1) {
			this.sendUpEvent(bytes.b[4]);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.b[4];
			var input0 = String.fromCodePoint(code);
			this.sendPressEvent(input0);
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_MouseEventBlockBehavior = $hxEnums["kha.input.MouseEventBlockBehavior"] = { __ename__:true,__constructs__:null
	,Full: {_hx_name:"Full",_hx_index:0,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,None: {_hx_name:"None",_hx_index:1,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["func"],$_)
};
kha_input_MouseEventBlockBehavior.__constructs__ = [kha_input_MouseEventBlockBehavior.Full,kha_input_MouseEventBlockBehavior.None,kha_input_MouseEventBlockBehavior.Custom];
var kha_input_MouseCursor = $hxEnums["kha.input.MouseCursor"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Pointer: {_hx_name:"Pointer",_hx_index:1,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Text: {_hx_name:"Text",_hx_index:2,__enum__:"kha.input.MouseCursor",toString:$estr}
	,EastWestResize: {_hx_name:"EastWestResize",_hx_index:3,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthSouthResize: {_hx_name:"NorthSouthResize",_hx_index:4,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthEastResize: {_hx_name:"NorthEastResize",_hx_index:5,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthEastResize: {_hx_name:"SouthEastResize",_hx_index:6,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthWestResize: {_hx_name:"NorthWestResize",_hx_index:7,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthWestResize: {_hx_name:"SouthWestResize",_hx_index:8,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grab: {_hx_name:"Grab",_hx_index:9,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grabbing: {_hx_name:"Grabbing",_hx_index:10,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NotAllowed: {_hx_name:"NotAllowed",_hx_index:11,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Wait: {_hx_name:"Wait",_hx_index:12,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Crosshair: {_hx_name:"Crosshair",_hx_index:13,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Custom: ($_=function(image) { return {_hx_index:14,image:image,__enum__:"kha.input.MouseCursor",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["image"],$_)
};
kha_input_MouseCursor.__constructs__ = [kha_input_MouseCursor.Default,kha_input_MouseCursor.Pointer,kha_input_MouseCursor.Text,kha_input_MouseCursor.EastWestResize,kha_input_MouseCursor.NorthSouthResize,kha_input_MouseCursor.NorthEastResize,kha_input_MouseCursor.SouthEastResize,kha_input_MouseCursor.NorthWestResize,kha_input_MouseCursor.SouthWestResize,kha_input_MouseCursor.Grab,kha_input_MouseCursor.Grabbing,kha_input_MouseCursor.NotAllowed,kha_input_MouseCursor.Wait,kha_input_MouseCursor.Crosshair,kha_input_MouseCursor.Custom];
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = true;
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.setWheelEventBlockBehavior = function(behavior) {
	kha_input_Mouse.wheelEventBlockBehavior = behavior;
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 152, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 156, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 166, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 170, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 180, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 184, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 194, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 198, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 208, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 212, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,setSystemCursor: function(cursor) {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) _g1[_g++]();
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) _g1[_g++](button,x,y);
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) _g1[_g++](button,x,y);
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) _g1[_g++](x,y,movementX,movementY);
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) _g1[_g++](delta);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			this.sendLeaveEvent(bytes.getInt32(4));
			return;
		}
		if(funcindex == 1) {
			this.sendDownEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16));
			return;
		}
		if(funcindex == 2) {
			this.sendUpEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16));
			return;
		}
		if(funcindex == 3) {
			this.sendMoveEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16),bytes.getInt32(20));
			return;
		}
		if(funcindex == 4) {
			this.sendWheelEvent(bytes.getInt32(4),bytes.getInt32(8));
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = true;
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,setSystemCursor: function(cursor) {
		var tmp;
		switch(cursor._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "text";
			break;
		case 3:
			tmp = "ew-resize";
			break;
		case 4:
			tmp = "ns-resize";
			break;
		case 5:
			tmp = "ne-resize";
			break;
		case 6:
			tmp = "se-resize";
			break;
		case 7:
			tmp = "nw-resize";
			break;
		case 8:
			tmp = "sw-resize";
			break;
		case 9:
			tmp = "grab";
			break;
		case 10:
			tmp = "grabbing";
			break;
		case 11:
			tmp = "not-allowed";
			break;
		case 12:
			tmp = "wait";
			break;
		case 13:
			tmp = "crosshair";
			break;
		case 14:
			var _g = cursor.image;
			var canvas = window.document.createElement("canvas");
			canvas.width = _g.get_width();
			canvas.height = _g.get_height();
			if(((_g) instanceof kha_WebGLImage)) {
				canvas.getContext("2d",null).drawImage((js_Boot.__cast(_g , kha_WebGLImage)).image,0,0);
			} else {
				canvas.getContext("2d",null).drawImage((js_Boot.__cast(_g , kha_CanvasImage)).image,0,0);
			}
			var dataURL = canvas.toDataURL("image/png");
			dataURL = StringTools.replace(dataURL,"/^data:image\\/(png|jpg);base64,/","");
			tmp = "url('" + dataURL + "'),auto";
			break;
		}
		kha_SystemImpl.khanvas.style.cursor = tmp;
	}
	,_receive: function(bytes) {
		bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_TouchDownEventBlockBehavior = $hxEnums["kha.input.TouchDownEventBlockBehavior"] = { __ename__:true,__constructs__:null
	,Full: {_hx_name:"Full",_hx_index:0,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,None: {_hx_name:"None",_hx_index:1,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["func"],$_)
};
kha_input_TouchDownEventBlockBehavior.__constructs__ = [kha_input_TouchDownEventBlockBehavior.Full,kha_input_TouchDownEventBlockBehavior.None,kha_input_TouchDownEventBlockBehavior.Custom];
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = true;
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.setTouchDownEventBlockBehavior = function(behavior) {
	kha_input_Surface.touchDownEventBlockBehavior = behavior;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		kha_input_Surface.listenedEventsBefore = true;
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = true;
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		return this.bytes.b[position++];
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,__class__: kha_internal_BytesBlob
};
var kha_internal_HdrFormat = function() { };
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = true;
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	do buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset]; while(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length);
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	do buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset]; while(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length);
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 39, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var rgbe = new Uint8Array(4);
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var buf = new Uint8Array(2);
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 55, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0];
			data[offset++] = rgbe[1];
			data[offset++] = rgbe[2];
			data[offset++] = rgbe[3];
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 70, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			scanline_buffer = new Uint8Array(4 * scanline_width);
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			ptr_end = (_g++ + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 84, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 91, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1];
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 102, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1];
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 108, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		while(_g1 < scanline_width) {
			var i = _g1++;
			data[offset] = scanline_buffer[i];
			data[offset + 1] = scanline_buffer[i + scanline_width];
			data[offset + 2] = scanline_buffer[i + 2 * scanline_width];
			data[offset + 3] = scanline_buffer[i + 3 * scanline_width];
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	do {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
	} while(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength);
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io_UInt8Array.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		++_g;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 171, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var data = new Uint8Array(width * height * 4);
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,width,height);
	var floatData = new Float32Array(width * height * 4);
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var f = Math.pow(2.0,data[offset + 3] - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = true;
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( _g ) {
			haxe_Log.trace(haxe_Exception.caught(_g).unwrap(),{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( _g ) {
			haxe_Log.trace(haxe_Exception.caught(_g).unwrap(),{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,get_length: function() {
		var f = this.element.duration;
		if(isFinite(f)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,__class__: kha_js_AEAudioChannel
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = true;
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha_Color.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = true;
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( _g ) {
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,set_imageScaleQuality: function(value) {
		this.canvas.imageSmoothingEnabled = value == 1;
		return this.scaleQuality = value;
	}
	,fillRect: function(x,y,width,height) {
		var tmp = this.get_opacity();
		this.canvas.globalAlpha = tmp * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		var eAngle = 2 * Math.PI;
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,0,eAngle,false);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,_g++)),xpos,y);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = true;
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,getImage: function(fontSize,color) {
		var imageIndex = fontSize * 10000 + kha_graphics2_Graphics.fontGlyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			this.images.h[imageIndex] = new haxe_ds_IntMap();
		}
		if(!this.images.h[imageIndex].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[imageIndex].h[color] = img;
			return img;
		}
		return this.images.h[imageIndex].h[color];
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = true;
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( _g ) {
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( _g ) {
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = true;
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		var wasStopped = this.paused || this.stopped;
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,stop: function() {
		var wasStopped = this.paused || this.stopped;
		this.paused = false;
		this.stopped = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,__class__: kha_js_MobileWebAudioChannel
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = true;
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/wav") != "" && StringTools.endsWith(filename,".wav")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = true;
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = true;
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	element: null
	,texture: null
	,filenames: null
	,done: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 132, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = true;
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var ch1 = buffer.numberOfChannels == 1 ? ch0 : buffer.getChannelData(1);
			var len = ch0.length;
			_gthis.uncompressedData = kha_arrays_Float32Array._new(len * 2);
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			var idx = 0;
			var i = 0;
			var lidx = len * 2;
			var uncompressInner = null;
			uncompressInner = function() {
				var chk_len = idx + 11025;
				var next_chk = chk_len > lidx ? lidx : chk_len;
				while(idx < next_chk) {
					_gthis.uncompressedData.setFloat32(idx * 4,ch0[i],true);
					_gthis.uncompressedData.setFloat32((idx + 1) * 4,ch1[i],true);
					idx += 2;
					i += 1;
				}
				if(idx < lidx) {
					window.setTimeout(uncompressInner,0);
				} else {
					_gthis.compressedData = null;
					done();
				}
			};
			uncompressInner();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = true;
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = true;
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 0:case 2:
		return 0;
	case 1:
		return 1;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		if(kha_js_graphics4_Graphics.current == null) {
			kha_js_graphics4_Graphics.current = this;
		} else {
			throw haxe_Exception.thrown("End before you begin");
		}
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,end: function() {
		if(kha_js_graphics4_Graphics.current == this) {
			kha_js_graphics4_Graphics.current = null;
		} else {
			throw haxe_Exception.thrown("Begin before you end");
		}
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask = 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,setVertexBuffer: function(vertexBuffer) {
		var _g = 0;
		var _g1 = kha_js_graphics4_Graphics.useVertexAttributes;
		while(_g < _g1) kha_SystemImpl.gl.disableVertexAttribArray(_g++);
		kha_js_graphics4_Graphics.useVertexAttributes = vertexBuffer.set(0);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		indexBuffer.set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + stage.value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set(stage.value);
		}
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + texunit.value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		if(pipe.stencilFrontMode == 0 && pipe.stencilBackMode == 0 && pipe.stencilFrontBothPass == 0 && pipe.stencilBackBothPass == 0 && pipe.stencilFrontDepthFail == 0 && pipe.stencilBackDepthFail == 0 && pipe.stencilFrontFail == 0 && pipe.stencilBackFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			this.setStencilParameters(true,pipe.stencilFrontMode,pipe.stencilFrontBothPass,pipe.stencilFrontDepthFail,pipe.stencilFrontFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
			this.setStencilParameters(false,pipe.stencilBackMode,pipe.stencilBackBothPass,pipe.stencilBackDepthFail,pipe.stencilBackFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		}
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMasksRed[0];
		this.colorMaskGreen = pipe.colorWriteMasksGreen[0];
		this.colorMaskBlue = pipe.colorWriteMasksBlue[0];
		this.colorMaskAlpha = pipe.colorWriteMasksAlpha[0];
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f(location.value,value);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f(location.value,value.x,value.y,value.z);
	}
	,setMatrix: function(location,matrix) {
		kha_js_graphics4_Graphics.setMatrix_matrixCache[0] = matrix._00;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[1] = matrix._01;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[2] = matrix._02;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[3] = matrix._03;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[4] = matrix._10;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[5] = matrix._11;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[6] = matrix._12;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[7] = matrix._13;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[8] = matrix._20;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[9] = matrix._21;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[10] = matrix._22;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[11] = matrix._23;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[12] = matrix._30;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[13] = matrix._31;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[14] = matrix._32;
		kha_js_graphics4_Graphics.setMatrix_matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv(location.value,false,kha_js_graphics4_Graphics.setMatrix_matrixCache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * (type == 5123 ? 2 : 4));
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(front,compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		var stencilFunc = this.convertCompareMode(compareMode);
		kha_SystemImpl.gl.stencilMaskSeparate(front ? 1028 : 1029,writeMask);
		var tmp = kha_SystemImpl.gl;
		var tmp1 = this.convertStencilAction(stencilFail);
		tmp.stencilOpSeparate(front ? 1028 : 1029,tmp1,this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
		switch(referenceValue._hx_index) {
		case 0:
			kha_SystemImpl.gl.stencilFuncSeparate(front ? 1028 : 1029,stencilFunc,0,readMask);
			break;
		case 1:
			kha_SystemImpl.gl.stencilFuncSeparate(front ? 1028 : 1029,stencilFunc,referenceValue.value,readMask);
			break;
		}
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = true;
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = true;
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = true;
kha_vr_VrInterface.prototype = {
	IsVrEnabled: function() {
		return false;
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = true;
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = true;
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = true;
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = true;
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,__class__: kha_math_FastVector3
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = true;
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,__class__: kha_math_FastVector4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = true;
kha_math_Quaternion.prototype = {
	values: null
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,__class__: kha_math_Quaternion
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = true;
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,__class__: kha_math_Vector2
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = true;
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,__class__: kha_math_Vector3
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = true;
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.controllers = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = true;
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	controllers: null
	,maxPlayers: null
	,address: null
	,port: null
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,__class__: kha_netsync_Session
};
var threed_Point = function(_x,_y,_z) {
	if(_z == null) {
		_z = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		++_g1;
		_g.push(0.0);
	}
	this.weights = _g;
	var defaultValue = null;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		++_g1;
		_g.push(defaultValue);
	}
	this.joints = _g;
	this.normal = new kha_math_FastVector3();
	this.pos = new kha_math_FastVector3();
	this.pos.x = _x;
	this.pos.z = _z;
	this.pos.y = _y;
};
$hxClasses["threed.Point"] = threed_Point;
threed_Point.__name__ = true;
threed_Point.prototype = {
	pos: null
	,normal: null
	,joints: null
	,weights: null
	,copyPos: function() {
		return new threed_Point(this.pos.x,this.pos.y,this.pos.z);
	}
	,__class__: threed_Point
};
var threed_Transformable = function(_x,_y,_z) {
	if(_z == null) {
		_z = 0;
	}
	if(_y == null) {
		_y = 0;
	}
	if(_x == null) {
		_x = 0;
	}
	this.modelCorrection = new kha_math_Quaternion(0,0,0,1);
	this.quatBase = new kha_math_Quaternion(0,0,0,1);
	this.localEuler = new kha_math_Vector3(0,0,0);
	this.scale = new kha_math_FastVector3(1,1,1);
	threed_Point.call(this,_x,_y,_z);
	this.localUp = threed_QuaternionHelper.getLocalUp(this.quatBase);
	this.localForward = threed_QuaternionHelper.getLocalForward(this.quatBase);
	this.localRight = threed_QuaternionHelper.getLocalRight(this.quatBase);
};
$hxClasses["threed.Transformable"] = threed_Transformable;
threed_Transformable.__name__ = true;
threed_Transformable.__super__ = threed_Point;
threed_Transformable.prototype = $extend(threed_Point.prototype,{
	scale: null
	,localEuler: null
	,quatBase: null
	,localUp: null
	,localForward: null
	,localRight: null
	,modelCorrection: null
	,resultingMatrix: null
	,setWorldEuler: function(_euler) {
		this.quatBase = threed_QuaternionHelper.quatFromEuler(_euler);
		this.updateLocalAxes();
	}
	,rotateYaw: function(_isRelative,_angle) {
		if(_isRelative == null) {
			_isRelative = true;
		}
		var delta = _isRelative ? _angle : _angle - this.localEuler.y;
		this.localEuler.y += delta;
		var axis = this.localUp;
		var q = new kha_math_Quaternion();
		q.set_w(Math.cos(delta / 2.0));
		q.set_x(q.set_y(q.set_z(Math.sin(delta / 2.0))));
		q.set_x(q.get_x() * axis.x);
		q.set_y(q.get_y() * axis.y);
		q.set_z(q.get_z() * axis.z);
		var r = this.quatBase;
		var q1 = new kha_math_Quaternion();
		q1.set_x(q.get_w() * r.get_x() + q.get_x() * r.get_w() + q.get_y() * r.get_z() - q.get_z() * r.get_y());
		q1.set_y(q.get_w() * r.get_y() - q.get_x() * r.get_z() + q.get_y() * r.get_w() + q.get_z() * r.get_x());
		q1.set_z(q.get_w() * r.get_z() + q.get_x() * r.get_y() - q.get_y() * r.get_x() + q.get_z() * r.get_w());
		q1.set_w(q.get_w() * r.get_w() - q.get_x() * r.get_x() - q.get_y() * r.get_y() - q.get_z() * r.get_z());
		this.quatBase = q1;
		this.localForward = threed_QuaternionHelper.getLocalForward(this.quatBase);
		this.localRight = threed_QuaternionHelper.getLocalRight(this.quatBase);
		return this.quatBase;
	}
	,rotatePitch: function(_isRelative,_angle) {
		if(_isRelative == null) {
			_isRelative = true;
		}
		var delta = _isRelative ? _angle : _angle - this.localEuler.x;
		this.localEuler.x += delta;
		var axis = this.localRight;
		var q = new kha_math_Quaternion();
		q.set_w(Math.cos(delta / 2.0));
		q.set_x(q.set_y(q.set_z(Math.sin(delta / 2.0))));
		q.set_x(q.get_x() * axis.x);
		q.set_y(q.get_y() * axis.y);
		q.set_z(q.get_z() * axis.z);
		var r = this.quatBase;
		var q1 = new kha_math_Quaternion();
		q1.set_x(q.get_w() * r.get_x() + q.get_x() * r.get_w() + q.get_y() * r.get_z() - q.get_z() * r.get_y());
		q1.set_y(q.get_w() * r.get_y() - q.get_x() * r.get_z() + q.get_y() * r.get_w() + q.get_z() * r.get_x());
		q1.set_z(q.get_w() * r.get_z() + q.get_x() * r.get_y() - q.get_y() * r.get_x() + q.get_z() * r.get_w());
		q1.set_w(q.get_w() * r.get_w() - q.get_x() * r.get_x() - q.get_y() * r.get_y() - q.get_z() * r.get_z());
		this.quatBase = q1;
		this.localUp = threed_QuaternionHelper.getLocalUp(this.quatBase);
		this.localForward = threed_QuaternionHelper.getLocalForward(this.quatBase);
		return this.quatBase;
	}
	,updateLocalAxes: function() {
		this.localUp = threed_QuaternionHelper.getLocalUp(this.quatBase);
		this.localForward = threed_QuaternionHelper.getLocalForward(this.quatBase);
		this.localRight = threed_QuaternionHelper.getLocalRight(this.quatBase);
	}
	,scaleMatrix: null
	,rotationMatrix: null
	,translationMatrix: null
	,updateMatrix: function() {
		this.scaleMatrix = new kha_math_FastMatrix4(this.scale.x,0,0,0,0,this.scale.y,0,0,0,0,this.scale.z,0,0,0,0,1);
		var _this = this.quatBase;
		var r = this.modelCorrection;
		var q = new kha_math_Quaternion();
		q.set_x(_this.get_w() * r.get_x() + _this.get_x() * r.get_w() + _this.get_y() * r.get_z() - _this.get_z() * r.get_y());
		q.set_y(_this.get_w() * r.get_y() - _this.get_x() * r.get_z() + _this.get_y() * r.get_w() + _this.get_z() * r.get_x());
		q.set_z(_this.get_w() * r.get_z() + _this.get_x() * r.get_y() - _this.get_y() * r.get_x() + _this.get_z() * r.get_w());
		q.set_w(_this.get_w() * r.get_w() - _this.get_x() * r.get_x() - _this.get_y() * r.get_y() - _this.get_z() * r.get_z());
		var scale = 1.0 / q.get_length();
		q.set_x(q.get_x() * scale);
		q.set_y(q.get_y() * scale);
		q.set_z(q.get_z() * scale);
		q.set_w(q.get_w() * scale);
		this.rotationMatrix = threed_QuaternionHelper.quatToMatrix(q);
		this.translationMatrix = new kha_math_FastMatrix4(1,0,0,this.pos.x,0,1,0,this.pos.y,0,0,1,this.pos.z,0,0,0,1);
		var _this = this.translationMatrix;
		var m = this.rotationMatrix;
		var _00 = _this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03;
		var _10 = _this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13;
		var _20 = _this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23;
		var _30 = _this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33;
		var _01 = _this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03;
		var _11 = _this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13;
		var _21 = _this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23;
		var _31 = _this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33;
		var _02 = _this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03;
		var _12 = _this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13;
		var _22 = _this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23;
		var _32 = _this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33;
		var _03 = _this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03;
		var _13 = _this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13;
		var _23 = _this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23;
		var _33 = _this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33;
		var m = this.scaleMatrix;
		this.resultingMatrix = new kha_math_FastMatrix4(_00 * m._00 + _10 * m._01 + _20 * m._02 + _30 * m._03,_00 * m._10 + _10 * m._11 + _20 * m._12 + _30 * m._13,_00 * m._20 + _10 * m._21 + _20 * m._22 + _30 * m._23,_00 * m._30 + _10 * m._31 + _20 * m._32 + _30 * m._33,_01 * m._00 + _11 * m._01 + _21 * m._02 + _31 * m._03,_01 * m._10 + _11 * m._11 + _21 * m._12 + _31 * m._13,_01 * m._20 + _11 * m._21 + _21 * m._22 + _31 * m._23,_01 * m._30 + _11 * m._31 + _21 * m._32 + _31 * m._33,_02 * m._00 + _12 * m._01 + _22 * m._02 + _32 * m._03,_02 * m._10 + _12 * m._11 + _22 * m._12 + _32 * m._13,_02 * m._20 + _12 * m._21 + _22 * m._22 + _32 * m._23,_02 * m._30 + _12 * m._31 + _22 * m._32 + _32 * m._33,_03 * m._00 + _13 * m._01 + _23 * m._02 + _33 * m._03,_03 * m._10 + _13 * m._11 + _23 * m._12 + _33 * m._13,_03 * m._20 + _13 * m._21 + _23 * m._22 + _33 * m._23,_03 * m._30 + _13 * m._31 + _23 * m._32 + _33 * m._33);
		return this.resultingMatrix;
	}
	,__class__: threed_Transformable
});
var threed_Camera = function(_resolutionW,_resolutionH) {
	this.far = 512.0;
	this.near = 0.1;
	this.fovScaleX = 0;
	this.sight = new kha_math_FastVector3();
	threed_Transformable.call(this);
	this.updateResolution(_resolutionW,_resolutionH);
	this.localEuler.y = threed_Projectables.degreesToRadians(0);
	this.set_fov(threed_Projectables.degreesToRadians(90));
};
$hxClasses["threed.Camera"] = threed_Camera;
threed_Camera.__name__ = true;
threed_Camera.__super__ = threed_Transformable;
threed_Camera.prototype = $extend(threed_Transformable.prototype,{
	sight: null
	,framebuffer: null
	,resolutionHalfW: null
	,resolutionHalfH: null
	,updateResolution: function(_resolutionW,_resolutionH) {
		this.framebuffer = kha_Image.createRenderTarget(_resolutionW,_resolutionH,null,1);
		this.resolutionHalfW = _resolutionW * 0.5 | 0;
		this.resolutionHalfH = _resolutionH * 0.5 | 0;
	}
	,fov: null
	,fovScaleX: null
	,near: null
	,far: null
	,set_fov: function(_value) {
		if(_value < 0) {
			_value = 0;
		} else if(_value > Math.PI) {
			_value = Math.PI;
		}
		this.fov = _value;
		this.fovScaleX = this.framebuffer.get_width() / (2 * Math.tan(_value * 0.5));
		return _value;
	}
	,updateSightVector: function() {
		this.sight = threed_Projectables.sphericalToXYZ(this.localEuler.x,this.localEuler.y,1);
	}
	,__class__: threed_Camera
});
var threed_Container = function(_x,_y,_z) {
	this.meshes = [];
	threed_Transformable.call(this,_x,_y,_z);
};
$hxClasses["threed.Container"] = threed_Container;
threed_Container.__name__ = true;
threed_Container.__super__ = threed_Transformable;
threed_Container.prototype = $extend(threed_Transformable.prototype,{
	meshes: null
	,__class__: threed_Container
});
var threed_Gltf = function(_blob) {
	this.faces = [];
	this.gltf = gltf_GLTF.parseAndLoadGLB(_blob.toBytes());
	var positions = this.gltf.meshes[0].primitives[0].getFloatAttributeValues("POSITION");
	var normals = this.gltf.meshes[0].primitives[0].getFloatAttributeValues("NORMAL");
	var uvs = this.gltf.meshes[0].primitives[0].getFloatAttributeValues("TEXCOORD_0");
	var indices = this.gltf.meshes[0].primitives[0].getIndexValues();
	var vertices = [];
	var _g = 0;
	var _g1 = positions.length / 3 | 0;
	while(_g < _g1) {
		var posIndex = _g++ * 3;
		var v = new threed_Point(positions[posIndex],positions[posIndex + 1],positions[posIndex + 2]);
		v.normal = new kha_math_FastVector3(normals[posIndex],normals[posIndex + 1],normals[posIndex + 2]);
		vertices.push(v);
	}
	var _g = 0;
	var _g1 = indices.length / 3 | 0;
	while(_g < _g1) {
		var iy = _g++;
		var faceVs = [];
		var faceUvs = [];
		var vertexIndex = indices[iy * 3];
		faceVs.push(vertices[vertexIndex]);
		var uvIndex = vertexIndex * 2;
		faceUvs.push(new threed_UV(uvs[uvIndex],uvs[uvIndex + 1]));
		var vertexIndex1 = indices[iy * 3 + 1];
		faceVs.push(vertices[vertexIndex1]);
		var uvIndex1 = vertexIndex1 * 2;
		faceUvs.push(new threed_UV(uvs[uvIndex1],uvs[uvIndex1 + 1]));
		var vertexIndex2 = indices[iy * 3 + 2];
		faceVs.push(vertices[vertexIndex2]);
		var uvIndex2 = vertexIndex2 * 2;
		faceUvs.push(new threed_UV(uvs[uvIndex2],uvs[uvIndex2 + 1]));
		this.faces.push(new threed_Triangle(faceVs,faceUvs));
	}
};
$hxClasses["threed.Gltf"] = threed_Gltf;
threed_Gltf.__name__ = true;
threed_Gltf.prototype = {
	gltf: null
	,faces: null
	,__class__: threed_Gltf
};
var threed_UV = function(x,y) {
	this.tint = new kha_math_FastVector4(1,1,1,1);
	kha_math_Vector2.call(this,x,y);
};
$hxClasses["threed.UV"] = threed_UV;
threed_UV.__name__ = true;
threed_UV.__super__ = kha_math_Vector2;
threed_UV.prototype = $extend(kha_math_Vector2.prototype,{
	tint: null
	,__class__: threed_UV
});
var threed_Triangle = function(_vertices,_uvs) {
	this.normal = new kha_math_FastVector3(0,0,0);
	this.uvs = [];
	this.vertices = [];
	this.vertices = _vertices;
	var tmp;
	if(_uvs != null) {
		tmp = _uvs;
	} else {
		var _g = [];
		var _g1 = 0;
		var _g2 = _vertices.length;
		while(_g1 < _g2) {
			++_g1;
			_g.push(new threed_UV(Math.random(),Math.random()));
		}
		tmp = _g;
	}
	this.uvs = tmp;
};
$hxClasses["threed.Triangle"] = threed_Triangle;
threed_Triangle.__name__ = true;
threed_Triangle.prototype = {
	vertices: null
	,uvs: null
	,normal: null
	,updateNormalAndApplyToVertices: function(_isClockwiseVerticesOrder) {
		if(_isClockwiseVerticesOrder == null) {
			_isClockwiseVerticesOrder = false;
		}
		if(this.vertices.length < 3) {
			haxe_Log.trace("updateNormal: vertices length less than 3",{ fileName : "threed/Triangle.hx", lineNumber : 42, className : "threed.Triangle", methodName : "updateNormalAndApplyToVertices"});
			return;
		}
		var firstIndex = _isClockwiseVerticesOrder ? 2 : 1;
		var thirdIndex = _isClockwiseVerticesOrder ? 1 : 2;
		var x = this.vertices[firstIndex].pos.x - this.vertices[0].pos.x;
		var y = this.vertices[firstIndex].pos.y - this.vertices[0].pos.y;
		var z = this.vertices[firstIndex].pos.z - this.vertices[0].pos.z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var edge1_x = x;
		var edge1_y = y;
		var edge1_z = z;
		var x = this.vertices[thirdIndex].pos.x - this.vertices[0].pos.x;
		var y = this.vertices[thirdIndex].pos.y - this.vertices[0].pos.y;
		var z = this.vertices[thirdIndex].pos.z - this.vertices[0].pos.z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var edge2_x = x;
		var edge2_y = y;
		var edge2_z = z;
		var _x = edge1_y * edge2_z - edge1_z * edge2_y;
		var _y = edge1_z * edge2_x - edge1_x * edge2_z;
		var _z = edge1_x * edge2_y - edge1_y * edge2_x;
		var x = _x;
		var y = _y;
		var z = _z;
		if(_z == null) {
			z = 0;
		}
		if(_y == null) {
			y = 0;
		}
		if(_x == null) {
			x = 0;
		}
		var v = new kha_math_FastVector3(x,y,z);
		var currentLength = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			v.x *= mul;
			v.y *= mul;
			v.z *= mul;
		}
		this.normal = v;
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) _g1[_g++].normal = new kha_math_FastVector3(this.normal.x,this.normal.y,this.normal.z);
	}
	,__class__: threed_Triangle
};
var threed_Prefab = function(_faces) {
	this.notSingleVertices = [];
	this.triangulated = [];
	this.originalFaces = [];
	this.originalFaces = _faces;
	this.updateTriangulated();
	haxe_Log.trace(this.originalFaces.length + " triangulated to " + this.triangulated.length,{ fileName : "threed/Prefab.hx", lineNumber : 13, className : "threed.Prefab", methodName : "new"});
};
$hxClasses["threed.Prefab"] = threed_Prefab;
threed_Prefab.__name__ = true;
threed_Prefab.prototype = {
	originalFaces: null
	,triangulated: null
	,notSingleVertices: null
	,updateTriangulated: function() {
		this.triangulated.length = 0;
		this.notSingleVertices.length = 0;
		var all = [];
		var _g = 0;
		var _g1 = this.originalFaces;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var _this = data.vertices;
			var iterator_current = 0;
			if(0 >= _this.length) {
				continue;
			}
			iterator_current = 1;
			var v0 = _this[0];
			var i0 = data.vertices.indexOf(v0);
			if(1 >= _this.length) {
				continue;
			}
			iterator_current = 2;
			var v1 = _this[1];
			while(iterator_current < _this.length) {
				var v2 = _this[iterator_current++];
				var i1 = data.vertices.indexOf(v1);
				var i2 = data.vertices.indexOf(v2);
				var face = new threed_Triangle([v0,v1,v2]);
				face.uvs[0] = data.uvs[i0];
				face.uvs[1] = data.uvs[i1];
				face.uvs[2] = data.uvs[i2];
				this.triangulated.push(face);
				if(all.indexOf(v0) != -1) {
					if(this.notSingleVertices.indexOf(v0) == -1) {
						this.notSingleVertices.push(v0);
					}
				} else {
					all.push(v0);
				}
				if(all.indexOf(v1) != -1) {
					if(this.notSingleVertices.indexOf(v1) == -1) {
						this.notSingleVertices.push(v1);
					}
				} else {
					all.push(v1);
				}
				if(all.indexOf(v2) != -1) {
					if(this.notSingleVertices.indexOf(v2) == -1) {
						this.notSingleVertices.push(v2);
					}
				} else {
					all.push(v2);
				}
				v1 = v2;
			}
		}
		haxe_Log.trace("all vertices: " + all.length + ", notSingle: " + this.notSingleVertices.length,{ fileName : "threed/Prefab.hx", lineNumber : 54, className : "threed.Prefab", methodName : "updateTriangulated"});
	}
	,copy: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.notSingleVertices;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(new threed_Point(v.pos.x,v.pos.y,v.pos.z));
		}
		var triangulatedCopy = [];
		var _g1 = 0;
		var _g2 = this.triangulated;
		while(_g1 < _g2.length) {
			var original = _g2[_g1];
			++_g1;
			var newVertices = [];
			var _g3 = 0;
			var _g4 = original.vertices;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				var copyIndex = this.notSingleVertices.indexOf(v);
				var copy = copyIndex > -1 ? _g[copyIndex] : new threed_Point(v.pos.x,v.pos.y,v.pos.z);
				copy.joints = v.joints;
				copy.normal = v.normal;
				copy.weights = v.weights;
				newVertices.push(copy);
			}
			if(newVertices.length > 2) {
				var _g5 = [];
				var _g6 = 0;
				var _g7 = original.uvs;
				while(_g6 < _g7.length) {
					var uv = _g7[_g6];
					++_g6;
					_g5.push(new threed_UV(uv.x,uv.y));
				}
				triangulatedCopy.push(new threed_Triangle(newVertices,_g5));
			}
		}
		return triangulatedCopy;
	}
	,__class__: threed_Prefab
};
var threed_Mesh = function(_prefab) {
	this.bbox = new threed_BoundingBox();
	this.debugMeshes = [];
	this.length = 0;
	this.offset = 0;
	this.vertices = [];
	this.triangulated = [];
	threed_Transformable.call(this);
	if(_prefab != null) {
		this.triangulated = _prefab.copy();
		this.vertices.length = 0;
		var _g = 0;
		var _g1 = this.triangulated;
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].vertices;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(this.vertices.indexOf(v) == -1) {
					this.vertices.push(v);
				}
			}
		}
		haxe_Log.trace("from prefab: " + this.triangulated.length + " faces => " + this.vertices.length + " vertices",{ fileName : "threed/Mesh.hx", lineNumber : 31, className : "threed.Mesh", methodName : "new"});
		this.bbox.updateBBox(this.vertices);
		if(_prefab != threed_Mesh.prefabAnchor) {
			var _g = 0;
			while(_g < 6) {
				var debugMesh = new threed_Mesh(threed_Mesh.prefabAnchor);
				var color;
				switch(_g++) {
				case 0:
					color = new kha_math_FastVector4(0,1,0,1);
					break;
				case 1:
					color = new kha_math_FastVector4(0,0,1,1);
					break;
				default:
					color = new kha_math_FastVector4(1,0,0,1);
				}
				debugMesh.triangulated[0].uvs[0].tint = color;
				debugMesh.triangulated[1].uvs[0].tint = color;
				debugMesh.triangulated[0].uvs[1].tint = color;
				debugMesh.triangulated[1].uvs[1].tint = color;
				debugMesh.triangulated[0].uvs[2].tint = color;
				debugMesh.triangulated[1].uvs[2].tint = color;
				debugMesh.triangulated[0].updateNormalAndApplyToVertices(true);
				debugMesh.triangulated[1].updateNormalAndApplyToVertices(true);
				this.debugMeshes.push(debugMesh);
			}
		}
	}
	this.updateMatrix();
};
$hxClasses["threed.Mesh"] = threed_Mesh;
threed_Mesh.__name__ = true;
threed_Mesh.__super__ = threed_Transformable;
threed_Mesh.prototype = $extend(threed_Transformable.prototype,{
	texture: null
	,triangulated: null
	,vertices: null
	,skeleton: null
	,update: function() {
		this.updateMatrix();
		var _g = 0;
		var _g1 = this.debugMeshes;
		while(_g < _g1.length) {
			var debug = _g1[_g];
			++_g;
			var x = GameDisplay.cam.pos.x - debug.pos.x;
			var y = GameDisplay.cam.pos.y - debug.pos.y;
			var z = GameDisplay.cam.pos.z - debug.pos.z;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var x1 = _this_x;
			var y1 = _this_y;
			var z1 = _this_z;
			if(_this_z == null) {
				z1 = 0;
			}
			if(_this_y == null) {
				y1 = 0;
			}
			if(_this_x == null) {
				x1 = 0;
			}
			var dir_x = x1;
			var dir_y = y1;
			var dir_z = z1;
			var currentLength = Math.sqrt(dir_x * dir_x + dir_y * dir_y + dir_z * dir_z);
			if(currentLength != 0) {
				var mul = 1 / currentLength;
				dir_x *= mul;
				dir_y *= mul;
				dir_z *= mul;
			}
			var up_x = 0;
			var up_y = 1;
			var up_z = 0;
			var _x = up_y * dir_z - up_z * dir_y;
			var _y = up_z * dir_x - up_x * dir_z;
			var _z = up_x * dir_y - up_y * dir_x;
			var x2 = _x;
			var y2 = _y;
			var z2 = _z;
			if(_z == null) {
				z2 = 0;
			}
			if(_y == null) {
				y2 = 0;
			}
			if(_x == null) {
				x2 = 0;
			}
			var _this_x1 = x2;
			var _this_y1 = y2;
			var _this_z1 = z2;
			var x3 = _this_x1;
			var y3 = _this_y1;
			var z3 = _this_z1;
			if(_this_z1 == null) {
				z3 = 0;
			}
			if(_this_y1 == null) {
				y3 = 0;
			}
			if(_this_x1 == null) {
				x3 = 0;
			}
			var right_x = x3;
			var right_y = y3;
			var right_z = z3;
			var currentLength1 = Math.sqrt(right_x * right_x + right_y * right_y + right_z * right_z);
			if(currentLength1 != 0) {
				var mul1 = 1 / currentLength1;
				right_x *= mul1;
				right_y *= mul1;
				right_z *= mul1;
			}
			var _x1 = dir_y * right_z - dir_z * right_y;
			var _y1 = dir_z * right_x - dir_x * right_z;
			var _z1 = dir_x * right_y - dir_y * right_x;
			var x4 = _x1;
			var y4 = _y1;
			var z4 = _z1;
			if(_z1 == null) {
				z4 = 0;
			}
			if(_y1 == null) {
				y4 = 0;
			}
			if(_x1 == null) {
				x4 = 0;
			}
			debug.quatBase = threed_QuaternionHelper.quatFromMatrix(new kha_math_FastMatrix3(right_x,right_y,right_z,x4,y4,z4,dir_x,dir_y,dir_z));
			debug.updateMatrix();
		}
	}
	,offset: null
	,length: null
	,addVerticesTo: function(_vertexSet,_uvSet) {
		this.offset = _vertexSet.length;
		this.length = 0;
		var _g = 0;
		var _g1 = this.triangulated;
		while(_g < _g1.length) {
			var face = _g1[_g];
			++_g;
			var _this = face.vertices;
			var _g_current = 0;
			while(_g_current < _this.length) {
				_vertexSet.push(_this[_g_current++]);
				_uvSet.push(face.uvs[_g_current - 1]);
				this.length++;
			}
		}
		return this.length;
	}
	,debugMeshes: null
	,bbox: null
	,centerVertices: function(originX,originY,originZ) {
		if(originZ == null) {
			originZ = 0.0;
		}
		if(originY == null) {
			originY = 0.0;
		}
		if(originX == null) {
			originX = 0.0;
		}
		var x = this.bbox.max.x - this.bbox.min.x;
		var y = this.bbox.max.y - this.bbox.min.y;
		var z = this.bbox.max.z - this.bbox.min.z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var width_x = x;
		var width_y = y;
		var width_z = z;
		var _g = 0;
		var _g1 = this.vertices;
		while(_g < _g1.length) {
			var vertix = _g1[_g];
			++_g;
			vertix.pos.x -= width_x * originX;
			vertix.pos.y -= width_y * originY;
			vertix.pos.z -= width_z * originZ;
		}
		this.bbox.updateBBox(this.vertices);
	}
	,__class__: threed_Mesh
});
var threed_DrawCall = function(_isSkinned,_meshTexture,_pipeline,_structure,_structureLength) {
	this.uvs = [];
	this.vertices = [];
	this.modelIds = [];
	this.meshes = [];
	this.isSkinned = false;
	this.isSkinned = _isSkinned;
	this.meshTexture = _meshTexture;
	this.pipeline = _pipeline;
	this.structure = _structure;
	this.structureLength = _structureLength;
	this.uniformVP = this.pipeline.getConstantLocation("VP");
	this.uniformNear = this.pipeline.getConstantLocation("near");
	this.uniformFar = this.pipeline.getConstantLocation("far");
	this.uniformCameraPos = this.pipeline.getConstantLocation("cameraPos");
	this.uniformTextureID = this.pipeline.getTextureUnit("myTextureSampler");
	this.uniformTransformsTexture = this.pipeline.getTextureUnit("transformsTexture");
	this.uniformTransformsTextureW = this.pipeline.getConstantLocation("transformsTextureW");
	if(this.isSkinned) {
		this.uniformModelsCount = this.pipeline.getConstantLocation("modelsCount");
	}
};
$hxClasses["threed.DrawCall"] = threed_DrawCall;
threed_DrawCall.__name__ = true;
threed_DrawCall.prototype = {
	isSkinned: null
	,meshTexture: null
	,meshes: null
	,modelIds: null
	,vertices: null
	,uvs: null
	,pipeline: null
	,structure: null
	,structureLength: null
	,uniformTextureID: null
	,uniformVP: null
	,uniformNear: null
	,uniformFar: null
	,uniformCameraPos: null
	,uniformTransformsTexture: null
	,uniformTransformsTextureW: null
	,uniformModelsCount: null
	,transformsBytes: null
	,recreateBuffers: function() {
		this.vertexBuffer = new kha_graphics4_VertexBuffer(this.vertices.length,this.structure,1);
		var vbData = this.vertexBuffer.lock();
		var transformsLength = 0;
		var _this = this.meshes;
		var _g_current = 0;
		while(_g_current < _this.length) {
			var _g_value = _this[_g_current];
			++_g_current;
			this.updatePosAndNormals(transformsLength,vbData,_g_value);
			if(this.isSkinned) {
				transformsLength += _g_value.skeleton.joints.length;
				this.updateJointIdsAndWeights(vbData,_g_value);
			} else {
				++transformsLength;
			}
			this.updateUVs(vbData,_g_value);
			_g_value.update();
		}
		this.vertexBuffer.unlock();
		this.transformsBytes = new haxe_io_Bytes(new ArrayBuffer((this.meshes.length * 2 + transformsLength) * 64));
		var indices = [];
		var _singleVertices = [];
		var _this = this.vertices;
		var _g_current = 0;
		while(_g_current < _this.length) {
			var _g_value = _this[_g_current];
			indices.push(_g_current++);
			if(_singleVertices.indexOf(_g_value) == -1) {
				_singleVertices.push(_g_value);
			}
		}
		haxe_Log.trace("meshes: " + this.meshes.length + ", vertices: " + this.vertices.length + " (" + _singleVertices.length + ") / " + (vbData.byteLength >> 2) / this.structureLength,{ fileName : "threed/MeshBatcher.hx", lineNumber : 102, className : "threed.DrawCall", methodName : "recreateBuffers"});
		this.indexBuffer = new kha_graphics4_IndexBuffer(indices.length,0);
		var iData = this.indexBuffer.lock();
		var _g = 0;
		var _g1 = iData.byteLength >> 2;
		while(_g < _g1) {
			var i = _g++;
			iData.setUint32(i * 4,indices[i],kha_arrays_ByteArray.LITTLE_ENDIAN);
		}
		this.indexBuffer.unlock();
		this.updateTransformsTexture();
	}
	,vertexBuffer: null
	,indexBuffer: null
	,updateVertexData: function() {
		var vbData = this.vertexBuffer.lock();
		var _this = this.meshes;
		var _g_current = 0;
		while(_g_current < _this.length) this.updateUVs(vbData,_this[_g_current++]);
		this.vertexBuffer.unlock();
	}
	,updatePosAndNormals: function(_transformsMeshOffset,_vertexBufferData,_mesh) {
		var _g = _mesh.offset;
		var _g1 = _mesh.offset + _mesh.length;
		while(_g < _g1) {
			var i = _g++;
			_vertexBufferData.setFloat32(i * this.structureLength * 4,_transformsMeshOffset,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 1) * 4,this.vertices[i].pos.x,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 2) * 4,this.vertices[i].pos.y,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 3) * 4,this.vertices[i].pos.z,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 4) * 4,this.vertices[i].normal.x,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 5) * 4,this.vertices[i].normal.y,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 6) * 4,this.vertices[i].normal.z,true);
		}
	}
	,updateUVs: function(_vertexBufferData,_mesh) {
		var _g = _mesh.offset;
		var _g1 = _mesh.offset + _mesh.length;
		while(_g < _g1) {
			var i = _g++;
			_vertexBufferData.setFloat32((i * this.structureLength + 7) * 4,this.uvs[i].x,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 8) * 4,this.uvs[i].y,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 9) * 4,this.uvs[i].tint.x,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 10) * 4,this.uvs[i].tint.y,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 11) * 4,this.uvs[i].tint.z,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 12) * 4,this.uvs[i].tint.w,true);
		}
	}
	,updateJointIdsAndWeights: function(_vertexBufferData,_mesh) {
		if(_mesh.skeleton == null) {
			return;
		}
		var rootId = _mesh.skeleton.rootJoint.tightlyPackedId;
		var _g = _mesh.offset;
		var _g1 = _mesh.offset + _mesh.length;
		while(_g < _g1) {
			var i = _g++;
			_vertexBufferData.setFloat32((i * this.structureLength + 13) * 4,this.vertices[i].joints[0] == null ? rootId : this.vertices[i].joints[0].tightlyPackedId,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 14) * 4,this.vertices[i].joints[1] == null ? rootId : this.vertices[i].joints[1].tightlyPackedId,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 15) * 4,this.vertices[i].joints[2] == null ? rootId : this.vertices[i].joints[2].tightlyPackedId,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 16) * 4,this.vertices[i].joints[3] == null ? rootId : this.vertices[i].joints[3].tightlyPackedId,true);
			_vertexBufferData.setFloat32((i * this.structureLength + 17) * 4,this.vertices[i].weights[0],true);
			_vertexBufferData.setFloat32((i * this.structureLength + 18) * 4,this.vertices[i].weights[1],true);
			_vertexBufferData.setFloat32((i * this.structureLength + 19) * 4,this.vertices[i].weights[2],true);
			_vertexBufferData.setFloat32((i * this.structureLength + 20) * 4,this.vertices[i].weights[3],true);
		}
	}
	,updateTransformsTexture: function() {
		this.transformsBytes.fill(0,this.transformsBytes.length,0);
		var transformIndex = 0;
		if(this.isSkinned) {
			var _g = 0;
			var _g1 = this.meshes;
			while(_g < _g1.length) {
				var mesh = _g1[_g];
				++_g;
				if(mesh.skeleton != null) {
					var _g2 = 0;
					var _g3 = mesh.skeleton.joints;
					while(_g2 < _g3.length) {
						var joint = _g3[_g2];
						++_g2;
						var _g4 = 0;
						while(_g4 < 4) {
							var j = _g4++;
							var first = (transformIndex * 4 + j) * 16;
							switch(j) {
							case 0:
								this.transformsBytes.setFloat(first,joint.skinMatrix._00);
								this.transformsBytes.setFloat(first + 4,joint.skinMatrix._01);
								this.transformsBytes.setFloat(first + 8,joint.skinMatrix._02);
								this.transformsBytes.setFloat(first + 12,1);
								break;
							case 1:
								this.transformsBytes.setFloat(first,joint.skinMatrix._10);
								this.transformsBytes.setFloat(first + 4,joint.skinMatrix._11);
								this.transformsBytes.setFloat(first + 8,joint.skinMatrix._12);
								this.transformsBytes.setFloat(first + 12,1);
								break;
							case 2:
								this.transformsBytes.setFloat(first,joint.skinMatrix._20);
								this.transformsBytes.setFloat(first + 4,joint.skinMatrix._21);
								this.transformsBytes.setFloat(first + 8,joint.skinMatrix._22);
								this.transformsBytes.setFloat(first + 12,1);
								break;
							case 3:
								this.transformsBytes.setFloat(first,joint.skinMatrix._30);
								this.transformsBytes.setFloat(first + 4,joint.skinMatrix._31);
								this.transformsBytes.setFloat(first + 8,joint.skinMatrix._32);
								this.transformsBytes.setFloat(first + 12,1);
								break;
							}
						}
						++transformIndex;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.meshes;
			while(_g < _g1.length) {
				var mesh = _g1[_g];
				++_g;
				var _g2 = 0;
				while(_g2 < 4) {
					var j = _g2++;
					var first = (transformIndex * 4 + j) * 16;
					switch(j) {
					case 0:
						this.transformsBytes.setFloat(first,mesh.resultingMatrix._00);
						this.transformsBytes.setFloat(first + 4,mesh.resultingMatrix._01);
						this.transformsBytes.setFloat(first + 8,mesh.resultingMatrix._02);
						this.transformsBytes.setFloat(first + 12,1);
						break;
					case 1:
						this.transformsBytes.setFloat(first,mesh.resultingMatrix._10);
						this.transformsBytes.setFloat(first + 4,mesh.resultingMatrix._11);
						this.transformsBytes.setFloat(first + 8,mesh.resultingMatrix._12);
						this.transformsBytes.setFloat(first + 12,1);
						break;
					case 2:
						this.transformsBytes.setFloat(first,mesh.resultingMatrix._20);
						this.transformsBytes.setFloat(first + 4,mesh.resultingMatrix._21);
						this.transformsBytes.setFloat(first + 8,mesh.resultingMatrix._22);
						this.transformsBytes.setFloat(first + 12,1);
						break;
					case 3:
						this.transformsBytes.setFloat(first,mesh.resultingMatrix._30);
						this.transformsBytes.setFloat(first + 4,mesh.resultingMatrix._31);
						this.transformsBytes.setFloat(first + 8,mesh.resultingMatrix._32);
						this.transformsBytes.setFloat(first + 12,1);
						break;
					}
				}
				++transformIndex;
			}
		}
		this.transformsTexture = kha_Image.fromBytes(this.transformsBytes,this.transformsBytes.length / 16 | 0,1,2);
	}
	,transformsTexture: null
	,render: function(g4,_vp,_cam) {
		g4.setMatrix(this.uniformVP,_vp);
		g4.setFloat(this.uniformNear,_cam.near);
		g4.setFloat(this.uniformFar,_cam.far);
		g4.setVector3(this.uniformCameraPos,_cam.pos);
		g4.setTexture(this.uniformTransformsTexture,this.transformsTexture);
		g4.setTextureParameters(this.uniformTransformsTexture,2,2,0,0,0);
		g4.setFloat(this.uniformTransformsTextureW,this.transformsTexture.get_width());
		g4.setTexture(this.uniformTextureID,this.meshTexture);
		g4.setTextureParameters(this.uniformTextureID,2,2,0,0,0);
		g4.setVertexBuffer(this.vertexBuffer);
		g4.setIndexBuffer(this.indexBuffer);
		g4.drawIndexedVertices();
	}
	,__class__: threed_DrawCall
};
var threed_MeshBatcher = function(_isSkinned,_pipeline,_structure,_structureLength) {
	this.calls = [];
	this.isSkinned = false;
	this.isSkinned = _isSkinned;
	this.pipeline = _pipeline;
	this.structure = _structure;
	this.structureLength = _structureLength;
};
$hxClasses["threed.MeshBatcher"] = threed_MeshBatcher;
threed_MeshBatcher.__name__ = true;
threed_MeshBatcher.prototype = {
	isSkinned: null
	,pipeline: null
	,structure: null
	,structureLength: null
	,calls: null
	,batch: function(_meshes) {
		this.calls.length = 0;
		var _g = 0;
		while(_g < _meshes.length) {
			var mesh = [_meshes[_g]];
			++_g;
			if(mesh[0].texture == null) {
				continue;
			}
			var call = Lambda.find(this.calls,(function(mesh) {
				return function(it) {
					return it.meshTexture == mesh[0].texture;
				};
			})(mesh));
			if(call == null) {
				this.calls.push(new threed_DrawCall(this.isSkinned,mesh[0].texture,this.pipeline,this.structure,this.structureLength));
				call = this.calls[this.calls.length - 1];
			}
			var _g1 = 0;
			var _g2 = mesh[0].addVerticesTo(call.vertices,call.uvs);
			while(_g1 < _g2) {
				++_g1;
				call.modelIds.push(call.meshes.length);
			}
			call.meshes.push(mesh[0]);
			var _g3 = 0;
			var _g4 = mesh[0].debugMeshes;
			while(_g3 < _g4.length) {
				var debugMesh = _g4[_g3];
				++_g3;
				var _g5 = 0;
				var _g6 = debugMesh.addVerticesTo(call.vertices,call.uvs);
				while(_g5 < _g6) {
					++_g5;
					call.modelIds.push(call.meshes.length);
				}
				call.meshes.push(debugMesh);
			}
		}
		haxe_Log.trace("Batcher: drawcalls length is " + this.calls.length,{ fileName : "threed/MeshBatcher.hx", lineNumber : 327, className : "threed.MeshBatcher", methodName : "batch"});
		var _g = 0;
		var _g1 = this.calls;
		while(_g < _g1.length) _g1[_g++].recreateBuffers();
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.calls;
		while(_g < _g1.length) {
			var call = _g1[_g];
			++_g;
			call.updateVertexData();
			call.updateTransformsTexture();
		}
	}
	,render: function(g4,_vp,_cam) {
		var _g = 0;
		var _g1 = this.calls;
		while(_g < _g1.length) _g1[_g++].render(g4,_vp,_cam);
	}
	,__class__: threed_MeshBatcher
};
var threed_BoundingBox = function() {
	this.max = new kha_math_FastVector3(0,0,0);
	this.min = new kha_math_FastVector3(0,0,0);
};
$hxClasses["threed.BoundingBox"] = threed_BoundingBox;
threed_BoundingBox.__name__ = true;
threed_BoundingBox.prototype = {
	min: null
	,max: null
	,updateBBox: function(_vertices) {
		if(_vertices.length == 0) {
			return;
		}
		this.min.x = _vertices[0].pos.x;
		this.min.y = _vertices[0].pos.y;
		this.min.z = _vertices[0].pos.z;
		this.max.x = _vertices[0].pos.x;
		this.max.y = _vertices[0].pos.y;
		this.max.z = _vertices[0].pos.z;
		var _g = 0;
		while(_g < _vertices.length) {
			var p = _vertices[_g];
			++_g;
			if(p.pos.x < this.min.x) {
				this.min.x = p.pos.x;
			} else if(p.pos.x > this.max.x) {
				this.max.x = p.pos.x;
			}
			if(p.pos.z < this.min.z) {
				this.min.z = p.pos.z;
			} else if(p.pos.z > this.max.z) {
				this.max.z = p.pos.z;
			}
			if(p.pos.y < this.min.y) {
				this.min.y = p.pos.y;
			} else if(p.pos.y > this.max.y) {
				this.max.y = p.pos.y;
			}
		}
	}
	,__class__: threed_BoundingBox
};
var threed_Projectables = function() { };
$hxClasses["threed.Projectables"] = threed_Projectables;
threed_Projectables.__name__ = true;
threed_Projectables.degreesToRadians = function(_angle) {
	return _angle * threed_Projectables.piDivided180;
};
threed_Projectables.sphericalToXYZ = function(_theta,_phi,_length) {
	return new kha_math_FastVector3(Math.cos(_phi) * Math.cos(_theta) * _length,Math.sin(-_theta) * _length,Math.sin(_phi) * Math.cos(_theta) * _length);
};
threed_Projectables.pointOnSegment = function(_first,_second,_t) {
	return new kha_math_FastVector3(_first.x + _t * (_second.x - _first.x),_first.y + _t * (_second.y - _first.y),_first.z + _t * (_second.z - _first.z));
};
threed_Projectables.safeInverse = function(_m) {
	var m3 = _m._12;
	var m4 = _m._22;
	var m5 = _m._32;
	var m6 = _m._13;
	var m7 = _m._23;
	var m8 = _m._33;
	var c00 = _m._11 * (m4 * m8 - m5 * m7) - _m._21 * (m3 * m8 - m5 * m6) + _m._31 * (m3 * m7 - m4 * m6);
	var m3 = _m._12;
	var m4 = _m._22;
	var m5 = _m._32;
	var m6 = _m._13;
	var m7 = _m._23;
	var m8 = _m._33;
	var c01 = _m._10 * (m4 * m8 - m5 * m7) - _m._20 * (m3 * m8 - m5 * m6) + _m._30 * (m3 * m7 - m4 * m6);
	var m3 = _m._11;
	var m4 = _m._21;
	var m5 = _m._31;
	var m6 = _m._13;
	var m7 = _m._23;
	var m8 = _m._33;
	var c02 = _m._10 * (m4 * m8 - m5 * m7) - _m._20 * (m3 * m8 - m5 * m6) + _m._30 * (m3 * m7 - m4 * m6);
	var m3 = _m._11;
	var m4 = _m._21;
	var m5 = _m._31;
	var m6 = _m._12;
	var m7 = _m._22;
	var m8 = _m._32;
	var c03 = _m._10 * (m4 * m8 - m5 * m7) - _m._20 * (m3 * m8 - m5 * m6) + _m._30 * (m3 * m7 - m4 * m6);
	var det = _m._00 * c00 - _m._01 * c01 + _m._02 * c02 - _m._03 * c03;
	if(Math.abs(det) < 0.000001) {
		det = (det < 0 ? -1 : 1) * 0.000001;
	}
	var m3 = _m._02;
	var m4 = _m._22;
	var m5 = _m._32;
	var m6 = _m._03;
	var m7 = _m._23;
	var m8 = _m._33;
	var m31 = _m._02;
	var m41 = _m._22;
	var m51 = _m._32;
	var m61 = _m._03;
	var m71 = _m._23;
	var m81 = _m._33;
	var m32 = _m._01;
	var m42 = _m._21;
	var m52 = _m._31;
	var m62 = _m._03;
	var m72 = _m._23;
	var m82 = _m._33;
	var m33 = _m._01;
	var m43 = _m._21;
	var m53 = _m._31;
	var m63 = _m._02;
	var m73 = _m._22;
	var m83 = _m._32;
	var m34 = _m._02;
	var m44 = _m._12;
	var m54 = _m._32;
	var m64 = _m._03;
	var m74 = _m._13;
	var m84 = _m._33;
	var m35 = _m._02;
	var m45 = _m._12;
	var m55 = _m._32;
	var m65 = _m._03;
	var m75 = _m._13;
	var m85 = _m._33;
	var m36 = _m._01;
	var m46 = _m._11;
	var m56 = _m._31;
	var m66 = _m._03;
	var m76 = _m._13;
	var m86 = _m._33;
	var m37 = _m._01;
	var m47 = _m._11;
	var m57 = _m._31;
	var m67 = _m._02;
	var m77 = _m._12;
	var m87 = _m._32;
	var m38 = _m._02;
	var m48 = _m._12;
	var m58 = _m._22;
	var m68 = _m._03;
	var m78 = _m._13;
	var m88 = _m._23;
	var m39 = _m._02;
	var m49 = _m._12;
	var m59 = _m._22;
	var m69 = _m._03;
	var m79 = _m._13;
	var m89 = _m._23;
	var m310 = _m._01;
	var m410 = _m._11;
	var m510 = _m._21;
	var m610 = _m._03;
	var m710 = _m._13;
	var m810 = _m._23;
	var m311 = _m._01;
	var m411 = _m._11;
	var m511 = _m._21;
	var m611 = _m._02;
	var m711 = _m._12;
	var m811 = _m._22;
	var invdet = 1.0 / det;
	return new kha_math_FastMatrix4(c00 * invdet,-c01 * invdet,c02 * invdet,-c03 * invdet,-(_m._01 * (m4 * m8 - m5 * m7) - _m._21 * (m3 * m8 - m5 * m6) + _m._31 * (m3 * m7 - m4 * m6)) * invdet,(_m._00 * (m41 * m81 - m51 * m71) - _m._20 * (m31 * m81 - m51 * m61) + _m._30 * (m31 * m71 - m41 * m61)) * invdet,-(_m._00 * (m42 * m82 - m52 * m72) - _m._20 * (m32 * m82 - m52 * m62) + _m._30 * (m32 * m72 - m42 * m62)) * invdet,(_m._00 * (m43 * m83 - m53 * m73) - _m._20 * (m33 * m83 - m53 * m63) + _m._30 * (m33 * m73 - m43 * m63)) * invdet,(_m._01 * (m44 * m84 - m54 * m74) - _m._11 * (m34 * m84 - m54 * m64) + _m._31 * (m34 * m74 - m44 * m64)) * invdet,-(_m._00 * (m45 * m85 - m55 * m75) - _m._10 * (m35 * m85 - m55 * m65) + _m._30 * (m35 * m75 - m45 * m65)) * invdet,(_m._00 * (m46 * m86 - m56 * m76) - _m._10 * (m36 * m86 - m56 * m66) + _m._30 * (m36 * m76 - m46 * m66)) * invdet,-(_m._00 * (m47 * m87 - m57 * m77) - _m._10 * (m37 * m87 - m57 * m67) + _m._30 * (m37 * m77 - m47 * m67)) * invdet,-(_m._01 * (m48 * m88 - m58 * m78) - _m._11 * (m38 * m88 - m58 * m68) + _m._21 * (m38 * m78 - m48 * m68)) * invdet,(_m._00 * (m49 * m89 - m59 * m79) - _m._10 * (m39 * m89 - m59 * m69) + _m._20 * (m39 * m79 - m49 * m69)) * invdet,-(_m._00 * (m410 * m810 - m510 * m710) - _m._10 * (m310 * m810 - m510 * m610) + _m._20 * (m310 * m710 - m410 * m610)) * invdet,(_m._00 * (m411 * m811 - m511 * m711) - _m._10 * (m311 * m811 - m511 * m611) + _m._20 * (m311 * m711 - m411 * m611)) * invdet);
};
var threed_QuaternionHelper = function() { };
$hxClasses["threed.QuaternionHelper"] = threed_QuaternionHelper;
threed_QuaternionHelper.__name__ = true;
threed_QuaternionHelper.quatFromEuler = function(_euler) {
	var pitch = _euler.x;
	var yaw = _euler.y;
	var roll = _euler.z;
	var cy = Math.cos(roll * 0.5);
	var sy = Math.sin(roll * 0.5);
	var cp = Math.cos(yaw * 0.5);
	var sp = Math.sin(yaw * 0.5);
	var cr = Math.cos(pitch * 0.5);
	var sr = Math.sin(pitch * 0.5);
	return new kha_math_Quaternion(sr * cp * cy - cr * sp * sy,cr * sp * cy + sr * cp * sy,cr * cp * sy - sr * sp * cy,cr * cp * cy + sr * sp * sy);
};
threed_QuaternionHelper.quatFromMatrix = function(_m) {
	var trace = _m._00 + _m._11 + _m._22;
	var w;
	var x;
	var y;
	var z;
	if(trace > 0) {
		var s = Math.sqrt(trace + 1.0) * 2;
		w = 0.25 * s;
		x = (_m._21 - _m._12) / s;
		y = (_m._02 - _m._20) / s;
		z = (_m._10 - _m._01) / s;
	} else if(_m._00 > _m._11 && _m._00 > _m._22) {
		var s = Math.sqrt(1.0 + _m._00 - _m._11 - _m._22) * 2;
		w = (_m._21 - _m._12) / s;
		x = 0.25 * s;
		y = (_m._01 + _m._10) / s;
		z = (_m._02 + _m._20) / s;
	} else if(_m._11 > _m._22) {
		var s = Math.sqrt(1.0 + _m._11 - _m._00 - _m._22) * 2;
		w = (_m._02 - _m._20) / s;
		x = (_m._01 + _m._10) / s;
		y = 0.25 * s;
		z = (_m._12 + _m._21) / s;
	} else {
		var s = Math.sqrt(1.0 + _m._22 - _m._00 - _m._11) * 2;
		w = (_m._10 - _m._01) / s;
		x = (_m._02 + _m._20) / s;
		y = (_m._12 + _m._21) / s;
		z = 0.25 * s;
	}
	return new kha_math_Quaternion(x,y,z,w);
};
threed_QuaternionHelper.quatToMatrix = function(_quat) {
	var xx = _quat.get_x() * _quat.get_x();
	var yy = _quat.get_y() * _quat.get_y();
	var zz = _quat.get_z() * _quat.get_z();
	var xy = _quat.get_x() * _quat.get_y();
	var xz = _quat.get_x() * _quat.get_z();
	var yz = _quat.get_y() * _quat.get_z();
	var wx = _quat.get_w() * _quat.get_x();
	var wy = _quat.get_w() * _quat.get_y();
	var wz = _quat.get_w() * _quat.get_z();
	return new kha_math_FastMatrix4(1 - 2 * (yy + zz),2 * (xy - wz),2 * (xz + wy),0,2 * (xy + wz),1 - 2 * (xx + zz),2 * (yz - wx),0,2 * (xz - wy),2 * (yz + wx),1 - 2 * (xx + yy),0,0,0,0,1);
};
threed_QuaternionHelper.rotateVector = function(_quat,_v) {
	var scale = 1.0 / _quat.get_length();
	_quat.set_x(_quat.get_x() * scale);
	_quat.set_y(_quat.get_y() * scale);
	_quat.set_z(_quat.get_z() * scale);
	_quat.set_w(_quat.get_w() * scale);
	var x = _quat.get_x();
	var y = _quat.get_y();
	var z = _quat.get_z();
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var qVec_x = x;
	var qVec_y = y;
	var qVec_z = z;
	var t = new kha_math_Vector3(qVec_y * _v.z - qVec_z * _v.y,qVec_z * _v.x - qVec_x * _v.z,qVec_x * _v.y - qVec_y * _v.x);
	t = new kha_math_Vector3(t.x * 2,t.y * 2,t.z * 2);
	var _x = qVec_y * t.z - qVec_z * t.y;
	var _y = qVec_z * t.x - qVec_x * t.z;
	var _z = qVec_x * t.y - qVec_y * t.x;
	var x = _x;
	var y = _y;
	var z = _z;
	if(_z == null) {
		z = 0;
	}
	if(_y == null) {
		y = 0;
	}
	if(_x == null) {
		x = 0;
	}
	return new kha_math_Vector3(_v.x + _quat.get_w() * t.x + x,_v.y + _quat.get_w() * t.y + y,_v.z + _quat.get_w() * t.z + z);
};
threed_QuaternionHelper.getLocalUp = function(_quat) {
	return threed_QuaternionHelper.rotateVector(_quat,new kha_math_Vector3(0,1,0));
};
threed_QuaternionHelper.getLocalForward = function(_quat) {
	return threed_QuaternionHelper.rotateVector(_quat,new kha_math_Vector3(0,0,1));
};
threed_QuaternionHelper.getLocalRight = function(_quat) {
	var _this = threed_QuaternionHelper.getLocalForward(_quat);
	var v = threed_QuaternionHelper.getLocalUp(_quat);
	return new kha_math_Vector3(_this.y * v.z - _this.z * v.y,_this.z * v.x - _this.x * v.z,_this.x * v.y - _this.y * v.x);
};
var threed_Scene = function() {
	this.meshesInRoot = [];
	this.containers = [];
};
$hxClasses["threed.Scene"] = threed_Scene;
threed_Scene.__name__ = true;
threed_Scene.prototype = {
	containers: null
	,meshesInRoot: null
	,update: function() {
		var _g = 0;
		var _g1 = this.containers;
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g3 = _g1[_g++].meshes;
			while(_g2 < _g3.length) _g3[_g2++].update();
		}
		var _g = 0;
		var _g1 = this.meshesInRoot;
		while(_g < _g1.length) _g1[_g++].update();
	}
	,__class__: threed_Scene
};
var threed_Joint = function(_fromFileId,_inverseBind) {
	this.skinMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	threed_Transformable.call(this);
	this.fromFileId = _fromFileId;
	this.inverseBindMatrix = new kha_math_FastMatrix4(_inverseBind[0],_inverseBind[4],_inverseBind[8],_inverseBind[12],_inverseBind[1],_inverseBind[5],_inverseBind[9],_inverseBind[13],_inverseBind[2],_inverseBind[6],_inverseBind[10],_inverseBind[14],_inverseBind[3],_inverseBind[7],_inverseBind[11],_inverseBind[15]);
	this.debugMesh = new threed_Mesh(threed_Mesh.prefabAnchor);
};
$hxClasses["threed.Joint"] = threed_Joint;
threed_Joint.__name__ = true;
threed_Joint.__super__ = threed_Transformable;
threed_Joint.prototype = $extend(threed_Transformable.prototype,{
	fromFileId: null
	,tightlyPackedId: null
	,debugMesh: null
	,inverseBindMatrix: null
	,skinMatrix: null
	,__class__: threed_Joint
});
var threed_Skeleton = function() {
	this.rootJoint = null;
	this.joints = [];
};
$hxClasses["threed.Skeleton"] = threed_Skeleton;
threed_Skeleton.__name__ = true;
threed_Skeleton.prototype = {
	joints: null
	,rootJoint: null
	,__class__: threed_Skeleton
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "white.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAUSURBVBhXY/wPBAxAwAQiGBgYGAA9+AQAag6xEAAAAABJRU5ErkJggg"},{ name : "systemfont", data : ""},{ name : "purplegrid.png", data : "iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAARSURBVBhXYwCCxZ5LwJiBAQAV7AMhAvhd+QAAAABJRU5ErkJggg"},{ name : "ball.png", data : "iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAAXNSR0IArs4c6QAAAMZlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgEoAAMAAAABAAIAAAExAAIAAAAVAAAAZodpAAQAAAABAAAAfAAAAAAAAABIAAAAAQAAAEgAAAABUGl4ZWxtYXRvciBQcm8gMi40LjUAAAAEkAQAAgAAABQAAACyoAEAAwAAAAEAAQAAoAIABAAAAAEAAAAOoAMABAAAAAEAAAAOAAAAADIwMjU6MDI6MTcgMDE6MTk6MzMABeKC1gAAAAlwSFlzAAALEwAACxMBAJqcGAAAA95pVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTQ8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTQ8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpDb2xvclNwYWNlPjE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzIwMDAwLzEwMDAwPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjAwMDAvMTAwMDA8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciBQcm8gMi40LjU8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpNZXRhZGF0YURhdGU+MjAyNS0wMi0xN1QwMToyNTo0MSswNTowMDwveG1wOk1ldGFkYXRhRGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjUtMDItMTdUMDE6MTk6MzMrMDU6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KRsxKRgAAAkRJREFUKBVtkVtIFVEYhb+9Zxw9ekLNEs+B7CBJSvXgg4VgL0FEBEnYBbuTQRFZgQRSD0GPWT1EQgS+dCf0IYPIHpSi8NIdkqNSeQQpL12O99vM7PaMdKDLPzD7Z/61Zv1rbcF/6uK1e0oIwdZwFveHBjl7eK/4G/bHh7qqGtWVP8UKay1bli1FziX5eBNF03Cck0fKE/hEc6nmnIqFx8go3c8OHmMbDqHQJjzlqRejOIYgyXWIlG30Of7rSvV5BQZ2YQTpCkaKi5jRhEp1F1zF4sg2Jtq+YMwFeTD8jVNHy4X0dmkdy8F151EOONIh/fV70jSh0d5Jg9rFz9gjgutCCEOyOZzjry8O7D6hxgLFrM/oIxr5TkFKCQJbu9IlFK4+yrJamF6eiykVjp40v1yFFFomdb4TpRRr+tMxbIWeJ0ppM00jGwjos8HezrP2lf5MDiYXYdqClnGdohtk1nJw5bxW9QQFhvbsBfTwVT5ICy/o2EwHcon7lkUlFqHxXr3WNKnRGLHJXs3SnhO6C03wTQef4x8o7DGRt27UCalMdNK0/RiiOZ5LXr/+bdfAgqrH6e4mOt2J7Omn4GuA41drF1KdeD5F+EwlctYkONfO03gYU7io6CdU90csTFYPZGIolyej2b68f49et6/imAqfrmLownWkfoQmjqTlU5oRI8UJ0jqRrTOwaKw/5HMSRI9cWVGtkkqSdbI2fdE8AhqYOfmOWWFh6YDq79Qm8InGI/6ug3uq9e1o08LQgSlu3r78D+4XTJ7YZkn2w6EAAAAASUVORK5CYII"},{ name : "grid.jpg", data : ""}];
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
aps_render_Screen.mouser = new aps_render_Mouser(0);
aps_render_Screen.fps = new aps_render__$Screen_Fps();
aps_render_Screen.taskId = -1;
aps_render_Screen.keys = new haxe_ds_IntMap();
Main.title = "Impact";
Main.gameW = 240;
Main.gameH = 240;
Main.isFullscreenNeeded = true;
Main.gameScale = 1;
aps_render_Focuser.isFocused = false;
aps_render_Focuser.isAlreadyFocusEventsAdded = false;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha_Display.instance = new kha_Display();
kha_LoaderImpl.dropFiles = new haxe_ds_StringMap();
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_fragData2 = "s192:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gZnJhZ21lbnRDb2xvcjsKfQoK";
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData2 = "s374:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData0 = "s407:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFVWOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s372:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHZlcnRleFVWOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHZlcnRleFVWOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData2 = "s471:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdmVydGV4VVY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData2 = "s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjNCBmcmFnbWVudENvbG9yOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_vertData0 = "s428:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFVWOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB2ZXJ0ZXhVVjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s394:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHZlcnRleFVWOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_text_vertData2 = "s492:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdmVydGV4VVY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB2ZXJ0ZXhVVjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData0 = "s407:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHZlcnRleFVWOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s372:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHZlcnRleFVWOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHZlcnRleFVWOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData2 = "s471:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdmVydGV4VVY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdmVydGV4VVY7CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.simple_fragData0 = "s1586:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBmbG9hdCBuZWFyOwp1bmlmb3JtIGhpZ2hwIGZsb2F0IGZhcjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgbXlUZXh0dXJlU2FtcGxlcjsKCnZhcnlpbmcgaGlnaHAgdmVjMyB2Tm9ybWFsOwp2YXJ5aW5nIGhpZ2hwIHZlYzMgdlN1cmZhY2VUb0NhbWVyYTsKdmFyeWluZyBoaWdocCB2ZWMyIHZVVjsKdmFyeWluZyBoaWdocCB2ZWM0IHZUaW50OwoKaGlnaHAgZmxvYXQgTGluZWFyaXplRGVwdGgoaGlnaHAgZmxvYXQgZGVwdGgpCnsKICAgIGhpZ2hwIGZsb2F0IHogPSAoZGVwdGggKiAyLjApIC0gMS4wOwogICAgcmV0dXJuICgoMi4wICogbmVhcikgKiBmYXIpIC8gKChmYXIgKyBuZWFyKSAtICh6ICogKGZhciAtIG5lYXIpKSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtID0gZ2xfRnJhZ0Nvb3JkLno7CiAgICBoaWdocCBmbG9hdCBsaWdodEFscGhhID0gMS4wIC0gKExpbmVhcml6ZURlcHRoKHBhcmFtKSAvIGZhcik7CiAgICBoaWdocCBmbG9hdCBOZG90TCA9IG1heChkb3Qobm9ybWFsaXplKHZOb3JtYWwpLCBub3JtYWxpemUodlN1cmZhY2VUb0NhbWVyYSkpLCAwLjApOwogICAgaGlnaHAgZmxvYXQgbGV2ZWxzID0gNi4wOwogICAgaGlnaHAgZmxvYXQgX25vaXNlID0gZnJhY3Qoc2luKGRvdCh2VVYsIHZlYzIoMTIuOTg5ODAwNDUzMTg2MDM1MTU2MjUsIDc4LjIzMzAwMTcwODk4NDM3NSkpKSAqIDQzNzU4LjU0Njg3NSk7CiAgICBoaWdocCBmbG9hdCBuZG90bF9ub2lzeSA9IGNsYW1wKE5kb3RMICsgKChfbm9pc2UgLSAwLjUpIC8gbGV2ZWxzKSwgMC4wLCAxLjApOwogICAgaGlnaHAgZmxvYXQgcXVhbnRpemVkID0gY2VpbChuZG90bF9ub2lzeSAqIGxldmVscykgLyBsZXZlbHM7CiAgICBoaWdocCB2ZWM0IHRleCA9IHRleHR1cmUyRChteVRleHR1cmVTYW1wbGVyLCB2VVYpOwogICAgaGlnaHAgdmVjMyBzaGFkZWQgPSAoKHRleC54eXogKiBxdWFudGl6ZWQpICogbGlnaHRBbHBoYSkgKiB2VGludC54eXo7CiAgICBoaWdocCB2ZWMzIGNvbG9yID0gbWl4KHNoYWRlZCwgdmVjMygwLjApLCB2ZWMzKHN0ZXAocXVhbnRpemVkLCAwLjApKSk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoY29sb3IsIHRleC53ICogdlRpbnQudyk7Cn0KCg";
kha_Shaders.simple_fragData1 = "s1588:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBmbG9hdCBuZWFyOwp1bmlmb3JtIGhpZ2hwIGZsb2F0IGZhcjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgbXlUZXh0dXJlU2FtcGxlcjsKCmluIGhpZ2hwIHZlYzMgdk5vcm1hbDsKaW4gaGlnaHAgdmVjMyB2U3VyZmFjZVRvQ2FtZXJhOwppbiBoaWdocCB2ZWMyIHZVVjsKaW4gaGlnaHAgdmVjNCB2VGludDsKb3V0IGhpZ2hwIHZlYzQgZnJhZ0NvbG9yOwoKaGlnaHAgZmxvYXQgTGluZWFyaXplRGVwdGgoaGlnaHAgZmxvYXQgZGVwdGgpCnsKICAgIGhpZ2hwIGZsb2F0IHogPSAoZGVwdGggKiAyLjApIC0gMS4wOwogICAgcmV0dXJuICgoMi4wICogbmVhcikgKiBmYXIpIC8gKChmYXIgKyBuZWFyKSAtICh6ICogKGZhciAtIG5lYXIpKSk7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtID0gZ2xfRnJhZ0Nvb3JkLno7CiAgICBoaWdocCBmbG9hdCBsaWdodEFscGhhID0gMS4wIC0gKExpbmVhcml6ZURlcHRoKHBhcmFtKSAvIGZhcik7CiAgICBoaWdocCBmbG9hdCBOZG90TCA9IG1heChkb3Qobm9ybWFsaXplKHZOb3JtYWwpLCBub3JtYWxpemUodlN1cmZhY2VUb0NhbWVyYSkpLCAwLjApOwogICAgaGlnaHAgZmxvYXQgbGV2ZWxzID0gNi4wOwogICAgaGlnaHAgZmxvYXQgX25vaXNlID0gZnJhY3Qoc2luKGRvdCh2VVYsIHZlYzIoMTIuOTg5ODAwNDUzMTg2MDM1MTU2MjUsIDc4LjIzMzAwMTcwODk4NDM3NSkpKSAqIDQzNzU4LjU0Njg3NSk7CiAgICBoaWdocCBmbG9hdCBuZG90bF9ub2lzeSA9IGNsYW1wKE5kb3RMICsgKChfbm9pc2UgLSAwLjUpIC8gbGV2ZWxzKSwgMC4wLCAxLjApOwogICAgaGlnaHAgZmxvYXQgcXVhbnRpemVkID0gY2VpbChuZG90bF9ub2lzeSAqIGxldmVscykgLyBsZXZlbHM7CiAgICBoaWdocCB2ZWM0IHRleCA9IHRleHR1cmUobXlUZXh0dXJlU2FtcGxlciwgdlVWKTsKICAgIGhpZ2hwIHZlYzMgc2hhZGVkID0gKCh0ZXgueHl6ICogcXVhbnRpemVkKSAqIGxpZ2h0QWxwaGEpICogdlRpbnQueHl6OwogICAgaGlnaHAgdmVjMyBjb2xvciA9IG1peChzaGFkZWQsIHZlYzMoMC4wKSwgdmVjMyhzdGVwKHF1YW50aXplZCwgMC4wKSkpOwogICAgZnJhZ0NvbG9yID0gdmVjNChjb2xvciwgdGV4LncgKiB2VGludC53KTsKfQoK";
kha_Shaders.simple_fragData2 = "s1439:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIGZsb2F0IG5lYXI7CnVuaWZvcm0gZmxvYXQgZmFyOwp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIG15VGV4dHVyZVNhbXBsZXI7Cgp2YXJ5aW5nIHZlYzMgdk5vcm1hbDsKdmFyeWluZyB2ZWMzIHZTdXJmYWNlVG9DYW1lcmE7CnZhcnlpbmcgdmVjMiB2VVY7CnZhcnlpbmcgdmVjNCB2VGludDsKCmZsb2F0IExpbmVhcml6ZURlcHRoKGZsb2F0IGRlcHRoKQp7CiAgICBmbG9hdCB6ID0gKGRlcHRoICogMi4wKSAtIDEuMDsKICAgIHJldHVybiAoKDIuMCAqIG5lYXIpICogZmFyKSAvICgoZmFyICsgbmVhcikgLSAoeiAqIChmYXIgLSBuZWFyKSkpOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBmbG9hdCBwYXJhbSA9IGdsX0ZyYWdDb29yZC56OwogICAgZmxvYXQgbGlnaHRBbHBoYSA9IDEuMCAtIChMaW5lYXJpemVEZXB0aChwYXJhbSkgLyBmYXIpOwogICAgZmxvYXQgTmRvdEwgPSBtYXgoZG90KG5vcm1hbGl6ZSh2Tm9ybWFsKSwgbm9ybWFsaXplKHZTdXJmYWNlVG9DYW1lcmEpKSwgMC4wKTsKICAgIGZsb2F0IGxldmVscyA9IDYuMDsKICAgIGZsb2F0IF9ub2lzZSA9IGZyYWN0KHNpbihkb3QodlVWLCB2ZWMyKDEyLjk4OTgwMDQ1MzE4NjAzNTE1NjI1LCA3OC4yMzMwMDE3MDg5ODQzNzUpKSkgKiA0Mzc1OC41NDY4NzUpOwogICAgZmxvYXQgbmRvdGxfbm9pc3kgPSBjbGFtcChOZG90TCArICgoX25vaXNlIC0gMC41KSAvIGxldmVscyksIDAuMCwgMS4wKTsKICAgIGZsb2F0IHF1YW50aXplZCA9IGNlaWwobmRvdGxfbm9pc3kgKiBsZXZlbHMpIC8gbGV2ZWxzOwogICAgdmVjNCB0ZXggPSB0ZXh0dXJlMkQobXlUZXh0dXJlU2FtcGxlciwgdlVWKTsKICAgIHZlYzMgc2hhZGVkID0gKCh0ZXgueHl6ICogcXVhbnRpemVkKSAqIGxpZ2h0QWxwaGEpICogdlRpbnQueHl6OwogICAgdmVjMyBjb2xvciA9IG1peChzaGFkZWQsIHZlYzMoMC4wKSwgdmVjMyhzdGVwKHF1YW50aXplZCwgMC4wKSkpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGNvbG9yLCB0ZXgudyAqIHZUaW50LncpOwp9Cgo";
kha_Shaders.skinned_vertData0 = "s3259:I3ZlcnNpb24gMTAwCgptYXQzIHRyYW5zcG9zZShtYXQzIG0pIHsgcmV0dXJuIG1hdDMobVswXVswXSwgbVsxXVswXSwgbVsyXVswXSwgbVswXVsxXSwgbVsxXVsxXSwgbVsyXVsxXSwgbVswXVsyXSwgbVsxXVsyXSwgbVsyXVsyXSk7IH0KCnVuaWZvcm0gZmxvYXQgdHJhbnNmb3Jtc1RleHR1cmVXOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB0cmFuc2Zvcm1zVGV4dHVyZTsKdW5pZm9ybSB2ZWMzIGNhbWVyYVBvczsKdW5pZm9ybSBtYXQ0IFZQOwoKYXR0cmlidXRlIGZsb2F0IHRyYW5zZm9ybXNNZXNoT2Zmc2V0OwphdHRyaWJ1dGUgdmVjNCB3ZWlnaHRzOwphdHRyaWJ1dGUgdmVjNCBqb2ludElkczsKYXR0cmlidXRlIHZlYzMgcG9zOwp2YXJ5aW5nIHZlYzMgdk5vcm1hbDsKYXR0cmlidXRlIHZlYzMgbm9ybWFsOwp2YXJ5aW5nIHZlYzIgdlVWOwphdHRyaWJ1dGUgdmVjMiB1djsKdmFyeWluZyB2ZWM0IHZUaW50OwphdHRyaWJ1dGUgdmVjNCB0aW50Owp2YXJ5aW5nIHZlYzMgdlN1cmZhY2VUb0NhbWVyYTsKCm1hdDQgZ2V0TWF0cml4KGludCBpbmRleCkKewogICAgZmxvYXQgdGV4ZWxXID0gMS4wIC8gdHJhbnNmb3Jtc1RleHR1cmVXOwogICAgZmxvYXQgZmlyc3QgPSAoKGZsb2F0KGluZGV4KSAqIDQuMCkgKiB0ZXhlbFcpICsgKDAuNSAqIHRleGVsVyk7CiAgICBtYXQ0IHJvd01ham9yOwogICAgZm9yIChpbnQgcm93SSA9IDA7IHJvd0kgPCA0OyByb3dJKyspCiAgICB7CiAgICAgICAgcm93TWFqb3Jbcm93SV0gPSB0ZXh0dXJlMkQodHJhbnNmb3Jtc1RleHR1cmUsIHZlYzIoZmlyc3QgKyAoZmxvYXQocm93SSkgKiB0ZXhlbFcpLCAwLjUpKTsKICAgIH0KICAgIHJvd01ham9yWzBdLncgPSAwLjA7CiAgICByb3dNYWpvclsxXS53ID0gMC4wOwogICAgcm93TWFqb3JbMl0udyA9IDAuMDsKICAgIHJvd01ham9yWzNdLncgPSAxLjA7CiAgICByZXR1cm4gcm93TWFqb3I7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGludCB0cmFuc2Zvcm1zTWVzaE9mZnNldF8xID0gaW50KHRyYW5zZm9ybXNNZXNoT2Zmc2V0KTsKICAgIG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQodmVjNCgxLjAsIDAuMCwgMC4wLCAwLjApLCB2ZWM0KDAuMCwgMS4wLCAwLjAsIDAuMCksIHZlYzQoMC4wLCAwLjAsIDEuMCwgMC4wKSwgdmVjNCgwLjAsIDAuMCwgMC4wLCAxLjApKTsKICAgIGlmICgoKCh3ZWlnaHRzLnggKyB3ZWlnaHRzLnkpICsgd2VpZ2h0cy56KSArIHdlaWdodHMudykgPiA5Ljk5OTk5OTc0NzM3ODc1MTYzNTU1MTQ1MjYzNjcxODhlLTA1KQogICAgewogICAgICAgIGludCBwYXJhbSA9IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgKyBpbnQoam9pbnRJZHMueCk7CiAgICAgICAgbWF0NCBfMTE5ID0gZ2V0TWF0cml4KHBhcmFtKSAqIHdlaWdodHMueDsKICAgICAgICBpbnQgcGFyYW1fMSA9IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgKyBpbnQoam9pbnRJZHMueSk7CiAgICAgICAgbWF0NCBfMTI5ID0gZ2V0TWF0cml4KHBhcmFtXzEpICogd2VpZ2h0cy55OwogICAgICAgIG1hdDQgXzE0MiA9IG1hdDQoXzExOVswXSArIF8xMjlbMF0sIF8xMTlbMV0gKyBfMTI5WzFdLCBfMTE5WzJdICsgXzEyOVsyXSwgXzExOVszXSArIF8xMjlbM10pOwogICAgICAgIGludCBwYXJhbV8yID0gdHJhbnNmb3Jtc01lc2hPZmZzZXRfMSArIGludChqb2ludElkcy56KTsKICAgICAgICBtYXQ0IF8xNTIgPSBnZXRNYXRyaXgocGFyYW1fMikgKiB3ZWlnaHRzLno7CiAgICAgICAgbWF0NCBfMTY1ID0gbWF0NChfMTQyWzBdICsgXzE1MlswXSwgXzE0MlsxXSArIF8xNTJbMV0sIF8xNDJbMl0gKyBfMTUyWzJdLCBfMTQyWzNdICsgXzE1MlszXSk7CiAgICAgICAgaW50IHBhcmFtXzMgPSB0cmFuc2Zvcm1zTWVzaE9mZnNldF8xICsgaW50KGpvaW50SWRzLncpOwogICAgICAgIG1hdDQgXzE3NSA9IGdldE1hdHJpeChwYXJhbV8zKSAqIHdlaWdodHMudzsKICAgICAgICBza2luTWF0cml4ID0gbWF0NChfMTY1WzBdICsgXzE3NVswXSwgXzE2NVsxXSArIF8xNzVbMV0sIF8xNjVbMl0gKyBfMTc1WzJdLCBfMTY1WzNdICsgXzE3NVszXSk7CiAgICB9CiAgICB2ZWM0IHdvcmxkUG9zID0gc2tpbk1hdHJpeCAqIHZlYzQocG9zLCAxLjApOwogICAgdmVjMyBzdXJmYWNlVG9DYW1lcmEgPSBub3JtYWxpemUoY2FtZXJhUG9zIC0gd29ybGRQb3MueHl6KTsKICAgIG1hdDMgc2tpbk1hdDMgPSBtYXQzKHNraW5NYXRyaXhbMF0ueHl6LCBza2luTWF0cml4WzFdLnh5eiwgc2tpbk1hdHJpeFsyXS54eXopOwogICAgbWF0MyBub3JtYWxNYXRyaXggPSB0cmFuc3Bvc2UoaW52ZXJzZShza2luTWF0MykpOwogICAgdk5vcm1hbCA9IG5vcm1hbGl6ZShub3JtYWxNYXRyaXggKiBub3JtYWwpOwogICAgdlVWID0gdXY7CiAgICB2VGludCA9IHRpbnQ7CiAgICB2U3VyZmFjZVRvQ2FtZXJhID0gc3VyZmFjZVRvQ2FtZXJhOwogICAgZ2xfUG9zaXRpb24gPSBWUCAqIHdvcmxkUG9zOwp9Cgo";
kha_Shaders.skinned_vertData1 = "s3022:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIGZsb2F0IHRyYW5zZm9ybXNUZXh0dXJlVzsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdHJhbnNmb3Jtc1RleHR1cmU7CnVuaWZvcm0gdmVjMyBjYW1lcmFQb3M7CnVuaWZvcm0gbWF0NCBWUDsKCmluIGZsb2F0IHRyYW5zZm9ybXNNZXNoT2Zmc2V0OwppbiB2ZWM0IHdlaWdodHM7CmluIHZlYzQgam9pbnRJZHM7CmluIHZlYzMgcG9zOwpvdXQgdmVjMyB2Tm9ybWFsOwppbiB2ZWMzIG5vcm1hbDsKb3V0IHZlYzIgdlVWOwppbiB2ZWMyIHV2OwpvdXQgdmVjNCB2VGludDsKaW4gdmVjNCB0aW50OwpvdXQgdmVjMyB2U3VyZmFjZVRvQ2FtZXJhOwoKbWF0NCBnZXRNYXRyaXgoaW50IGluZGV4KQp7CiAgICBmbG9hdCB0ZXhlbFcgPSAxLjAgLyB0cmFuc2Zvcm1zVGV4dHVyZVc7CiAgICBmbG9hdCBmaXJzdCA9ICgoZmxvYXQoaW5kZXgpICogNC4wKSAqIHRleGVsVykgKyAoMC41ICogdGV4ZWxXKTsKICAgIG1hdDQgcm93TWFqb3I7CiAgICBmb3IgKGludCByb3dJID0gMDsgcm93SSA8IDQ7IHJvd0krKykKICAgIHsKICAgICAgICByb3dNYWpvcltyb3dJXSA9IHRleHR1cmVMb2QodHJhbnNmb3Jtc1RleHR1cmUsIHZlYzIoZmlyc3QgKyAoZmxvYXQocm93SSkgKiB0ZXhlbFcpLCAwLjUpLCAwLjApOwogICAgfQogICAgcm93TWFqb3JbMF0udyA9IDAuMDsKICAgIHJvd01ham9yWzFdLncgPSAwLjA7CiAgICByb3dNYWpvclsyXS53ID0gMC4wOwogICAgcm93TWFqb3JbM10udyA9IDEuMDsKICAgIHJldHVybiByb3dNYWpvcjsKfQoKdm9pZCBtYWluKCkKewogICAgaW50IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgPSBpbnQodHJhbnNmb3Jtc01lc2hPZmZzZXQpOwogICAgbWF0NCBza2luTWF0cml4ID0gbWF0NCh2ZWM0KDEuMCwgMC4wLCAwLjAsIDAuMCksIHZlYzQoMC4wLCAxLjAsIDAuMCwgMC4wKSwgdmVjNCgwLjAsIDAuMCwgMS4wLCAwLjApLCB2ZWM0KDAuMCwgMC4wLCAwLjAsIDEuMCkpOwogICAgaWYgKCgoKHdlaWdodHMueCArIHdlaWdodHMueSkgKyB3ZWlnaHRzLnopICsgd2VpZ2h0cy53KSA%IDkuOTk5OTk5NzQ3Mzc4NzUxNjM1NTUxNDUyNjM2NzE4OGUtMDUpCiAgICB7CiAgICAgICAgaW50IHBhcmFtID0gdHJhbnNmb3Jtc01lc2hPZmZzZXRfMSArIGludChqb2ludElkcy54KTsKICAgICAgICBtYXQ0IF8xMTkgPSBnZXRNYXRyaXgocGFyYW0pICogd2VpZ2h0cy54OwogICAgICAgIGludCBwYXJhbV8xID0gdHJhbnNmb3Jtc01lc2hPZmZzZXRfMSArIGludChqb2ludElkcy55KTsKICAgICAgICBtYXQ0IF8xMjkgPSBnZXRNYXRyaXgocGFyYW1fMSkgKiB3ZWlnaHRzLnk7CiAgICAgICAgbWF0NCBfMTQyID0gbWF0NChfMTE5WzBdICsgXzEyOVswXSwgXzExOVsxXSArIF8xMjlbMV0sIF8xMTlbMl0gKyBfMTI5WzJdLCBfMTE5WzNdICsgXzEyOVszXSk7CiAgICAgICAgaW50IHBhcmFtXzIgPSB0cmFuc2Zvcm1zTWVzaE9mZnNldF8xICsgaW50KGpvaW50SWRzLnopOwogICAgICAgIG1hdDQgXzE1MiA9IGdldE1hdHJpeChwYXJhbV8yKSAqIHdlaWdodHMuejsKICAgICAgICBtYXQ0IF8xNjUgPSBtYXQ0KF8xNDJbMF0gKyBfMTUyWzBdLCBfMTQyWzFdICsgXzE1MlsxXSwgXzE0MlsyXSArIF8xNTJbMl0sIF8xNDJbM10gKyBfMTUyWzNdKTsKICAgICAgICBpbnQgcGFyYW1fMyA9IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgKyBpbnQoam9pbnRJZHMudyk7CiAgICAgICAgbWF0NCBfMTc1ID0gZ2V0TWF0cml4KHBhcmFtXzMpICogd2VpZ2h0cy53OwogICAgICAgIHNraW5NYXRyaXggPSBtYXQ0KF8xNjVbMF0gKyBfMTc1WzBdLCBfMTY1WzFdICsgXzE3NVsxXSwgXzE2NVsyXSArIF8xNzVbMl0sIF8xNjVbM10gKyBfMTc1WzNdKTsKICAgIH0KICAgIHZlYzQgd29ybGRQb3MgPSBza2luTWF0cml4ICogdmVjNChwb3MsIDEuMCk7CiAgICB2ZWMzIHN1cmZhY2VUb0NhbWVyYSA9IG5vcm1hbGl6ZShjYW1lcmFQb3MgLSB3b3JsZFBvcy54eXopOwogICAgbWF0MyBza2luTWF0MyA9IG1hdDMoc2tpbk1hdHJpeFswXS54eXosIHNraW5NYXRyaXhbMV0ueHl6LCBza2luTWF0cml4WzJdLnh5eik7CiAgICBtYXQzIG5vcm1hbE1hdHJpeCA9IHRyYW5zcG9zZShpbnZlcnNlKHNraW5NYXQzKSk7CiAgICB2Tm9ybWFsID0gbm9ybWFsaXplKG5vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CiAgICB2VVYgPSB1djsKICAgIHZUaW50ID0gdGludDsKICAgIHZTdXJmYWNlVG9DYW1lcmEgPSBzdXJmYWNlVG9DYW1lcmE7CiAgICBnbF9Qb3NpdGlvbiA9IFZQICogd29ybGRQb3M7Cn0KCg";
kha_Shaders.skinned_vertData2 = "s3646:I3ZlcnNpb24gMTAwCgptYXQzIHRyYW5zcG9zZShtYXQzIG0pIHsgcmV0dXJuIG1hdDMobVswXVswXSwgbVsxXVswXSwgbVsyXVswXSwgbVswXVsxXSwgbVsxXVsxXSwgbVsyXVsxXSwgbVswXVsyXSwgbVsxXVsyXSwgbVsyXVsyXSk7IH0KCnVuaWZvcm0gbWVkaXVtcCBmbG9hdCB0cmFuc2Zvcm1zVGV4dHVyZVc7CnVuaWZvcm0gbWVkaXVtcCBzYW1wbGVyMkQgdHJhbnNmb3Jtc1RleHR1cmU7CnVuaWZvcm0gbWVkaXVtcCB2ZWMzIGNhbWVyYVBvczsKdW5pZm9ybSBtZWRpdW1wIG1hdDQgVlA7CgphdHRyaWJ1dGUgbWVkaXVtcCBmbG9hdCB0cmFuc2Zvcm1zTWVzaE9mZnNldDsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB3ZWlnaHRzOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IGpvaW50SWRzOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWMzIHBvczsKdmFyeWluZyBtZWRpdW1wIHZlYzMgdk5vcm1hbDsKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyBub3JtYWw7CnZhcnlpbmcgbWVkaXVtcCB2ZWMyIHZVVjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjMiB1djsKdmFyeWluZyBtZWRpdW1wIHZlYzQgdlRpbnQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdGludDsKdmFyeWluZyBtZWRpdW1wIHZlYzMgdlN1cmZhY2VUb0NhbWVyYTsKCm1lZGl1bXAgbWF0NCBnZXRNYXRyaXgobWVkaXVtcCBpbnQgaW5kZXgpCnsKICAgIG1lZGl1bXAgZmxvYXQgdGV4ZWxXID0gMS4wIC8gdHJhbnNmb3Jtc1RleHR1cmVXOwogICAgbWVkaXVtcCBmbG9hdCBmaXJzdCA9ICgoZmxvYXQoaW5kZXgpICogNC4wKSAqIHRleGVsVykgKyAoMC41ICogdGV4ZWxXKTsKICAgIG1lZGl1bXAgbWF0NCByb3dNYWpvcjsKICAgIGZvciAobWVkaXVtcCBpbnQgcm93SSA9IDA7IHJvd0kgPCA0OyByb3dJKyspCiAgICB7CiAgICAgICAgcm93TWFqb3Jbcm93SV0gPSB0ZXh0dXJlMkQodHJhbnNmb3Jtc1RleHR1cmUsIHZlYzIoZmlyc3QgKyAoZmxvYXQocm93SSkgKiB0ZXhlbFcpLCAwLjUpKTsKICAgIH0KICAgIHJvd01ham9yWzBdLncgPSAwLjA7CiAgICByb3dNYWpvclsxXS53ID0gMC4wOwogICAgcm93TWFqb3JbMl0udyA9IDAuMDsKICAgIHJvd01ham9yWzNdLncgPSAxLjA7CiAgICByZXR1cm4gcm93TWFqb3I7Cn0KCnZvaWQgbWFpbigpCnsKICAgIG1lZGl1bXAgaW50IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgPSBpbnQodHJhbnNmb3Jtc01lc2hPZmZzZXQpOwogICAgbWVkaXVtcCBtYXQ0IHNraW5NYXRyaXggPSBtYXQ0KHZlYzQoMS4wLCAwLjAsIDAuMCwgMC4wKSwgdmVjNCgwLjAsIDEuMCwgMC4wLCAwLjApLCB2ZWM0KDAuMCwgMC4wLCAxLjAsIDAuMCksIHZlYzQoMC4wLCAwLjAsIDAuMCwgMS4wKSk7CiAgICBpZiAoKCgod2VpZ2h0cy54ICsgd2VpZ2h0cy55KSArIHdlaWdodHMueikgKyB3ZWlnaHRzLncpID4gOS45OTk5OTk3NDczNzg3NTE2MzU1NTE0NTI2MzY3MTg4ZS0wNSkKICAgIHsKICAgICAgICBtZWRpdW1wIGludCBwYXJhbSA9IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgKyBpbnQoam9pbnRJZHMueCk7CiAgICAgICAgbWVkaXVtcCBtYXQ0IF8xMTkgPSBnZXRNYXRyaXgocGFyYW0pICogd2VpZ2h0cy54OwogICAgICAgIG1lZGl1bXAgaW50IHBhcmFtXzEgPSB0cmFuc2Zvcm1zTWVzaE9mZnNldF8xICsgaW50KGpvaW50SWRzLnkpOwogICAgICAgIG1lZGl1bXAgbWF0NCBfMTI5ID0gZ2V0TWF0cml4KHBhcmFtXzEpICogd2VpZ2h0cy55OwogICAgICAgIG1lZGl1bXAgbWF0NCBfMTQyID0gbWF0NChfMTE5WzBdICsgXzEyOVswXSwgXzExOVsxXSArIF8xMjlbMV0sIF8xMTlbMl0gKyBfMTI5WzJdLCBfMTE5WzNdICsgXzEyOVszXSk7CiAgICAgICAgbWVkaXVtcCBpbnQgcGFyYW1fMiA9IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgKyBpbnQoam9pbnRJZHMueik7CiAgICAgICAgbWVkaXVtcCBtYXQ0IF8xNTIgPSBnZXRNYXRyaXgocGFyYW1fMikgKiB3ZWlnaHRzLno7CiAgICAgICAgbWVkaXVtcCBtYXQ0IF8xNjUgPSBtYXQ0KF8xNDJbMF0gKyBfMTUyWzBdLCBfMTQyWzFdICsgXzE1MlsxXSwgXzE0MlsyXSArIF8xNTJbMl0sIF8xNDJbM10gKyBfMTUyWzNdKTsKICAgICAgICBtZWRpdW1wIGludCBwYXJhbV8zID0gdHJhbnNmb3Jtc01lc2hPZmZzZXRfMSArIGludChqb2ludElkcy53KTsKICAgICAgICBtZWRpdW1wIG1hdDQgXzE3NSA9IGdldE1hdHJpeChwYXJhbV8zKSAqIHdlaWdodHMudzsKICAgICAgICBza2luTWF0cml4ID0gbWF0NChfMTY1WzBdICsgXzE3NVswXSwgXzE2NVsxXSArIF8xNzVbMV0sIF8xNjVbMl0gKyBfMTc1WzJdLCBfMTY1WzNdICsgXzE3NVszXSk7CiAgICB9CiAgICBtZWRpdW1wIHZlYzQgd29ybGRQb3MgPSBza2luTWF0cml4ICogdmVjNChwb3MsIDEuMCk7CiAgICBtZWRpdW1wIHZlYzMgc3VyZmFjZVRvQ2FtZXJhID0gbm9ybWFsaXplKGNhbWVyYVBvcyAtIHdvcmxkUG9zLnh5eik7CiAgICBtZWRpdW1wIG1hdDMgc2tpbk1hdDMgPSBtYXQzKHNraW5NYXRyaXhbMF0ueHl6LCBza2luTWF0cml4WzFdLnh5eiwgc2tpbk1hdHJpeFsyXS54eXopOwogICAgbWVkaXVtcCBtYXQzIG5vcm1hbE1hdHJpeCA9IHRyYW5zcG9zZShpbnZlcnNlKHNraW5NYXQzKSk7CiAgICB2Tm9ybWFsID0gbm9ybWFsaXplKG5vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CiAgICB2VVYgPSB1djsKICAgIHZUaW50ID0gdGludDsKICAgIHZTdXJmYWNlVG9DYW1lcmEgPSBzdXJmYWNlVG9DYW1lcmE7CiAgICBnbF9Qb3NpdGlvbiA9IFZQICogd29ybGRQb3M7Cn0KCg";
kha_Shaders.static_vertData0 = "s1958:I3ZlcnNpb24gMTAwCgptYXQzIHRyYW5zcG9zZShtYXQzIG0pIHsgcmV0dXJuIG1hdDMobVswXVswXSwgbVsxXVswXSwgbVsyXVswXSwgbVswXVsxXSwgbVsxXVsxXSwgbVsyXVsxXSwgbVswXVsyXSwgbVsxXVsyXSwgbVsyXVsyXSk7IH0KCnVuaWZvcm0gZmxvYXQgdHJhbnNmb3Jtc1RleHR1cmVXOwp1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB0cmFuc2Zvcm1zVGV4dHVyZTsKdW5pZm9ybSB2ZWMzIGNhbWVyYVBvczsKdW5pZm9ybSBtYXQ0IFZQOwoKYXR0cmlidXRlIGZsb2F0IHRyYW5zZm9ybXNNZXNoT2Zmc2V0OwphdHRyaWJ1dGUgdmVjMyBwb3M7CnZhcnlpbmcgdmVjMyB2Tm9ybWFsOwphdHRyaWJ1dGUgdmVjMyBub3JtYWw7CnZhcnlpbmcgdmVjMiB2VVY7CmF0dHJpYnV0ZSB2ZWMyIHV2Owp2YXJ5aW5nIHZlYzQgdlRpbnQ7CmF0dHJpYnV0ZSB2ZWM0IHRpbnQ7CnZhcnlpbmcgdmVjMyB2U3VyZmFjZVRvQ2FtZXJhOwoKbWF0NCBnZXRNYXRyaXgoaW50IGluZGV4KQp7CiAgICBmbG9hdCB0ZXhlbFcgPSAxLjAgLyB0cmFuc2Zvcm1zVGV4dHVyZVc7CiAgICBmbG9hdCBmaXJzdCA9ICgoZmxvYXQoaW5kZXgpICogNC4wKSAqIHRleGVsVykgKyAoMC41ICogdGV4ZWxXKTsKICAgIG1hdDQgcm93TWFqb3I7CiAgICBmb3IgKGludCByb3dJID0gMDsgcm93SSA8IDQ7IHJvd0krKykKICAgIHsKICAgICAgICByb3dNYWpvcltyb3dJXSA9IHRleHR1cmUyRCh0cmFuc2Zvcm1zVGV4dHVyZSwgdmVjMihmaXJzdCArIChmbG9hdChyb3dJKSAqIHRleGVsVyksIDAuNSkpOwogICAgfQogICAgcm93TWFqb3JbMF0udyA9IDAuMDsKICAgIHJvd01ham9yWzFdLncgPSAwLjA7CiAgICByb3dNYWpvclsyXS53ID0gMC4wOwogICAgcm93TWFqb3JbM10udyA9IDEuMDsKICAgIHJldHVybiByb3dNYWpvcjsKfQoKdm9pZCBtYWluKCkKewogICAgaW50IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzEgPSBpbnQodHJhbnNmb3Jtc01lc2hPZmZzZXQpOwogICAgaW50IHBhcmFtID0gdHJhbnNmb3Jtc01lc2hPZmZzZXRfMTsKICAgIG1hdDQgbW9kZWxNYXRyaXggPSBnZXRNYXRyaXgocGFyYW0pOwogICAgdmVjNCB3b3JsZFBvcyA9IG1vZGVsTWF0cml4ICogdmVjNChwb3MsIDEuMCk7CiAgICB2ZWMzIHN1cmZhY2VUb0NhbWVyYSA9IG5vcm1hbGl6ZShjYW1lcmFQb3MgLSB3b3JsZFBvcy54eXopOwogICAgbWF0MyBza2luTWF0MyA9IG1hdDMobW9kZWxNYXRyaXhbMF0ueHl6LCBtb2RlbE1hdHJpeFsxXS54eXosIG1vZGVsTWF0cml4WzJdLnh5eik7CiAgICBtYXQzIG5vcm1hbE1hdHJpeCA9IHRyYW5zcG9zZShpbnZlcnNlKHNraW5NYXQzKSk7CiAgICB2Tm9ybWFsID0gbm9ybWFsaXplKG5vcm1hbE1hdHJpeCAqIG5vcm1hbCk7CiAgICB2VVYgPSB1djsKICAgIHZUaW50ID0gdGludDsKICAgIHZTdXJmYWNlVG9DYW1lcmEgPSBzdXJmYWNlVG9DYW1lcmE7CiAgICBnbF9Qb3NpdGlvbiA9IFZQICogd29ybGRQb3M7Cn0KCg";
kha_Shaders.static_vertData1 = "s1739:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIGZsb2F0IHRyYW5zZm9ybXNUZXh0dXJlVzsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdHJhbnNmb3Jtc1RleHR1cmU7CnVuaWZvcm0gdmVjMyBjYW1lcmFQb3M7CnVuaWZvcm0gbWF0NCBWUDsKCmluIGZsb2F0IHRyYW5zZm9ybXNNZXNoT2Zmc2V0OwppbiB2ZWMzIHBvczsKb3V0IHZlYzMgdk5vcm1hbDsKaW4gdmVjMyBub3JtYWw7Cm91dCB2ZWMyIHZVVjsKaW4gdmVjMiB1djsKb3V0IHZlYzQgdlRpbnQ7CmluIHZlYzQgdGludDsKb3V0IHZlYzMgdlN1cmZhY2VUb0NhbWVyYTsKCm1hdDQgZ2V0TWF0cml4KGludCBpbmRleCkKewogICAgZmxvYXQgdGV4ZWxXID0gMS4wIC8gdHJhbnNmb3Jtc1RleHR1cmVXOwogICAgZmxvYXQgZmlyc3QgPSAoKGZsb2F0KGluZGV4KSAqIDQuMCkgKiB0ZXhlbFcpICsgKDAuNSAqIHRleGVsVyk7CiAgICBtYXQ0IHJvd01ham9yOwogICAgZm9yIChpbnQgcm93SSA9IDA7IHJvd0kgPCA0OyByb3dJKyspCiAgICB7CiAgICAgICAgcm93TWFqb3Jbcm93SV0gPSB0ZXh0dXJlTG9kKHRyYW5zZm9ybXNUZXh0dXJlLCB2ZWMyKGZpcnN0ICsgKGZsb2F0KHJvd0kpICogdGV4ZWxXKSwgMC41KSwgMC4wKTsKICAgIH0KICAgIHJvd01ham9yWzBdLncgPSAwLjA7CiAgICByb3dNYWpvclsxXS53ID0gMC4wOwogICAgcm93TWFqb3JbMl0udyA9IDAuMDsKICAgIHJvd01ham9yWzNdLncgPSAxLjA7CiAgICByZXR1cm4gcm93TWFqb3I7Cn0KCnZvaWQgbWFpbigpCnsKICAgIGludCB0cmFuc2Zvcm1zTWVzaE9mZnNldF8xID0gaW50KHRyYW5zZm9ybXNNZXNoT2Zmc2V0KTsKICAgIGludCBwYXJhbSA9IHRyYW5zZm9ybXNNZXNoT2Zmc2V0XzE7CiAgICBtYXQ0IG1vZGVsTWF0cml4ID0gZ2V0TWF0cml4KHBhcmFtKTsKICAgIHZlYzQgd29ybGRQb3MgPSBtb2RlbE1hdHJpeCAqIHZlYzQocG9zLCAxLjApOwogICAgdmVjMyBzdXJmYWNlVG9DYW1lcmEgPSBub3JtYWxpemUoY2FtZXJhUG9zIC0gd29ybGRQb3MueHl6KTsKICAgIG1hdDMgc2tpbk1hdDMgPSBtYXQzKG1vZGVsTWF0cml4WzBdLnh5eiwgbW9kZWxNYXRyaXhbMV0ueHl6LCBtb2RlbE1hdHJpeFsyXS54eXopOwogICAgbWF0MyBub3JtYWxNYXRyaXggPSB0cmFuc3Bvc2UoaW52ZXJzZShza2luTWF0MykpOwogICAgdk5vcm1hbCA9IG5vcm1hbGl6ZShub3JtYWxNYXRyaXggKiBub3JtYWwpOwogICAgdlVWID0gdXY7CiAgICB2VGludCA9IHRpbnQ7CiAgICB2U3VyZmFjZVRvQ2FtZXJhID0gc3VyZmFjZVRvQ2FtZXJhOwogICAgZ2xfUG9zaXRpb24gPSBWUCAqIHdvcmxkUG9zOwp9Cgo";
kha_Shaders.static_vertData2 = "s2227:I3ZlcnNpb24gMTAwCgptYXQzIHRyYW5zcG9zZShtYXQzIG0pIHsgcmV0dXJuIG1hdDMobVswXVswXSwgbVsxXVswXSwgbVsyXVswXSwgbVswXVsxXSwgbVsxXVsxXSwgbVsyXVsxXSwgbVswXVsyXSwgbVsxXVsyXSwgbVsyXVsyXSk7IH0KCnVuaWZvcm0gbWVkaXVtcCBmbG9hdCB0cmFuc2Zvcm1zVGV4dHVyZVc7CnVuaWZvcm0gbWVkaXVtcCBzYW1wbGVyMkQgdHJhbnNmb3Jtc1RleHR1cmU7CnVuaWZvcm0gbWVkaXVtcCB2ZWMzIGNhbWVyYVBvczsKdW5pZm9ybSBtZWRpdW1wIG1hdDQgVlA7CgphdHRyaWJ1dGUgbWVkaXVtcCBmbG9hdCB0cmFuc2Zvcm1zTWVzaE9mZnNldDsKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyBwb3M7CnZhcnlpbmcgbWVkaXVtcCB2ZWMzIHZOb3JtYWw7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzMgbm9ybWFsOwp2YXJ5aW5nIG1lZGl1bXAgdmVjMiB2VVY7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdXY7CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IHZUaW50OwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHRpbnQ7CnZhcnlpbmcgbWVkaXVtcCB2ZWMzIHZTdXJmYWNlVG9DYW1lcmE7CgptZWRpdW1wIG1hdDQgZ2V0TWF0cml4KG1lZGl1bXAgaW50IGluZGV4KQp7CiAgICBtZWRpdW1wIGZsb2F0IHRleGVsVyA9IDEuMCAvIHRyYW5zZm9ybXNUZXh0dXJlVzsKICAgIG1lZGl1bXAgZmxvYXQgZmlyc3QgPSAoKGZsb2F0KGluZGV4KSAqIDQuMCkgKiB0ZXhlbFcpICsgKDAuNSAqIHRleGVsVyk7CiAgICBtZWRpdW1wIG1hdDQgcm93TWFqb3I7CiAgICBmb3IgKG1lZGl1bXAgaW50IHJvd0kgPSAwOyByb3dJIDwgNDsgcm93SSsrKQogICAgewogICAgICAgIHJvd01ham9yW3Jvd0ldID0gdGV4dHVyZTJEKHRyYW5zZm9ybXNUZXh0dXJlLCB2ZWMyKGZpcnN0ICsgKGZsb2F0KHJvd0kpICogdGV4ZWxXKSwgMC41KSk7CiAgICB9CiAgICByb3dNYWpvclswXS53ID0gMC4wOwogICAgcm93TWFqb3JbMV0udyA9IDAuMDsKICAgIHJvd01ham9yWzJdLncgPSAwLjA7CiAgICByb3dNYWpvclszXS53ID0gMS4wOwogICAgcmV0dXJuIHJvd01ham9yOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBtZWRpdW1wIGludCB0cmFuc2Zvcm1zTWVzaE9mZnNldF8xID0gaW50KHRyYW5zZm9ybXNNZXNoT2Zmc2V0KTsKICAgIG1lZGl1bXAgaW50IHBhcmFtID0gdHJhbnNmb3Jtc01lc2hPZmZzZXRfMTsKICAgIG1lZGl1bXAgbWF0NCBtb2RlbE1hdHJpeCA9IGdldE1hdHJpeChwYXJhbSk7CiAgICBtZWRpdW1wIHZlYzQgd29ybGRQb3MgPSBtb2RlbE1hdHJpeCAqIHZlYzQocG9zLCAxLjApOwogICAgbWVkaXVtcCB2ZWMzIHN1cmZhY2VUb0NhbWVyYSA9IG5vcm1hbGl6ZShjYW1lcmFQb3MgLSB3b3JsZFBvcy54eXopOwogICAgbWVkaXVtcCBtYXQzIHNraW5NYXQzID0gbWF0Myhtb2RlbE1hdHJpeFswXS54eXosIG1vZGVsTWF0cml4WzFdLnh5eiwgbW9kZWxNYXRyaXhbMl0ueHl6KTsKICAgIG1lZGl1bXAgbWF0MyBub3JtYWxNYXRyaXggPSB0cmFuc3Bvc2UoaW52ZXJzZShza2luTWF0MykpOwogICAgdk5vcm1hbCA9IG5vcm1hbGl6ZShub3JtYWxNYXRyaXggKiBub3JtYWwpOwogICAgdlVWID0gdXY7CiAgICB2VGludCA9IHRpbnQ7CiAgICB2U3VyZmFjZVRvQ2FtZXJhID0gc3VyZmFjZVRvQ2FtZXJhOwogICAgZ2xfUG9zaXRpb24gPSBWUCAqIHdvcmxkUG9zOwp9Cgo";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.safari = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.estimatedRefreshRate = 60;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_Window.windows = [];
kha_Window.resizeCallbacks = [];
kha_arrays_ByteArray.LITTLE_ENDIAN = new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x78;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.lastAllocationCount = 0;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) _g.push(_g1++);
	}
	$r = _g;
	return $r;
}(this));
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Mouse.wheelEventBlockBehavior = kha_input_MouseEventBlockBehavior.Full;
kha_input_Surface.touchDownEventBlockBehavior = kha_input_TouchDownEventBlockBehavior.Full;
kha_input_Surface.listenedEventsBefore = false;
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_js_graphics4_Graphics.setMatrix_matrixCache = new Float32Array(16);
kha_js_graphics4_Graphics.useVertexAttributes = 0;
kha_netsync_ControllerBuilder.nextId = 0;
threed_Mesh.prefabAnchor = new threed_Prefab([new threed_Triangle([new threed_Point(-0.25,0.25,0),new threed_Point(0.25,0.25,0),new threed_Point(0.25,-0.25,0),new threed_Point(-0.25,-0.25,0)],[new threed_UV(0,0),new threed_UV(1,0),new threed_UV(1,1),new threed_UV(0,1)])]);
threed_Projectables.piDivided180 = Math.PI / 180;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
