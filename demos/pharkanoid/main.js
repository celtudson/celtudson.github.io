// Generated by Haxe 4.1.2
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.main = function() {
	var config = { width : Main.gameWidth, height : Main.gameHeight, scene : [new arkanoid_LoaderScene(),new arkanoid_GameScene()], scale : { mode : Phaser.Scale.NONE, autoCenter : Phaser.Scale.CENTER_BOTH}, type : Phaser.AUTO, render : { pixelArt : true, antialias : false}, physics : { "default" : "arcade", arcade : { debug : false}}, disableContextMenu : true, autoFocus : true};
	Main.game = new Phaser.Game(config);
	window.onresize = Main.onResize;
	window.onorientationchange = Main.onResize;
	Main.onResize();
};
Main.onResize = function() {
	if(Main.game == null || !Main.game.isBooted) {
		return;
	}
	var ratio = window.innerWidth > window.innerHeight ? window.innerHeight / Main.gameHeight : window.innerWidth / Main.gameWidth;
	console.log("src/Main.hx:38:",ratio);
	Main.game.canvas.style.width = Main.gameWidth * ratio + "px";
	Main.game.canvas.style.height = Main.gameHeight * ratio + "px";
};
var arkanoid_BricksManager = function(_game) {
	this.leftBottom = Math.atan2(4,-8);
	this.rightBottom = Math.atan2(4,8);
	this.rightTop = Math.atan2(-4,8);
	this.leftTop = Math.atan2(-4,-8);
	this.bricks = [];
	this.game = _game;
	this.textBricksLegth = this.game.add.text(0,0,"",{ fontSize : 8});
	this.textComboSplash = this.game.add.text(0,0,"",{ fontSize : 32}).setDepth(10);
	this.textScore = this.game.add.text(50,90,"",{ fontSize : 16});
};
arkanoid_BricksManager.prototype = {
	reset: function() {
		var _g = 0;
		var _g1 = this.bricks;
		while(_g < _g1.length) {
			var brick = _g1[_g];
			++_g;
			this.game.physics.world.disable(brick);
			brick.destroy();
		}
		this.bricks.length = 0;
		var map = [[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1]];
		var offsetX = Main.gameWidth / 2 - (map[0].length * 16 + (map[0].length - 1) * 2) / 2 + 8;
		var _g = 0;
		var _g1 = map.length;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = 0;
			var _g3 = map[0].length;
			while(_g2 < _g3) {
				var ix = _g2++;
				if(map[iy][ix] == 0) {
					continue;
				}
				var brick = this.game.add.sprite(0,0,"brick").setPosition(offsetX + ix * 18,8 + iy * 10);
				this.game.physics.world.enable(brick);
				this.bricks.push(brick);
			}
		}
		this.textBricksLegth.setText(this.bricks.length);
		this.setCombo(0);
		this.setScore(0);
	}
	,collideBallWithBricks: function() {
		var _gthis = this;
		var forRemove = [];
		var _g = 0;
		var _g1 = this.bricks;
		while(_g < _g1.length) {
			var brick = [_g1[_g]];
			++_g;
			this.game.physics.collide(this.game.ball,brick[0],(function(brick) {
				return function() {
					_gthis.game.playSingleSound("hit0");
					var brickHitAngle = Math.atan2(_gthis.game.ball.y - brick[0].y,_gthis.game.ball.x - brick[0].x);
					if(brickHitAngle >= _gthis.leftTop && brickHitAngle < _gthis.rightTop) {
						if(_gthis.game.ballDirY > 0) {
							_gthis.game.ballDirY = -_gthis.game.ballDirY;
						}
					} else if(brickHitAngle >= _gthis.rightTop && brickHitAngle < _gthis.rightBottom) {
						if(_gthis.game.ballDirX < 0) {
							_gthis.game.ballDirX = -_gthis.game.ballDirX;
						}
					} else if(brickHitAngle >= _gthis.rightBottom && brickHitAngle < _gthis.leftBottom) {
						if(_gthis.game.ballDirY < 0) {
							_gthis.game.ballDirY = -_gthis.game.ballDirY;
						}
					} else if(brickHitAngle >= _gthis.leftBottom || brickHitAngle < _gthis.leftTop) {
						if(_gthis.game.ballDirX > 0) {
							_gthis.game.ballDirX = -_gthis.game.ballDirX;
						}
					}
					forRemove.push(brick[0]);
				};
			})(brick));
		}
		var _g = 0;
		while(_g < forRemove.length) {
			var brick1 = [forRemove[_g]];
			++_g;
			HxOverrides.remove(this.bricks,brick1[0]);
			var rotSignY = this.game.ball.y < brick1[0].y ? -1 : 1;
			var rotSignX = this.game.ball.x < brick1[0].x ? 1 : -1;
			var tmp = this.game.tweens;
			var brick2 = brick1[0];
			var tmp1 = (function(brick) {
				return function() {
					brick[0].destroy();
				};
			})(brick1);
			tmp.add({ targets : brick2, rotation : { from : 0, to : rotSignX * rotSignY * 12}, alpha : { from : 1, to : 0}, ease : "Sine.easeInOut", duration : 500, repeat : 0, onComplete : tmp1});
			this.setCombo();
			this.setScore(this.combo * 100);
			this.textBricksLegth.setText(this.bricks.length);
			if(this.bricks.length == 0) {
				this.game.gameWin();
			}
		}
	}
	,setCombo: function(delta) {
		if(delta == 0) {
			this.combo = 0;
		} else {
			this.combo++;
		}
		if(delta != 0) {
			this.textComboSplash.setText(this.combo);
			this.game.tweens.add({ targets : this.textComboSplash, ease : "Sine.easeInOut", scale : { from : 2, to : 1}, alpha : { from : 1, to : 0}});
		}
	}
	,setScore: function(delta) {
		if(delta == 0) {
			this.score = 0;
		} else {
			this.score += delta;
		}
		this.textScore.setText("Score:" + this.score);
	}
};
var arkanoid_GameScene = function() {
	this.isAlreadyCollided = false;
	Phaser.Scene.call(this,{ key : "GameScene", init : $bind(this,this.init), create : $bind(this,this.create), update : $bind(this,this.update)});
};
arkanoid_GameScene.__super__ = Phaser.Scene;
arkanoid_GameScene.prototype = $extend(Phaser.Scene.prototype,{
	init: function() {
		this.keys = this.input.keyboard.addKeys({ "left" : "left", "right" : "right", "a" : "A", "d" : "D"});
	}
	,create: function() {
		this.textDirAndDist = this.add.text(14,0,"",{ fontSize : 8});
		this.bricks = new arkanoid_BricksManager(this);
		this.paddle = this.add.sprite(0,0,"paddle").setOrigin(0.5,0).setDepth(2);
		this.physics.world.enable(this.paddle);
		this.ball = this.add.sprite(0,0,"ball").setDepth(1);
		this.physics.world.enable(this.ball);
		var particles = this.add.particles("pixel");
		this.paddleEmitter = particles.createEmitter({ scale : { start : 5, end : 0}, speed : 4, lifespan : 450, follow : this.paddle, followOffset : { x : 0, y : 0}}).stop();
		particles.createEmitter({ scale : { start : 2, end : 0}, follow : this.ball});
		this.minPaddleX = this.paddle.width / 2;
		this.maxPaddleX = Main.gameWidth - this.minPaddleX;
		this.minBallX = this.ball.width / 2;
		this.minBallY = this.minBallX;
		this.maxBallX = Main.gameWidth - this.minBallX;
		this.maxBallY = Main.gameHeight - this.minBallY;
		this.newGame();
	}
	,newGame: function() {
		this.paddle.setPosition(Main.gameWidth / 2,86);
		this.paddleVecX = 0;
		this.paddleEmitter.stop();
		this.ball.setPosition(Main.gameWidth / 2,70);
		var angle = -1.57 + (Math.random() - 0.5) * 2;
		this.ballDirX = Math.cos(angle);
		this.ballDirY = Math.sin(angle);
		this.ballSpeed = 1;
		this.bricks.reset();
	}
	,update: function(d0,d01) {
		this.movePaddle();
		this.collideBallWithWalls();
		this.bricks.collideBallWithBricks();
		this.collideBallWithPaddle();
	}
	,movePaddle: function() {
		if(this.keys.left.isDown || this.keys.a.isDown) {
			if(this.paddleVecX == 0) {
				this.paddleEmitter.start();
			}
			this.paddleVecX -= 1;
		}
		if(this.keys.right.isDown || this.keys.d.isDown) {
			if(this.paddleVecX == 0) {
				this.paddleEmitter.start();
			}
			this.paddleVecX += 1;
		}
		if(this.paddleVecX < -3) {
			this.paddleVecX = -3;
		}
		if(this.paddleVecX > 3) {
			this.paddleVecX = 3;
		}
		this.paddle.x += this.paddleVecX;
		if(this.paddle.x < this.minPaddleX) {
			this.paddle.x = this.minPaddleX;
		} else if(this.paddle.x > this.maxPaddleX) {
			this.paddle.x = this.maxPaddleX;
		}
		if(this.paddleVecX < 0) {
			this.paddleVecX += 0.2;
			if(this.paddleVecX > 0) {
				this.paddleVecX = 0;
			}
			if(this.paddleVecX == 0) {
				this.paddleEmitter.stop();
			}
		} else if(this.paddleVecX > 0) {
			this.paddleVecX -= 0.2;
			if(this.paddleVecX < 0) {
				this.paddleVecX = 0;
			}
			if(this.paddleVecX == 0) {
				this.paddleEmitter.stop();
			}
		}
	}
	,collideBallWithWalls: function() {
		this.ball.x += this.ballDirX * this.ballSpeed;
		this.ball.y += this.ballDirY * this.ballSpeed;
		if(this.ball.x < this.minBallX) {
			this.ball.x = this.minBallX;
			this.ballDirX = -this.ballDirX;
			this.playSingleSound("hit0");
		} else if(this.ball.x > this.maxBallX) {
			this.ball.x = this.maxBallX;
			this.ballDirX = -this.ballDirX;
			this.playSingleSound("hit0");
		}
		if(this.ball.y < this.minBallY) {
			this.ball.y = this.minBallY;
			this.ballDirY = -this.ballDirY;
			this.playSingleSound("hit0");
		} else if(this.ball.y > this.maxBallY) {
			this.ball.y = this.maxBallY;
			this.ballDirY = -this.ballDirY;
			this.gameOver();
		}
	}
	,collideBallWithPaddle: function() {
		var _gthis = this;
		var currentTickCollided = false;
		this.physics.overlap(this.ball,this.paddle,function() {
			currentTickCollided = true;
			if(!_gthis.isAlreadyCollided) {
				_gthis.isAlreadyCollided = true;
				_gthis.bricks.setCombo(0);
				var dirAndDist = _gthis.ball.x - _gthis.paddle.x;
				_gthis.textDirAndDist.setText(dirAndDist);
				if(dirAndDist > -12 && dirAndDist < 12) {
					if(_gthis.ball.y + _gthis.ball.height / 2 < _gthis.paddle.y + 5) {
						_gthis.playSingleSound("hit1");
						var hitAngle = Math.atan2(_gthis.ballDirY,_gthis.ballDirX);
						if(hitAngle > 0.14 && hitAngle < 3.14) {
							var shiftAngle = -hitAngle + dirAndDist / 16;
							_gthis.ballDirX = Math.cos(shiftAngle);
							_gthis.ballDirY = Math.sin(shiftAngle);
						}
					}
				} else if(dirAndDist < 0) {
					if(_gthis.ballDirX > 0) {
						_gthis.playSingleSound("hit1");
						_gthis.ballDirX = -_gthis.ballDirX;
					}
				} else if(_gthis.ballDirX < 0) {
					_gthis.playSingleSound("hit1");
					_gthis.ballDirX = -_gthis.ballDirX;
				}
			}
		});
		if(!currentTickCollided) {
			this.isAlreadyCollided = false;
		}
	}
	,playSingleSound: function(key) {
		this.sound.stopAll();
		this.sound.play(key);
	}
	,gameOver: function() {
		this.newGame();
	}
	,gameWin: function() {
		window.alert("Great Job！！あなたはSEXY");
	}
});
var arkanoid_LoaderScene = function() {
	Phaser.Scene.call(this,{ preload : $bind(this,this.preload)});
};
arkanoid_LoaderScene.__super__ = Phaser.Scene;
arkanoid_LoaderScene.prototype = $extend(Phaser.Scene.prototype,{
	preload: function() {
		var _gthis = this;
		this.load.image("paddle","res/paddle.png");
		this.load.image("brick","res/brick.png");
		this.load.image("ball","res/ball.png");
		this.load.image("pixel","res/pixel.png");
		this.load.audio("hit0","res/hit0.wav");
		this.load.audio("hit1","res/hit1.wav");
		this.load.on("complete",function() {
			console.log("src/arkanoid/LoaderScene.hx:20:","Loading is done!");
			_gthis.scene.start("GameScene");
		});
	}
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
Main.gameWidth = 160;
Main.gameHeight = 104;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
